[
  {
    "name": "2022-07-17 00-00-00 ダーツにハマった",
    "publishedAt": "2022-07-17 00-00-00",
    "title": "ダーツにハマった",
    "description": "  Amazonのプライムデーで安かったので家でも投げられるようになった。www.dartslive.comDARTSLIVE Homeというの購入。操作感がまんま店のものと近くて",
    "body": "<div class=\"markdown-body\">\n  <p>Amazonのプライムデーで安かったので家でも投げられるようになった。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/0-img-tag.jpg\" width=\"900\" height=\"1200\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.dartslive.com/jp/dartslivehome/board/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-45622f91b5f79eb32b097118548f66313c76a6e4c29fc7082464a4a9766cc8cf.png\" alt=\"Board(ダーツボード) | ダーツライブホーム DARTSLIVE Home | DARTSLIVE\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.dartslive.com/jp/dartslivehome/board/\">www.dartslive.com</a></p>\n<p>DARTSLIVE Homeというの購入。\n操作感がまんま店のものと近くていいっすね。\nボード自体のエフェクトもあったらいいなと思ったりも  </p>\n<h4 id=\"ハマったきっかけ\">ハマったきっかけ</h4>\n<p>ソロ居酒屋やってみたいなというのがあって色々見てみた結果、継続して行けそうだったのがダーツバーだったという感じ。\nふらっとソロでカウンターで店員と話せたり、カウンターの席の客とかとダーツの対戦もお願いしやすかったりしたのでハマったのかなという気がする。<br>あとはダーツバー界隈の狭さというか、他の店との繋がり（リーグとか対戦もあるので）とか交流がみれるので面白みのポイントなのかなという気もする。<br>単純に一定ダーツうまくなりたいというのもあるが、\n夜にダーツバーいくと寝付きが良くなった気がして自律神経がちょっと整ってるんじゃないかという感覚があったりしますね。\n最近在宅勤務が多くて寝付きが悪いというの多いのかも。\n少しでも散歩する意識大事かも。<br>DARTSLIVEのアプリをインストールし始めなのでどこまでレーティング行けるんだろうというのは気になるとこ  </p>\n<h4 id=\"行った店とか\">行った店とか</h4>\n<h5 id=\"happy-happy-巣鴨店\">HAPPY HAPPY 巣鴨店</h5>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/e2713ab3e1d1fec60d9b047a20a7ba1e\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-a6b1a812683e2337ff68eff0d74eb10d7182fb5c49df22f853a81c42676e6e69.png\" alt=\"HAPPY HAPPY 巣鴨店｜東京都豊島区│ダーツバー検索 DARTSLIVE SEARCH\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/e2713ab3e1d1fec60d9b047a20a7ba1e\">search.dartslive.com</a></p>\n<p>現在のホーム。<br>店員さんがプロのダーツプレイヤーだったり上達するのに今のところ一番良い環境なのかなということもあり通ってる。<br>料金面では\n普通の1コイン1クレジットと月額3200円で投げ放題サブスク\nその他でチャージ料とワンドリンク制なので最低1000円以上の予算を考えたほうがいいかもしれない。\n食べ物の注文ができないので食べ物持ち込みOKというのもありなんか北海道の大会帰りの店員の持ってきたじゃがポックルを食べてたというときもある。<br>板橋の方にも支店があるのでそっちの方にも行ってみたいなと思ってる。  </p>\n<h5 id=\"大塚-cafe-anana\">大塚 Cafe ANANA</h5>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/56116ae92b4a5a270d9b047a20a7ba1e\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-98c15429d9dc623551e0914fc2b60141b2e764ecea2e1278ba0dcff986f38002.png\" alt=\"大塚 Cafe ANANA｜東京都豊島区│ダーツバー検索 DARTSLIVE SEARCH\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/56116ae92b4a5a270d9b047a20a7ba1e\">search.dartslive.com</a></p>\n<p>HAPPY HAPPYとのリーグの対戦の店というのもあり気になって何回か行ってる店。<br>料金面では\n普通の1コイン1クレジット\nスパムチャーハンなど食べ物系のメニューが普通に気になる  </p>\n<h5 id=\"north-t-darts\">NORTH. T DARTS</h5>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/e8a42605200897f00d9b047a20a7ba1e\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-9b4df1a770b2278775c1660c449a674697d4b578290235c3d9bcf7b27be12d8a.png\" alt=\"NORTH. T DARTS｜東京都豊島区│ダーツバー検索 DARTSLIVE SEARCH\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/e8a42605200897f00d9b047a20a7ba1e\">search.dartslive.com</a></p>\n<p>まだマイダーツを持ってないときに1回だけ行った店\nマイダーツ持ってきたらかっこいい投げ方教えてやると言われ、マイダーツ買って以来一度も行ってないのでそろそろ久し振りに行きたいかなと思っている店。<br>料金面では\n普通の1コイン1クレジットと日額1500円で投げ放題プラン  </p>\n<h5 id=\"dice池袋店\">DiCE池袋店</h5>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/b64d4d0adf4851cf790ab824ce8730e5\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-0a9937e38def333f484dedce5940383685f9df0f7117c2a2a4b19dc3dde125f7.png\" alt=\"DiCE池袋店｜東京都豊島区│ダーツバー検索 DARTSLIVE SEARCH\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/b64d4d0adf4851cf790ab824ce8730e5\">search.dartslive.com</a></p>\n<p>ネカフェ\nHAPPY HAPPYのサブスク入る前とかでひたすら投げまくりたいときに通ってた。<br>2~3時間でソフトドリンク飲み放題、投げ放題でコスパはなんやかんやネカフェ最強<br>最近、運動不足解消のため池袋は電車使わずに徒歩で行くことが多い  </p>\n<h5 id=\"batdarts渋谷\">BATDARTS渋谷</h5>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/2b4a5a9a1b3b71110d9b047a20a7ba1e\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-b41182f4871737a1793e120c894e2fb5ea1a9b81d5aedc794f9bead04552ea86.png\" alt=\"BATDARTS渋谷｜東京都渋谷区│ダーツバー検索 DARTSLIVE SEARCH\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://search.dartslive.com/jp/shop/2b4a5a9a1b3b71110d9b047a20a7ba1e\">search.dartslive.com</a></p>\n<p>オリジナルのバレルのSUPER BAT POPCORNというの使ってる。\nショートなのが投げやすいのかなという雰囲気でマイダーツ購入した。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://store.shopping.yahoo.co.jp/bat-store/batdarts-superbat-popcorn.html\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-9322345dd4fa4c734add06edcb838a48808f1eafd9c5be170a614c660d3caac0.png\" alt=\"ダーツ バレル 当店オリジナル SUPER BAT POPCORN :batdarts-superbat-popcorn:BAT DARTSヤフー店 - 通販 - Yahoo!ショッピング\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://store.shopping.yahoo.co.jp/bat-store/batdarts-superbat-popcorn.html\">store.shopping.yahoo.co.jp</a></p>\n<h5 id=\"ダーツハイブ池袋西口店\">ダーツハイブ池袋西口店</h5>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.dartshive.jp/shopdetail/000000022434/#detail\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2022-07-17 00-00-00 ダーツにハマった/iframe-f69766b8ceb4c77ddea85e66a096748575301e54cb8f245dbee73e267e0d30a7.png\" alt=\"COSMO DARTS(コスモダーツ) Fit Flight Pro(フィットフライトプロ) Sシリーズ　(ダーツ フライト)-日本最大級ダーツ通販ショップ - ダーツハイブ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.dartshive.jp/shopdetail/000000022434/#detail\">www.dartshive.jp</a></p>\n<p>Fit Flight ProのS-4というのを雰囲気で買ってる<br>Fit Flight AIRというのを最初使ってたが2日立たずに消耗してしまったので店員に相談して近い形でS-4いいんじゃないかというのがあって使ってる  </p>\n\n</div>",
    "link": "/blogs/hatena/ダーツにハマった",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/11e94cc7b838f28b4b56fe836ee0034306178c20edd14029ddcb12e850134896.png",
      "small": "/ogp/630x630/blogs/hatena/11e94cc7b838f28b4b56fe836ee0034306178c20edd14029ddcb12e850134896.png"
    }
  },
  {
    "name": "add_custom_stylelint_eslint",
    "title": "ESLintのルール新規追加、Stylelintのルール追加しました 補足",
    "publishedAt": "2022-06-18 18-22-39",
    "description": "https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-17  の「ESLintのルール新規追加、Stylelintのル",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22eslint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E6%96%B0%E8%A6%8F%E8%BF%BD%E5%8A%A0%E3%80%81stylelint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-%E8%A3%9C%E8%B6%B3%22emoji%3A-%22%E2%9C%85%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22eslint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22eslint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E6%96%B0%E8%A6%8F%E8%BF%BD%E5%8A%A0%E3%80%81stylelint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-%E8%A3%9C%E8%B6%B3%22emoji%3A-%22%E2%9C%85%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22eslint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;ESLintのルール新規追加、Stylelintのルール追加しました 補足&quot;<br>\nemoji: &quot;✅&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;sass&quot;, &quot;stylelint&quot;, &quot;eslint&quot;, &quot;emotion&quot;, &quot;lancers&quot;]<br>\npublished: true</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fengineer.blog.lancers.jp%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%25AE%259A%25E4%25BE%258B-2022-6-17\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://engineer.blog.lancers.jp/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E5%AE%9A%E4%BE%8B-2022-6-17\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-17</a></p>\n<p>の「ESLintのルール新規追加、Stylelintのルール追加しました」の記事に対しての補足記事になります。</p>\n<p>最初に記事の足りない箇所の補足をした上で、<br>\nLintのコードの内容や開発をどのように進めているのかなども記載したいと思います。</p>\n<h2 id=\"%E8%A8%98%E4%BA%8B%E3%81%AE%E8%A3%9C%E8%B6%B3\"><a class=\"header-anchor-link\" href=\"#%E8%A8%98%E4%BA%8B%E3%81%AE%E8%A3%9C%E8%B6%B3\" aria-hidden=\"true\"></a> 記事の補足</h2>\n<h3 id=\"%3E-stylelint%E3%81%A8%E3%81%AF%E5%88%A5%E3%81%A7eslint%E3%81%A7%E3%82%82%E4%BD%9C%E6%88%90%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E7%90%86%E7%94%B1%E3%81%A8%E3%81%97%E3%81%A6css-in-js%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E9%81%A9%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%8Ccss%2C-sass%E3%81%A8%E3%81%AF%E7%95%B0%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81eslint%E3%81%A7%E3%82%82%E5%90%8C%E6%A7%98%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\"><a class=\"header-anchor-link\" href=\"#%3E-stylelint%E3%81%A8%E3%81%AF%E5%88%A5%E3%81%A7eslint%E3%81%A7%E3%82%82%E4%BD%9C%E6%88%90%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E7%90%86%E7%94%B1%E3%81%A8%E3%81%97%E3%81%A6css-in-js%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E9%81%A9%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%8Ccss%2C-sass%E3%81%A8%E3%81%AF%E7%95%B0%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81eslint%E3%81%A7%E3%82%82%E5%90%8C%E6%A7%98%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\" aria-hidden=\"true\"></a> &gt; Stylelintとは別でESLintでも作成しようとした理由としてCSS in JSによるスタイルの適応方法がCSS, SASSとは異なるためESLintでも同様のルールの追加をしています。</h3>\n<p>実際のSassとTypeScriptによるReactでのCSS in JSでの変数適応の例を見ると</p>\n<div class=\"code-block-container\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.hoge {</span>\n<span class=\"token property-line\">  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$colorWhite</span>;</span>\n<span class=\"token selector\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Color <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@design_system'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hogeCSS <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Color<span class=\"token punctuation\">.</span>White<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>上記のようにSassでは <code>$xxx</code>、TypeScriptでは <code>${xxx}</code> と構文上の違いがあり、<br>\nStylelintではSassをESLint側はCSS in JSをメインにしてルールを記載しようとなった背景があります。</p>\n<p>前回はSassに対してのStylelintの適応の話しかしてなかったのでTypeScript側ではどういった色の管理しているのか触れてなかったのですが、<br>\n基本はSassの値を参照で間にWebpackとcss-loaser経由での<a href=\"https://github.com/css-modules/icss#import\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modulesの:import</a>によるSassの変数をTypeScriptでも使えるようなやり方で現状は適応してたりします。</p>\n<h3 id=\"%3E-figma%E3%81%A8%E3%81%8B%E3%81%AB%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bpx%E3%82%84%E8%89%B2%E3%81%AE%E7%89%A9%E7%90%86%E7%9A%84%E3%81%AA%E5%80%A4\"><a class=\"header-anchor-link\" href=\"#%3E-figma%E3%81%A8%E3%81%8B%E3%81%AB%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bpx%E3%82%84%E8%89%B2%E3%81%AE%E7%89%A9%E7%90%86%E7%9A%84%E3%81%AA%E5%80%A4\" aria-hidden=\"true\"></a> &gt; Figmaとかに定義されているpxや色の物理的な値</h3>\n<p>Figma上で親パーツとの間隔を調べるときにAlt (Option)を押しながらマウスカーソルを当てて表示されている数値をそのまま貼ればVSCodeで補完の候補が出てくるので都度定義ファイルを開いて適切な変数名を調べる必要がなくなりました。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/add_custom_stylelint_eslint/figma_padding.jpg\" alt=\"\"></p>\n<p>色についてもFigma上に表示されている値をクリックしてコピれるのでそのまま貼り付けしてあとは補完に任せれば良い環境になっています。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/add_custom_stylelint_eslint/figma_color.jpg\" alt=\"\"></p>\n<h3 id=\"%3E-%E4%BB%96%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%82%82%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E5%90%AB%E3%82%81%E3%81%A6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84\"><a class=\"header-anchor-link\" href=\"#%3E-%E4%BB%96%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%82%82%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E5%90%AB%E3%82%81%E3%81%A6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84\" aria-hidden=\"true\"></a> &gt; 他のプロジェクトでも静的解析含めてデザインシステムライブラリを使っていくようにしていきたい</h3>\n<p>直近、自分が関わっているプロジェクト以外では適応がまだできていないので時間あるときに適応したいですね。<br>\n自分が適応するのではなく、ビルドに影響しないLintの設定なのでPRで他のプロジェクトにも適応しましたというのがあったら結構嬉しかったりします。</p>\n<p>個人的問題ですが拡散したものの布教されるまでにどうしても時間がかかってしまうのが個人的な悩みだったりしますね。<br>\n（職務範囲の問題とかもあるのでそこまで踏み込んでもよいのだろうかというのはたまに思うところ）<br>\n誰がやるやら問題ともいってます。</p>\n<h2 id=\"%E3%82%B3%E3%83%BC%E3%83%89%E8%AA%AC%E6%98%8E\"><a class=\"header-anchor-link\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E8%AA%AC%E6%98%8E\" aria-hidden=\"true\"></a> コード説明</h2>\n<h3 id=\"stylelint\"><a class=\"header-anchor-link\" href=\"#stylelint\" aria-hidden=\"true\"></a> Stylelint</h3>\n<p>プロジェクトの構成はほぼこれ<br>\n<a href=\"https://zenn.dev/jj/scraps/42157938c9eb48\" target=\"_blank\">stylelint-pluginを作ってみる会</a></p>\n<h4 id=\"%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89\"><a class=\"header-anchor-link\" href=\"#%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89\" aria-hidden=\"true\"></a> 実装コード</h4>\n<p>ルールを記載している index.js の内容として下記になります。<br>\nコードのコメント上で説明します</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">index.js</span></div><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stylelint <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stylelint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorsJSON <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/colors.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> spacingJSON <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/spacing.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ruleName <span class=\"token operator\">=</span> <span class=\"token string\">'@lancers/design-guideline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">ruleMessages</span><span class=\"token punctuation\">(</span>ruleName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">expected</span><span class=\"token operator\">:</span> <span class=\"token string\">'Expected...'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 現状はpadding, padding-[top,...],margin,margin-[top,...],grid-gap,gapなどの間隔を対象にしている\n */</span>\n<span class=\"token keyword\">const</span> spacingPropReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S*padding\\S*|\\S*margin\\S*|\\S*gap\\S*)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * #のカラーコード以外に$などの変数も対象にしている\n * colors.jsonには変数名-カラーコードの情報も保存しているので\n * 適当なSass変数による色適応を許可しないようにした\n */</span>\n<span class=\"token keyword\">const</span> colorReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(#|\\$)[0-9a-zA-Z]*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * px以外に$などの変数も対象にしている\n * spacing.jsonも同様に変数名-pxの情報も保存しているので\n * 適当なSass変数によるpx適応を許可しないようにした\n */</span>\n<span class=\"token keyword\">const</span> spacingReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]*px|\\$[0-9a-zA-Z]*)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkColors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// CSSでいうpaddingなどのstyle属性をpropで扱っている</span>\n  <span class=\"token keyword\">const</span> prop <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spacingPropReg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 上記の条件はスキップ</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// decl.valueはstyle属性に対しての指定された値を扱っている</span>\n  <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>colorReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// カラーコード・変数名のマッチがあるか</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> colorsJSON<span class=\"token punctuation\">[</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> colorsJSON<span class=\"token punctuation\">[</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined color rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see colors.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// color.sassはJSONにあるSass用の変数を示している</span>\n  <span class=\"token keyword\">const</span> definedColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>sass<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチした場合は変数名を提案する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>messages<span class=\"token punctuation\">.</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see colors.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkSpacing</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// CSSでいうpaddingなどのstyle属性をpropで扱っている</span>\n  <span class=\"token keyword\">const</span> prop <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spacingPropReg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 上記の条件以外はスキップ</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// decl.valueはstyle属性に対しての指定された値を扱っている</span>\n  <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>spacingReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// px・変数名のマッチがあるか</span>\n  <span class=\"token keyword\">const</span> spacing <span class=\"token operator\">=</span> spacingJSON<span class=\"token punctuation\">[</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined spacing rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see spacing.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// spacing.sassはJSONにあるSass用の変数を示している</span>\n  <span class=\"token keyword\">const</span> definedSpacing <span class=\"token operator\">=</span> spacing<span class=\"token punctuation\">.</span>sass<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedSpacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチした場合は変数名を提案する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>messages<span class=\"token punctuation\">.</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedSpacing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see spacing.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> stylelint<span class=\"token punctuation\">.</span><span class=\"token function\">createPlugin</span><span class=\"token punctuation\">(</span>ruleName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> validOptions <span class=\"token operator\">=</span> stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">validateOptions</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> ruleName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">walkDecls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">decl</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * 現状1つのStylelintのプラグインで色、間隔のルールチェックをしているので分けるべきなんだろうけど\n       * 複数のルールとしてStylelintのプロジェクト分けるのにもためらっている\n       */</span>\n      <span class=\"token function\">checkColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">checkSpacing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>ruleName <span class=\"token operator\">=</span> ruleName<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>messages <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">;</span>\n</code></pre></div><h4 id=\"%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\"><a class=\"header-anchor-link\" href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\" aria-hidden=\"true\"></a> テストコード</h4>\n<p>検証として実施済みのテストコードとして下記のものになります。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">index.test.js</span></div><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ruleName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">testRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  ruleName<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">fix</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">accept</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: $colorWhite;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">reject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: #fff;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) #fff -> $colorWhite [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: #FFF;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) #FFF -> $colorWhite [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: #123456;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined color rule: #123456 -> ??? [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: $hoge;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined color rule: $hoge -> ??? [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding: 99px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined spacing rule: 99px -> ??? [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding: $hoge;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined spacing rule: $hoge -> ??? [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding-top: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin-bottom: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        raw-gap: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        gap: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        grid-gap: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        border: 1px dashed #fff;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">warnings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">column</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">endColumn</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">endLine</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">line</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">rule</span><span class=\"token operator\">:</span> <span class=\"token string\">'@lancers/design-guideline'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">severity</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n            <span class=\"token string\">'Expected... (@lancers/design-guideline) #fff -> $colorWhite [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>テスト実行はVSCodeのデバック実行機能から実行するように下記のlaunch.jsonを保存させてテストしやすい感じで実施してました。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">launch.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stylelint:design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}/lint/stylelint-plugin-design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"runtimeArgs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"--inspect-brk\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"${workspaceRoot}/lint/stylelint-plugin-design-guideline/node_modules/.bin/jest\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"--runInBand\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integratedTerminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"internalConsoleOptions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"neverOpen\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9229</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3 id=\"eslint\"><a class=\"header-anchor-link\" href=\"#eslint\" aria-hidden=\"true\"></a> ESLint</h3>\n<p>プロジェクト構成はこの方の記事がものすごく近いです</p>\n<p>書いて覚える ESLint ルールの作り方</p>\n<p><a href=\"https://qiita.com/kik4/items/a6d0dc2f8ab5ce50f97d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript版</a><br>\n<a href=\"https://qiita.com/kik4/items/ef30d5e0e24dabb81463\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript版</a></p>\n<p>若干の違いが自分の方はテストライブラリをJestを採用しているぐらいの差分だと思います。</p>\n<h4 id=\"%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89-1\"><a class=\"header-anchor-link\" href=\"#%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89-1\" aria-hidden=\"true\"></a> 実装コード</h4>\n<p>追加したルールのコードのコメント上で説明します。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/index.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * このファイルをバレルのように扱っている\n * ルールを追加した際はこちらにもimportを記載する\n */</span>\n<span class=\"token keyword\">import</span> emotionColors <span class=\"token keyword\">from</span> <span class=\"token string\">'./rules/emotionColors'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> emotionSpacing <span class=\"token keyword\">from</span> <span class=\"token string\">'./rules/emotionSpacing'</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    emotionColors<span class=\"token punctuation\">,</span>\n    emotionSpacing<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  configs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    all<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'design-guideline'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        emotionColors<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n        emotionSpacing<span class=\"token operator\">:</span> <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/util.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * 共通の変数まとめた\n */</span>\n\n<span class=\"token comment\">/**\n * css``やstyled.div``などの書き方を対象にしている\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> cssInJSReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(css|styled.[a-zA-Z]*)`</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * カラーコード以外に${xxx}という変数の書き方も対象にしている\n * 若干正規表現が怪しいがライブラリ経由のカラーコード呼び出しは\n * ${Color.xxx}な形式だから現状カバーできているがより厳密に書いたほうがよさそう\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> colorReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(#[0-9a-zA-Z]*|\\${[0-9a-zA-Z]*})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Stylelint側と同様の間隔の対象にしている\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> spacingPropReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S*padding\\S*|\\S*margin\\S*|\\S*gap\\S*): .*?;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * px以外に${xxx}という変数の書き方も対象にしている\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> spacingReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]*px|\\${[0-9a-zA-Z]*})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionColors.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Rule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> colorReg<span class=\"token punctuation\">,</span> cssInJSReg <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colorsJSON <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/colors.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> emotionColors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'suggestion'</span><span class=\"token punctuation\">,</span>\n    docs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'@lancers/design_guideline共通の使用する色指定ルール'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    fixable<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * const, varなどの変数を定義した箇所に対してのルールを追加する\n       * nodeの対象は変数定義の箇所\n       */</span>\n      <span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * context.getSourceCode ファイルの全体のソースを扱っている\n         */</span>\n        <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cssInJSReg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// emotionなどのStyle指定ではない場合はスキップ</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>colorReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> matcheString <span class=\"token operator\">=</span> matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span>\n          colorsJSON<span class=\"token punctuation\">[</span>matcheString<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> colorsJSON<span class=\"token punctuation\">[</span>matcheString<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined color rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matcheString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see utils/Color/index.ts(colors.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> definedColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>script<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチした場合は候補を提案する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matcheString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see utils/Color/index.ts(colors.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">/**\n             * eslint --fix実行時に対象の箇所を自動で修正するための関数\n             */</span>\n            <span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>fixer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n\n              <span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 文字列置換</span>\n              <span class=\"token keyword\">const</span> fixedCode <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>matcheString<span class=\"token punctuation\">,</span> definedColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// 実際のソースコード上にも文字列置換を反映する</span>\n              <span class=\"token keyword\">return</span> fixer<span class=\"token punctuation\">.</span><span class=\"token function\">replaceText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> fixedCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Rule<span class=\"token punctuation\">.</span>RuleModule<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> emotionColors<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emotionColors<span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionSpacing.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Rule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> spacingPropReg<span class=\"token punctuation\">,</span> spacingReg <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> spacingJSON <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/spacing.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> emotionSpacing <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'suggestion'</span><span class=\"token punctuation\">,</span>\n    docs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'@lancers/design_guideline共通の間隔のpx指定ルール'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    fixable<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * const, varなどの変数を定義した箇所に対してのルールを追加する\n       * nodeの対象は変数定義の箇所\n       */</span>\n      <span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * context.getSourceCode ファイルの全体のソースを扱っている\n         */</span>\n        <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> propMatch <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>spacingPropReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>propMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> propString <span class=\"token operator\">=</span> propMatch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> pxMatch <span class=\"token operator\">=</span> propString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>spacingReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pxMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> pxString <span class=\"token operator\">=</span> pxMatch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> spacing <span class=\"token operator\">=</span> spacingJSON<span class=\"token punctuation\">[</span>pxString<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined spacing rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pxString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see utils/Spacing/index.ts(spacing.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> definedSpacing <span class=\"token operator\">=</span> spacing<span class=\"token punctuation\">.</span>script<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedSpacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチした場合は候補を提案する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pxString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedSpacing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see utils/Spacing/index.ts(spacing.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">/**\n             * eslint --fix実行時に対象の箇所を自動で修正するための関数\n             */</span>\n            <span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>fixer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n\n              <span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 文字列置換</span>\n              <span class=\"token keyword\">const</span> fixedProp <span class=\"token operator\">=</span> propString<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>pxString<span class=\"token punctuation\">,</span> definedSpacing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">const</span> fixedCode <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>propString<span class=\"token punctuation\">,</span> fixedProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// 実際のソースコード上にも文字列置換を反映する</span>\n              <span class=\"token keyword\">return</span> fixer<span class=\"token punctuation\">.</span><span class=\"token function\">replaceText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> fixedCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Rule<span class=\"token punctuation\">.</span>RuleModule<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> emotionSpacing<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emotionSpacing<span class=\"token punctuation\">;</span>\n</code></pre></div><h4 id=\"%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89-1\"><a class=\"header-anchor-link\" href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89-1\" aria-hidden=\"true\"></a> テストコード</h4>\n<p>検証として実施済みのテストコードとして下記のものになります。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionColors.test.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RuleTester <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> emotionColors <span class=\"token keyword\">from</span> <span class=\"token string\">'./emotionColors'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ruleTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nruleTester<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emotionColors'</span><span class=\"token punctuation\">,</span> emotionColors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 成功ケース</span>\n  valid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${Color.White};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// CSSinJS的な書き方ではないのでセーフ</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = `color: ${hoge};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`${MediaQuery.mqsp} { color: ${Color.White}; }`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 失敗ケース</span>\n  invalid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: #fff;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'#fff -> ${Color.White} [see utils/Color/index.ts(colors.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${Color.White};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: #D1D1D1;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'#D1D1D1 -> ${Color.Grey30} [see utils/Color/index.ts(colors.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${Color.Grey30};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${hoge};`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined color rule: ${hoge} -> ??? [see utils/Color/index.ts(colors.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionSpacing.test.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RuleTester <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-var-requires</span>\n<span class=\"token keyword\">import</span> emotionSpacing <span class=\"token keyword\">from</span> <span class=\"token string\">'./emotionSpacing'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ruleTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nruleTester<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emotionSpacing'</span><span class=\"token punctuation\">,</span> emotionSpacing<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 成功ケース</span>\n  valid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: ${Spacing.xxxs};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`border: 1px solid ${Color.Grey30};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 失敗ケース</span>\n  invalid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: 8px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'8px -> ${Spacing.xxs} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: ${Spacing.xxs};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: 9px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined spacing rule: 9px -> ??? [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin: 9px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined spacing rule: 9px -> ??? [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin: ${hoge};`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined spacing rule: ${hoge} -> ??? [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'64px -> ${Spacing.xxxl} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: ${Spacing.xxxl};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding-top: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'64px -> ${Spacing.xxxl} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding-top: ${Spacing.xxxl};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin-left: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'64px -> ${Spacing.xxxl} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin-left: ${Spacing.xxxl};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`grid-column-gap: 12px; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'12px -> ${Spacing.xs} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span>\n        <span class=\"token string\">'var style = css`grid-column-gap: ${Spacing.xs}; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`gap: 12px; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'12px -> ${Spacing.xs} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`gap: ${Spacing.xs}; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>Stylelintと同様にテスト実行はVSCodeのデバック実行機能から実行するように下記のlaunch.jsonを保存させてテストしやすい感じで実施してました。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">launch.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint:design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}/lint/eslint-plugin-design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"runtimeArgs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"--experimental-modules\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"--inspect-brk\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"${workspaceRoot}/lint/eslint-plugin-design-guideline/node_modules/.bin/jest\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"--runInBand\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integratedTerminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"internalConsoleOptions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"neverOpen\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9229</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2 id=\"stylelint%E3%81%A8eslint%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\"><a class=\"header-anchor-link\" href=\"#stylelint%E3%81%A8eslint%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\" aria-hidden=\"true\"></a> StylelintとESLintの拡張を書いてみての感想</h2>\n<p>全体的に正規表現で頑張っている感は正直否めないとこだと思います。<br>\nLintの対象範囲についてはCSS限定にかけるStylelintは書きやすい反面、どうしてもESLintは変数の定義としてのスコープとなってしまうのでStyle属性に絞りこむにはどうしたら良いのか？となることが多かったです。<br>\nESLint側のみfixによるコードの変更対応をすすめましたが置換の範囲を間違えると既存のソースが消えることがあり完成するまでが大変でした。<br>\n引き続きルールの拡張を進めるのとともに定着化を進めていきたいと思います。</p>\n\n</div>",
    "link": "/blogs/zenn/ESLintのルール新規追加、Stylelintのルール追加しました 補足",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/6d54a82d9e2bd3438983c1fc6ad0678ca8a6445b7cb7520a996fa0b54e1fd93b.png",
      "small": "/ogp/630x630/blogs/zenn/6d54a82d9e2bd3438983c1fc6ad0678ca8a6445b7cb7520a996fa0b54e1fd93b.png"
    }
  },
  {
    "name": "custom_stylelint",
    "title": "独自のStylelint拡張をかいた 補足 共通のカラーコード参照",
    "publishedAt": "2022-06-05 05-17-39",
    "description": "https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-3  の「独自のStylelint拡張をかいた」の記事に対しての",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22%E7%8B%AC%E8%87%AA%E3%81%AEstylelint%E6%8B%A1%E5%BC%B5%E3%82%92%E3%81%8B%E3%81%84%E3%81%9F-%E8%A3%9C%E8%B6%B3-%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E5%8F%82%E7%85%A7%22emoji%3A-%22%F0%9F%8E%A8%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22%E7%8B%AC%E8%87%AA%E3%81%AEstylelint%E6%8B%A1%E5%BC%B5%E3%82%92%E3%81%8B%E3%81%84%E3%81%9F-%E8%A3%9C%E8%B6%B3-%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E5%8F%82%E7%85%A7%22emoji%3A-%22%F0%9F%8E%A8%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;独自のStylelint拡張をかいた 補足 共通のカラーコード参照&quot;<br>\nemoji: &quot;🎨&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;sass&quot;, &quot;stylelint&quot;, &quot;emotion&quot;, &quot;lancers&quot;]<br>\npublished: true</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fengineer.blog.lancers.jp%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%25AE%259A%25E4%25BE%258B-2022-6-3\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://engineer.blog.lancers.jp/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E5%AE%9A%E4%BE%8B-2022-6-3\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-3</a></p>\n<p>の「独自のStylelint拡張をかいた」の記事に対しての補足記事になります。<br>\n定例中は社内での画面共有で伝わるやろという雰囲気感でやっていたので外向けに説明不十分な箇所の追記になります。</p>\n<p>なぜ補足をZennで書こうとしたかというと他にも伝わってなさそうなことをZennのコメントで拾えそうかなと思ったからです。</p>\n<h2 id=\"%3E-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F%E4%B8%8A%E3%81%A7%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AA%E3%81%A9%E3%82%82%E5%AE%9A%E6%95%B0%E5%8C%96%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%80%A4%E5%8F%82%E7%85%A7%E3%82%92%E5%85%B1%E9%80%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%AD%A6%E5%91%8A%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B%E5%AF%BE%E5%BF%9C%E3%82%92%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\"><a class=\"header-anchor-link\" href=\"#%3E-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F%E4%B8%8A%E3%81%A7%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AA%E3%81%A9%E3%82%82%E5%AE%9A%E6%95%B0%E5%8C%96%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%80%A4%E5%8F%82%E7%85%A7%E3%82%92%E5%85%B1%E9%80%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%AD%A6%E5%91%8A%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B%E5%AF%BE%E5%BF%9C%E3%82%92%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\" aria-hidden=\"true\"></a> &gt; デザインシステムを進めていく上でカラーコードなども定数化されているのでコードの値参照を共通のファイルからするように警告を表示させる対応をしました。</h2>\n<blockquote>\n<p>カラーコードなども定数化</p>\n</blockquote>\n<blockquote>\n<p>コードの値参照を共通のファイル</p>\n</blockquote>\n<p>カラーコードは1つのSASSファイルにまとめています。<br>\n内容として</p>\n<div class=\"code-block-container\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/**\n * colors\n */</span>\n<span class=\"token comment\">/* stylelint-disable @lancers/design-guideline */</span>\n<span class=\"token property\"><span class=\"token variable\">$colorWhite</span></span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n...\n<span class=\"token comment\">/* stylelint-enable @lancers/design-guideline */</span>\n</code></pre></div><p>上記のような記載の共通のカラーコード定義ファイルを作成しています。<br>\nstylelint-disableのコメント入れているのはStylelintの自身が作成したルールで検出されてしまうので回避として意図的に無効化してます。<br>\nこのSASSファイルはSASSの@importを経由にしてグローバル展開するような使い方の想定で使用しています。</p>\n<p><a href=\"https://sass-lang.com/blog/the-module-system-is-launched#future-plans\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">今後の計画</a> もあるので今後もSASSを採用するかというと微妙なとこですが</p>\n<h2 id=\"%3E-const-colorsjson-%3D-require('%40lancers%2Fdesign_guideline%2Fscripts%2Fcolors.json')%3B\"><a class=\"header-anchor-link\" href=\"#%3E-const-colorsjson-%3D-require('%40lancers%2Fdesign_guideline%2Fscripts%2Fcolors.json')%3B\" aria-hidden=\"true\"></a> &gt; const colorsJSON = require('@lancers/design_guideline/scripts/colors.json');</h2>\n<p>1つにまとめたカラーコードのSASSファイルをJSONファイル化するための仕組みがあります。</p>\n<p>下記のような正規表現で抽出した処理のScriptをビルド時に実行してカラーコードをJSON化してStylelintでの参照するカラーコードも更新するようにしています。</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-var-requires</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colorsSASS <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../src/styles/colors.scss</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'utf8'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorsMatch <span class=\"token operator\">=</span> colorsSASS<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">color.*: #.*;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> colorsMatch<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>colorsText<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> colorsText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">': '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  acc<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  acc<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/colors.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>個人的にはJSONファイルがいろんなもので扱いやすくていいのかなと思ってます。<br>\n型的には最初からTypeScriptとしても出しておけばというのはありますね。</p>\n<h2 id=\"%3E-%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98%E3%81%AE%E5%AE%9F%E8%A3%85%E6%84%9F%E8%A6%9A%E3%81%A7%E9%80%B2%E3%82%81%E3%82%89%E3%82%8C%E3%81%9F%E3%81%AE%E3%81%A7%E4%BB%96%E3%81%AB%E5%85%B1%E9%80%9A%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%81%84%E9%96%A2%E6%95%B0%E3%81%AA%E3%81%A9%E3%82%82%E6%8B%A1%E5%BC%B5%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\"><a class=\"header-anchor-link\" href=\"#%3E-%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98%E3%81%AE%E5%AE%9F%E8%A3%85%E6%84%9F%E8%A6%9A%E3%81%A7%E9%80%B2%E3%82%81%E3%82%89%E3%82%8C%E3%81%9F%E3%81%AE%E3%81%A7%E4%BB%96%E3%81%AB%E5%85%B1%E9%80%9A%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%81%84%E9%96%A2%E6%95%B0%E3%81%AA%E3%81%A9%E3%82%82%E6%8B%A1%E5%BC%B5%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\" aria-hidden=\"true\"></a> &gt; こんな感じの実装感覚で進められたので他に共通で使用したい関数なども拡張に入れていきたいと思います。</h2>\n<blockquote>\n<p>他に共通で使用したい関数</p>\n</blockquote>\n<p>同定例で <a href=\"https://twitter.com/high_g_engineer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@high_g_engineer</a> が言ってたpadding, margin, line-heightとかの間隔を8の倍数px指定を定数化とlint化するとか。</p>\n<p>共通のmedia queryの省略したようなのを関数化するとか。</p>\n<h2 id=\"%3E-%40stylelint%2Fpostcss-css-in-js-%E3%81%AB%E3%82%88%E3%82%8Bemotion%E3%81%A7%E3%81%AEstylelint%E3%82%82%E6%A4%9C%E8%A8%8E%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%81%8Ceslint-(typescript)%E3%81%A7%E3%81%AE%E6%A4%9C%E7%9F%A5%E3%82%82%E5%8F%AF%E8%83%BD%E3%81%AA%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%97%E3%82%88%E3%81%86%E3%81%8B%E3%81%AA%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\"><a class=\"header-anchor-link\" href=\"#%3E-%40stylelint%2Fpostcss-css-in-js-%E3%81%AB%E3%82%88%E3%82%8Bemotion%E3%81%A7%E3%81%AEstylelint%E3%82%82%E6%A4%9C%E8%A8%8E%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%81%8Ceslint-(typescript)%E3%81%A7%E3%81%AE%E6%A4%9C%E7%9F%A5%E3%82%82%E5%8F%AF%E8%83%BD%E3%81%AA%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%97%E3%82%88%E3%81%86%E3%81%8B%E3%81%AA%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\" aria-hidden=\"true\"></a> &gt; @stylelint/postcss-css-in-js によるemotionでのStylelintも検討しましたがESLint (TypeScript)での検知も可能な状態にしようかなと思います</h2>\n<p>なぜemotionをそのままStylelint適応検討ではなくESLint側でやろうと思ったのか？</p>\n<p>-&gt; <a href=\"https://github.com/emotion-js/emotion/discussions/2694\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">このディスカッションの今後</a>が気になるからです。</p>\n<p>どういった方針になるかわからないですがおそらくしばらく動きはないんだろうと思ってます。<br>\n貢献のチャンスかも知れませんが僕自身は下記の対応が早そうと思いましたのでそっ閉じしてます。</p>\n<p>ESLintでも下記みたいな定義があったとき</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> style1 <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: #FFF;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> style2 <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>colorWhite<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>代入する値の検証を正規表現頑張ればいけなくない？（エアプ）と思っているのでESLint側で直近は解決させようかなと思いました。</p>\n<p>TypeScriptとStylelintの混合は難しいのかな？とふんわり思ってたりもします。</p>\n\n</div>",
    "link": "/blogs/zenn/独自のStylelint拡張をかいた 補足 共通のカラーコード参照",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/052da65e67af3127e1f0c0ab240657a78110479fecd63718380a72c820bdd4fb.png",
      "small": "/ogp/630x630/blogs/zenn/052da65e67af3127e1f0c0ab240657a78110479fecd63718380a72c820bdd4fb.png"
    }
  },
  {
    "name": "split_monolith",
    "title": "モノリス分離したいのでモノレポ化にする考察",
    "publishedAt": "2022-03-24 24-18-08",
    "description": "最近の仕事で思うのがソースが一箇所に集中しつつありながらもちょっとマイクロサービス意識して別アプリケーションのディレクトリ切ってみて結果的にソースや設計思想も散らばってて辛いという",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%97%E3%81%9F%E3%81%84%E3%81%AE%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E5%8C%96%E3%81%AB%E3%81%99%E3%82%8B%E8%80%83%E5%AF%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22idea%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22monolith%22%2C-%22monorepo%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%97%E3%81%9F%E3%81%84%E3%81%AE%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E5%8C%96%E3%81%AB%E3%81%99%E3%82%8B%E8%80%83%E5%AF%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22idea%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22monolith%22%2C-%22monorepo%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;モノリス分離したいのでモノレポ化にする考察&quot;<br>\nemoji: &quot;💬&quot;<br>\ntype: &quot;idea&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;monolith&quot;, &quot;monorepo&quot;]<br>\npublished: true</h2>\n<p>最近の仕事で思うのがソースが一箇所に集中しつつありながらもちょっとマイクロサービス意識して別アプリケーションのディレクトリ切ってみて結果的にソースや設計思想も散らばってて辛いというのがあるのでどう分割すると良さそうなのかというのを考えてみた</p>\n<h2 id=\"%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98\"><a class=\"header-anchor-link\" href=\"#%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98\" aria-hidden=\"true\"></a> 事前知識</h2>\n<p>zennでモノレポの記事漁っててHimenonさんの記事がまとまってて結構すき</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fzenn.dev%2Fhimenon%2Farticles%2F3d0e3480391c31\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://zenn.dev/himenon/articles/3d0e3480391c31\" style=\"display: none\" target=\"_blank\">https://zenn.dev/himenon/articles/3d0e3480391c31</a><br style=\"display: none\">\n(記事移動先: <a href=\"https://himenon.github.io/docs/javascript/comparison-of-package-layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://himenon.github.io/docs/javascript/comparison-of-package-layout</a>)</p>\n<h3 id=\"%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9\"><a class=\"header-anchor-link\" href=\"#%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9\" aria-hidden=\"true\"></a> モノリス</h3>\n<p>Himenonさんの記事にない個人的なGood / Bad述べると（似たような意見になるかもしれない）</p>\n<ul>\n<li>\n<p>Good</p>\n<ul>\n<li>git cloneが1つのレポジトリで完結する\n<ul>\n<li>GitHubでのやりとりもこのレポジトリで完結する</li>\n<li>GitHubの管理者が限定されている場合とかは容易</li>\n</ul>\n</li>\n<li>責任から外れたコードも流し見できる\n<ul>\n<li>いっぱい勉強できるぞという点でGood</li>\n<li>Webフロントエンド・サーバサイドのソースも一緒になっているときはアプリケーション全体が把握できるかもしれない</li>\n<li>一見作業の影響外と思ったものを検知できるとか\n<ul>\n<li>Badに表裏一体にある問題ではあるが共通の処理が変更するのでという合意があるのなら問題にすらならない事柄かも</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>コードが別管理で散らばることがない\n<ul>\n<li>1つしかないのでそれはそう</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Bad</p>\n<ul>\n<li>CI系のタスクの設置が複雑になる\n<ul>\n<li>必要なとこの作業だけでもユニットテストに時間かかる問題</li>\n</ul>\n</li>\n<li>完全に責任外のコードが見える\n<ul>\n<li>grap作業のノイズになりがち</li>\n</ul>\n</li>\n<li>git cloneにかける時間が増大する\n<ul>\n<li>必要なとこの作業だけでも環境構築に時間がかかるとか</li>\n<li>git pack objects 肥大化問題</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D\"><a class=\"header-anchor-link\" href=\"#%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D\" aria-hidden=\"true\"></a> モノレポ</h3>\n<p>同様に個人的なGood / Bad述べると</p>\n<ul>\n<li>\n<p>Good</p>\n<ul>\n<li>CI系のタスクの設置が最小限になる</li>\n<li>作業に必要な環境構築が最小になる\n<ul>\n<li>つまみ食い感覚で必要なソースをgit cloneするのは結構すき</li>\n</ul>\n</li>\n<li>モノレポの1部は全く別のプロジェクトのライブラリとして使用することも可能な場合もある</li>\n</ul>\n</li>\n<li>\n<p>Bad</p>\n<ul>\n<li>デプロイが複雑になる\n<ul>\n<li>モノレポ間での更新順番を作る必要がでてくる\n<ul>\n<li>作業者間の更新タイミングが難しい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作業が変わったときなど都度、構築する必要が出てくる\n<ul>\n<li>GitHubの管理者が限定されている場合とかは面倒\n<ul>\n<li>モノリス分離することをためらわれる要因では？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>共通化を意識しないとコードが散らばりがち</li>\n<li>環境変数の整備が大変\n<ul>\n<li>極力1つのdotenvにまとめつつ、変数の適応を限定的に行うとか考え始めると面倒</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%A7%E3%81%8D%E3%81%9D%E3%81%86%E3%81%AA%E3%81%93%E3%81%A8\"><a class=\"header-anchor-link\" href=\"#%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%A7%E3%81%8D%E3%81%9D%E3%81%86%E3%81%AA%E3%81%93%E3%81%A8\" aria-hidden=\"true\"></a> モノリス分離できそうなこと</h2>\n<h3 id=\"model-view-controller%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AEmodel\"><a class=\"header-anchor-link\" href=\"#model-view-controller%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AEmodel\" aria-hidden=\"true\"></a> Model View ControllerのうちのModel</h3>\n<p>アプリーケーション複数になった場合、Modelだけは様々な箇所で使いたがるものであると思っていたり、ライブラリの更新の際もModel、View側どちらかが起因で更新難しいかの切り分けをしやすそうと思っている</p>\n<p>IDEの恩恵を得られにくいView側のヘルパー関数が非推奨になり更新したくてもできないという経験もあったりした</p>\n<p>Viewの観点でいうとViewの役割果たさなくてもよいというのもあるのでModelとControllerのみ扱うようにし、できるだけアプリケーションという単位で抑えて分離させないというのもアリ</p>\n<p>別アプリケーション切って同じようなModelを作成するというのがやりたくないことだったりする</p>\n<p>モノレポ構成を意識した下記のプロジェクトを作成した</p>\n<ul>\n<li><a href=\"https://github.com/igara/cakephp_debug_sample\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cakephp_debug_sample</a>\n<ul>\n<li><a href=\"https://github.com/igara/cakephp_debug_sample_projects_core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cakephp_debug_sample_projects_core</a></li>\n<li><a href=\"https://github.com/igara/cakephp_debug_sample_projects_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cakephp_debug_sample_projects_www</a></li>\n</ul>\n</li>\n</ul>\n<p>coreではModelやビジネスロジック等扱い、wwwではroutes, Controllerのみを使用するような想定で作成している</p>\n<p>composerの仕組み上の話になるが</p>\n<p><a href=\"https://github.com/igara/cakephp_debug_sample_projects_core/blob/d8beb44/composer.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">core側</a>で</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">core/composer.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"projects/core\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"library\"</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><a href=\"https://github.com/igara/cakephp_debug_sample_projects_www/blob/4287f51/composer.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">読み込み側</a>で</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">www/composer.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    ...\n    <span class=\"token property\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../cakephp_debug_sample_projects_core\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"symlink\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ...\n        <span class=\"token property\">\"projects/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dev-main\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>とライブラリの設定をし</p>\n<p><a href=\"https://github.com/igara/cakephp_debug_sample_projects_www/blob/4287f51/src/Controller/PagesController.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www/src/Controller/PagesController.php</a></p>\n<p>のような感覚でwww側のリソースでもcore側によるModelの処理を読み込んでいる</p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>一例として記載したもののこの際、www経由にcoreを読み込まれているがCakePHPのライブラリはwww側のものを使用されているので注意</p>\n<p>npmを見習いたい</p>\n<p>ライブラリ化として分離しやすいものを選択する必要性も一定あると思っている</p>\n<p>これに対する解決策受け付け中<br>\n（CakePHP自身のnamespaceを変えるとかあるにはあるが...）</p>\n<p>言語側でバージョンが変わっても同様に使えるかどうかの考慮も一定必要</p>\n</div></aside>\n<h3 id=\"%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\"><a class=\"header-anchor-link\" href=\"#%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\" aria-hidden=\"true\"></a> デザインガイドライン・デザインシステム</h3>\n<p><a href=\"https://zenn.dev/igara/articles/monorepo_nextjs#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_design_system\" target=\"_blank\">過去記事</a>でも触れてるやつ</p>\n<p>ちょっとしたUI調整のときのみに動かしたいCIタスクが多くあるのでモノリスだとあまりやりたがらない部分だったりする</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E8%A8%AD%E5%AE%9A\"><a class=\"header-anchor-link\" href=\"#%E5%85%B1%E9%80%9A%E8%A8%AD%E5%AE%9A\" aria-hidden=\"true\"></a> 共通設定</h3>\n<h4 id=\"ide%E3%83%BB%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\"><a class=\"header-anchor-link\" href=\"#ide%E3%83%BB%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\" aria-hidden=\"true\"></a> IDE・エディター</h4>\n<p><a href=\"https://zenn.dev/igara/articles/monorepo_nextjs#vscode%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E5%85%B1%E6%9C%89%E5%8C%96\" target=\"_blank\">過去記事</a>でも触れてるやつ</p>\n<p>宗教的なものだが一定のコーディングの統一化をすべてのプロジェクトに対して適応が可能なのでコンテキストを合わせやすくなりそう</p>\n<h4 id=\"%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88\"><a class=\"header-anchor-link\" href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88\" aria-hidden=\"true\"></a> ビルド・テスト</h4>\n<p><a href=\"https://zenn.dev/igara/articles/monorepo_nextjs#%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9Anextjs%E3%81%AE%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%82%8B\" target=\"_blank\">過去記事</a>でちょっとだけ触れてる</p>\n<p>パス指定による共通のビルド・テスト設定の読み込みが可能だとモノレポ間でも設定に困るということは少なくなる</p>\n\n</div>",
    "link": "/blogs/zenn/モノリス分離したいのでモノレポ化にする考察",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/61c8fd9403a25128b321ed9e144bcc8acbe347590ff26600cba76d4ecd2caa3a.png",
      "small": "/ogp/630x630/blogs/zenn/61c8fd9403a25128b321ed9e144bcc8acbe347590ff26600cba76d4ecd2caa3a.png"
    }
  },
  {
    "name": "2021-12-15 00-00-00 プライベートと現場",
    "publishedAt": "2021-12-15 00-00-00",
    "title": "プライベートと現場",
    "description": "    これは ランサーズ Advent Calendar 2021 16 日目の記事です。自分がどう技術と向き合っているのかというのをプライベートと現場のシチェーションを書きたい",
    "body": "<div class=\"markdown-body\">\n  <img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/0-img-tag.png\" alt=\"f:id:igara1119:20211213232216p:plain\" width=\"1200\" height=\"675\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\">\n\n  \n<p>これは <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2021/lancers\">ランサーズ Advent Calendar 2021</a> 16 日目の記事です。<br>自分がどう技術と向き合っているのかというのをプライベートと現場のシチェーションを書きたいと思います。  </p>\n<p>ここでいうプライベートは現在勤めている会社とは別で勉強したりちょっと遊びで触れるものを指し、現場は会社など仕事でのことを指します。<br>さらにどういったことに心がけているのかも記載したいと思います。  </p>\n<h2 id=\"自己紹介\">自己紹介</h2>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/1-img-tag.png\" alt=\"f:id:igara1119:20211214004222p:plain\" width=\"1200\" height=\"675\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\">\n\n  \n<p>入社して2年目<br>人生について<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara\">こちら</a>に記載。  </p>\n<p>久しぶりに人生を振り返ってみて高校生のときに将来やってみたいと思ったものを比較的実現できているなぁと思いました。  </p>\n<p>趣味と仕事の境目がないのが悩みだったりします。  </p>\n<p>開発するWebサービス・アプリケーションの対象が会社じゃなくて個人と開発の対象が違うだけでほぼほぼ仕事が趣味みたいなもんです。  </p>\n<p>開発以外の趣味もありますけど、、、  </p>\n<h2 id=\"現場との向き合い\">現場との向き合い</h2>\n<p>「秘伝のタレ」と「スパイス」をどう扱うのが良いのかというのばかり考えてます。  </p>\n<p>既存の歴史や様々な積み重ねの仕様など「秘伝のタレ」、  </p>\n<p>「スパイス」は新しい仕組みや機能と例えています。<br>開発で「秘伝のタレ」というとカーゴカルトプログラミング、ナレッジの共有が不完全な属人化の象徴、意味もなく脳死で長年継ぎ足して運用している単一障害点など良いイメージがありませんが反面、長く運用し続けられているという事実もあるので一方的に悪口を言うつもりはありません。<br>いい意味合いでのタレの更新ができるかというのはセンスが必要だよなぁと思ってます。  </p>\n<p>例えば良いタレの更新というと  </p>\n<p>今まで実装によって実現していたのがライブラリの更新により実装のコードがなくなったりするのは良いですね。  </p>\n<p>（詳細はライブラリのリファレンスみてくださいと投げ出すとかは最高）  </p>\n<p>一掃する系の更新とか無事完了すれば良いですけど影響範囲とかわかりにくいものだったりすると作業しててメンタル持ってかれますよね。<br>「スパイス」は正直多くは腐らせてます。  </p>\n<p>自分で実装しててベストじゃねぇんだよな思いつつリリースすることもあります。  </p>\n<p>一度実装したものは後で修正することが少ないので「秘伝のタレ」ではない別のベースとなる「ソース」で作ってしまいたいと思うことがあります。  </p>\n<p>とはいえ自分が作成したタレなので気づいたらメンテしないととも思いつつやはり「ソース」がいいんだよなというモヤッとしたりするものの、、、<br>「秘伝のタレ」と「スパイス」はある意味で表裏一体なのかもしれません。<br>最近だと <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sass/node-sass\">node-sass</a> から <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sass/sass\">dart-sass</a> にしたりもろもろやったけどどこか周回遅れを感じてやまない。<br>各週1に社内でフロントエンド会議というのをやってますがあれは良いモチベーションの維持になってます。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/2-img-tag.png\" alt=\"f:id:igara1119:20211215025243p:plain\" width=\"1200\" height=\"761\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<h2 id=\"プライベートとの向き合い\">プライベートとの向き合い</h2>\n<p>最近だと <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://zenn.dev/igara/articles/monorepo_nextjs\">(仮) NextJS モノレポ運用</a> でも書いてあったとおり個人サイトのリニューアルとかやってたりします。  </p>\n<p>あの記事の内容のを会社にもコミットできたらいいよなと優先度高めに対応してたりします。  </p>\n<p>これが例の「ソース」なのか<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://zenn.dev/igara/articles/monorepo_nextjs\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/iframe-e622a0f9c108cf09f9973569d3ca8e5e630ce98766d40f5856ec47f63d6f0205.png\" alt=\"(仮) NextJS モノレポ運用\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://zenn.dev/igara/articles/monorepo_nextjs\">zenn.dev</a></p>\n<p>この対応の前は全然業務に関係なさそうな <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chrome.google.com/webstore/detail/meetchromeextention/jhcdeimoegealgbdlanjbmkigbfhbnoi\">Google Meetの拡張ツール</a>つくったり、<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://zenn.dev/igara/articles/bot_slack_matome_channnel\">分報をまとめるBot</a>作成したりしてました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chrome.google.com/webstore/detail/meetchromeextention/jhcdeimoegealgbdlanjbmkigbfhbnoi\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/iframe-2cd19c2b6b63c898de656186681dc81c415fdb08586d1bc1d24fc197913c40a1.png\" alt=\"meet_chrome_extention\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chrome.google.com/webstore/detail/meetchromeextention/jhcdeimoegealgbdlanjbmkigbfhbnoi\">chrome.google.com</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://zenn.dev/igara/articles/bot_slack_matome_channnel\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/iframe-8b31009aee6bc193d47ce009d7508fa3c935385249ac3281495383083d288332.png\" alt=\"Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://zenn.dev/igara/articles/bot_slack_matome_channnel\">zenn.dev</a></p>\n<p>プライベートではあまり業務に関係ないようなのを好んでやることが多いです。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/3-img-tag.jpg\" alt=\"f:id:igara1119:20211215031954j:plain\" width=\"292\" height=\"277\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p>遊んでばかりいるから本業とは違うC#、Objective-Cのコミットが多くなってるというのは最早ネタですね。<br>最近別で挑んでみたいのはVSCodeのExtension作成です。  </p>\n<p>みんなエディター使うのにここらへんに手出すのって少なくないですか？  </p>\n<p>自分自身がそうなんですけど  </p>\n<h2 id=\"心がけていること\">心がけていること</h2>\n<h3 id=\"webから逃げるな\">Webから逃げるな</h3>\n<p>開発者として既にスマホネイティブアプリ開発とかから逃げたり他分野いろいろ逃げてますが、気持ちとしてはWebというものを作る際にどう作るのかというのを考えてます。<br>きたるWeb3.0たるものがあるわけで逃げたい気持ちもありますが無視せず取り合っていきましょうといった考え方です。  </p>\n<p>前は LAMPスタック でひと通りできるというのがあった気がするんですけど、より専門にさらに分業化などがすすんでそこまでスタックを問われることが少なくなりました。<br>別に専門に逃げたなとか言いたいわけではありませんが、個人的なプライドあります。  </p>\n<h3 id=\"トップメタはなんなのか\">トップメタはなんなのか</h3>\n<p>開発というよりかはゲーム攻略からの発想です。  </p>\n<p>会社に限定せず社会的に全環境でぶっ刺さるものがなんなのかをみようとはしているものの  </p>\n<p>全統一なものはないので今のトップメタに近いものってなんなんだろうと常々思ってます。<br>各分野のメタはいっぱいあるはずなんでこれがメタなんだという認知をしたいです。  </p>\n<h3 id=\"標準に寄り添うこと\">標準に寄り添うこと</h3>\n<p>トップメタが何なのかわからなくなった際に考えることです。  </p>\n<p>ここでいう標準はサポートが多いものや IDE、静的解析に優しいものだったりします。<br>ちょっと標準と異なるから専用のプラグインやVSCodeのExtensionで補えていればいいのですが、  </p>\n<p>補えていない場合自分たちで拡張を作るというのは選択肢としてあまりない気がします。  </p>\n<h3 id=\"マクロ的なものは積極的に得ること\">マクロ的なものは積極的に得ること</h3>\n<p>バッチ、シェル、VBA、ブックマークレット、Google Apps Script、最早それアプリという気もしますが  </p>\n<p>Chrome Extension、Electronなど自分で勝手に便利ツール化できそうなのは積極的に取り入れてたりします。  </p>\n<h2 id=\"終\">終</h2>\n<p>以上、講釈でした。<br>アドベントカレンダー、明日は <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/shirasud\">@shirasud</a> さんです。\nよろしくおねがいします。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2021-12-15 00-00-00 プライベートと現場/4-img-tag.png\" alt=\"f:id:igara1119:20211213233050p:plain\" width=\"1200\" height=\"675\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n\n</div>",
    "link": "/blogs/hatena/プライベートと現場",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/cde7a55bde0b87a61f09d1cc553c65f1cc5dcd37e6e5661d4c4b55aab44fa656.png",
      "small": "/ogp/630x630/blogs/hatena/cde7a55bde0b87a61f09d1cc553c65f1cc5dcd37e6e5661d4c4b55aab44fa656.png"
    }
  },
  {
    "name": "monorepo_nextjs",
    "title": "(仮) NextJS モノレポ運用",
    "publishedAt": "2021-12-03 03-05-29",
    "description": "これは [ランサーズ Advent Calendar 2021](https://qiita.com/advent-calendar/2021/lancers) 4 日目の記事です",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22(%E4%BB%AE)-nextjs-%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E9%81%8B%E7%94%A8%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22nextjs%22%2C-%22serverless%22%2C-%22monorepo%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22(%E4%BB%AE)-nextjs-%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E9%81%8B%E7%94%A8%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22nextjs%22%2C-%22serverless%22%2C-%22monorepo%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;(仮) NextJS モノレポ運用&quot;<br>\nemoji: &quot;💬&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;nextjs&quot;, &quot;serverless&quot;, &quot;monorepo&quot;]<br>\npublished: true</h2>\n<p>これは <a href=\"https://qiita.com/advent-calendar/2021/lancers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ランサーズ Advent Calendar 2021</a> 4 日目の記事です。</p>\n<p>個人の開発では1レポジトリで完結するようなプロジェクトをよく作成します。</p>\n<p>ただし実際の事業はスケールしたり、プロジェクトの中でも他のプロジェクトにも共有したいリソースというのは出るものなので初期段階でもしっかりとした基盤を事前に用意したいと思ったので作成しました。</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><a class=\"header-anchor-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\" aria-hidden=\"true\"></a> プロジェクト構成</h2>\n<ul>\n<li>ルートプロジェクト: <a href=\"https://github.com/igara/syonet_eight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight</a>\n<ul>\n<li>サブプロジェクト(<a href=\"https://github.com/igara/syonet_eight/tree/master/projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a>)\n<ul>\n<li><a href=\"https://github.com/igara/syonet_eight_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_www</a></li>\n<li><a href=\"https://github.com/igara/syonet_eight_design_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_design_system</a></li>\n<li><a href=\"https://github.com/igara/syonet_eight/tree/master/projects/syonet_eight_storybook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_storybook</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上記のようなルートプロジェクトにサブプロジェクトを <code>git submodule</code> で分割して管理しているような構成にしてます。<br>\n基本はGitなので対象のサブプロジェクト同士で異なるブランチでの検証も可能だったりします。<br>\n一部 <code>git submodule</code>管理されていないサブプロジェクトもありますが。</p>\n<p>次にそれぞれのプロジェクトの説明に入ります。</p>\n<h3 id=\"%E3%83%AB%E3%83%BC%E3%83%88%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight\"><a class=\"header-anchor-link\" href=\"#%E3%83%AB%E3%83%BC%E3%83%88%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight\" aria-hidden=\"true\"></a> ルートプロジェクト: <a href=\"https://github.com/igara/syonet_eight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight</a></h3>\n<p>サブプロジェクトよりも上の階層にある大元のプロジェクトになります。</p>\n<h4 id=\"yarn-workspace\"><a class=\"header-anchor-link\" href=\"#yarn-workspace\" aria-hidden=\"true\"></a> yarn workspace</h4>\n<p>NodeJSのライブラリをルートプロジェクトに集中管理し、 <code>yarn workspace</code> によるモノレポな環境にしています。<br>\nルートプロジェクトにライブラリ管理を集中化させてしまってますが、サブプロジェクト側のpackage.jsonにバージョンの異なるライブラリを管理させたり、部分的に使用したいライブラリの管理ができるようになっているんじゃないかなと思います。</p>\n<p><code>npm scripts</code> などもルートプロジェクトで管理するようにしてますので基本、CLIのカレントはルートプロジェクトのままで作業することになります。</p>\n<h4 id=\"vscode%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E5%85%B1%E6%9C%89%E5%8C%96\"><a class=\"header-anchor-link\" href=\"#vscode%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E5%85%B1%E6%9C%89%E5%8C%96\" aria-hidden=\"true\"></a> VSCodeの設定の共有化</h4>\n<p><a href=\"https://github.com/igara/syonet_eight/tree/master/.vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.vscode</a>をルートプロジェクトに置くことでサブプロジェクトでも自動にVSCodeの設定が適応されます。</p>\n<p>以下設置しているファイルを箇条書きで説明します。</p>\n<ul>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/extensions.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">extensions.json</a><br>\n使用するVSCode拡張の共有<br>\nVSCodeを開いたときに推奨の拡張とかサジェストの表記がされるようになると思います。</li>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/launch.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">launch.json</a><br>\nデバッグの設定を記載<br>\nプロジェクトごとのリモートデバッグによるポートの専有とか防げるんじゃないでしょうか。</li>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/settings.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">settings.json</a><br>\nエディターの設定<br>\nESLintの有効化や保存時のフォーマッタ設定<br>\nその他モラル的な基本設定とか入れればいいんじゃないでしょうか。</li>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/sytled-jsx.code-snippets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xxxxx.code-snippets</a><br>\nプロジェクトまたがってコピペ的に使いたいの記載すればいいんじゃないでしょうか。</li>\n</ul>\n<h4 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%BE%E3%81%9F%E3%81%8C%E3%81%A3%E3%81%9Fstorybook%E3%81%AE%E5%B1%95%E9%96%8B\"><a class=\"header-anchor-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%BE%E3%81%9F%E3%81%8C%E3%81%A3%E3%81%9Fstorybook%E3%81%AE%E5%B1%95%E9%96%8B\" aria-hidden=\"true\"></a> プロジェクトをまたがった<a href=\"https://storybook.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Storybook</a>の展開</h4>\n<p>設定について<a href=\"https://github.com/igara/syonet_eight/tree/master/.storybook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちら</a>になります。</p>\n<p><code>yarn storybook</code> によりコンポーネントのカタログのようなものを閲覧できます。</p>\n<p>サブプロジェクトにある <code>xxx.stories.mdx</code> を元に作成されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/storybook_props.jpg\" alt=\"storybook_props\"></p>\n<p>軽くコンポーネントのPropsの検証ができたり</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/storybook_accessibility.jpg\" alt=\"storybook_accessibility\"></p>\n<p>使用しているタグなど実装に関してのアクセシビリティが適切そうかチェックしたり</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/storybook_performance.jpg\" alt=\"storybook_performance\"></p>\n<p>レンダリングのパフォーマンス確認などできるようにしています</p>\n<h4 id=\"ci%E3%81%AE%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AEut%E5%AE%9F%E8%A1%8C\"><a class=\"header-anchor-link\" href=\"#ci%E3%81%AE%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AEut%E5%AE%9F%E8%A1%8C\" aria-hidden=\"true\"></a> CIのスケジュールによる全プロジェクトのUT実行</h4>\n<p>設定について<a href=\"https://github.com/igara/syonet_eight/blob/master/.github/workflows/root.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちら</a></p>\n<p>それぞれのサブプロジェクトの最新のmasterブランチを持ってきてlint, jestによるテスト実行をするようにしてます。</p>\n<p>サブプロジェクト側でも個別にGitHub Actionsによるワークフローを記載しているのでそれぞれのレポジトリのプッシュでもテスト実行するようにしています。</p>\n<h3 id=\"%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_www\"><a class=\"header-anchor-link\" href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_www\" aria-hidden=\"true\"></a> サブプロジェクト: <a href=\"https://github.com/igara/syonet_eight_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_www</a></h3>\n<p>NextJSによるプロジェクトになります。</p>\n<h4 id=\"serverless-next.js-component%E3%81%AB%E3%82%88%E3%82%8B%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"><a class=\"header-anchor-link\" href=\"#serverless-next.js-component%E3%81%AB%E3%82%88%E3%82%8B%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\" aria-hidden=\"true\"></a> <a href=\"https://www.serverless.com/plugins/serverless-nextjs-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serverless Next.js Component</a>によるデプロイ</h4>\n<p>NextJSの本家<a href=\"https://vercel.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vercel</a> でもいいんですけどAWSにデプロイ可能な<a href=\"https://www.serverless.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serverless Framework</a>を採用しています。</p>\n<p>デプロイの仕組みの説明難しいですが <a href=\"https://github.com/igara/syonet_eight_www/blob/master/serverless.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serverless.yml</a> の情報がAWSのCloudFormationのテンプレートとして展開されてAWSのそれぞれのサービスをよしなに使って1つのWebサービスを作ってしまうというものです。</p>\n<p>下記の図はデプロイで反映するAWSのサービスのイメージになります。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/serverless_nextjs.drawio.png\" alt=\"serverless_nextjs\"></p>\n<p>それぞれのAWSのサービスが外部のユーザから見てどう使われているのかのイメージを記載すると</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/serverless_service.drawio.png\" alt=\"serverless_service\"></p>\n<p>なのをServerless Next.js Componentで再現できちゃうらしいです。<br>\nSPA想定だったReactの資産をフル活用できますね。</p>\n<h3 id=\"%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_design_system\"><a class=\"header-anchor-link\" href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_design_system\" aria-hidden=\"true\"></a> サブプロジェクト: <a href=\"https://github.com/igara/syonet_eight_design_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_design_system</a></h3>\n<p>共通のデザインなどをまとめるプロジェクトです。</p>\n<h4 id=\"%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%8C%96\"><a class=\"header-anchor-link\" href=\"#%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%8C%96\" aria-hidden=\"true\"></a> 共通コンポーネントをライブラリ化</h4>\n<p><code>yarn build:design_system</code> を実行することでライブラリ化します。</p>\n<p>ルートプロジェクトの<a href=\"https://github.com/igara/syonet_eight/blob/master/package.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package.json</a>にある</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">&quot;syonet_eight_design_system&quot;: &quot;file:./projects/syonet_eight_design_system&quot;\n</code></pre></div><p>という指定により別のサブプロジェクトでも</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">import * as DesignSystem from 'syonet_eight_design_system';\n</code></pre></div><p>で共通のコンポーネントを使用することが可能です。</p>\n<h4 id=\"figma%E3%81%A7%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88\"><a class=\"header-anchor-link\" href=\"#figma%E3%81%A7%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88\" aria-hidden=\"true\"></a> Figmaで作成したパーツのインポート</h4>\n<p><code>yarn import:figma</code> でFigmaで作成したものをインポートするような仕組みを作ってます。</p>\n<p>実装したコードはこちらです</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2Fsrc%2Fscripts%2Ffigma.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/src/scripts/figma.ts\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/src/scripts/figma.ts</a></p>\n<p>SVG化して使うのは結構安易そうですが、DOMとして扱うのは難しめにみてます。<br>\n(だってあいつらNodeIDの順番とか位置関係ようわからんし)</p>\n<h4 id=\"%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9Anextjs%E3%81%AE%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%82%8B\"><a class=\"header-anchor-link\" href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9Anextjs%E3%81%AE%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%82%8B\" aria-hidden=\"true\"></a> ビルドの設定NextJSのをそのままつかってる</h4>\n<p><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/tsconfig.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tsconfig.json</a>とか<a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/.babelrc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.babelrc</a>の設定はNextJSで動かしていたものを使用してます。</p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>その弊害で<a href=\"https://github.com/igara/syonet_eight_design_system/tree/master/pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pages</a>ディレクトリがないとビルドに失敗してしまうので追加してます。<br>\nものすごくこのディレクトリ消したいんですよね</p>\n</div></aside>\n<h3 id=\"syonet_eight_www-%26-syonet_eight_design_system-%E5%85%B1%E9%80%9A%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF\"><a class=\"header-anchor-link\" href=\"#syonet_eight_www-%26-syonet_eight_design_system-%E5%85%B1%E9%80%9A%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/syonet_eight_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_www</a> &amp; <a href=\"https://github.com/igara/syonet_eight_design_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_design_system</a> 共通の取り組み</h3>\n<h4 id=\"%E3%83%93%E3%82%B8%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%AA%E3%82%B0%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E6%96%BD\"><a class=\"header-anchor-link\" href=\"#%E3%83%93%E3%82%B8%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%AA%E3%82%B0%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E6%96%BD\" aria-hidden=\"true\"></a> ビジュアルリグレッションテスト実施</h4>\n<p><a href=\"https://reg-viz.github.io/reg-suit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reg-suit</a>というGitのプッシュを実行した際にコンポーネントの差分をビジュアライズする仕組みを入れてます。</p>\n<p>例えばこんな差分があったときに</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fcommit%2Fbf6de6cbd274e239e73f4eb39391bd9b060cb74b\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/commit/bf6de6cbd274e239e73f4eb39391bd9b060cb74b\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/commit/bf6de6cbd274e239e73f4eb39391bd9b060cb74b</a></p>\n<p>差分としての検知として</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/reg_suit_top.jpg\" alt=\"reg_suit_top\"></p>\n<p>一覧が表示されて詳細をみようとすると</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/reg_suit_diff.gif\" alt=\"reg_suit_diff\"></p>\n<p>どのへんに差分があるのかというのをビジュアライズしてくれます。</p>\n<p>CIの設定としてこちらになります。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2F.github%2Fworkflows%2Fvrt.yml\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/.github/workflows/vrt.yml\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/.github/workflows/vrt.yml</a></p>\n<p>GitHub Actions上では日本語フォントがないので <code>fonts-noto</code> をインストールする必要があったりします。</p>\n<p>あとはこちらのテストの結果は現状Slackで通知がくることを確認しています。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/slack.png\" alt=\"slack\"></p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>GitHubのPRに対してテスト結果をコメントしてくれる機能もありますがこれに関しては正常に動作してません...</p>\n</div></aside>\n<h4 id=\"css-in-js%E3%81%A8%E3%81%97%E3%81%A6emotion%E6%8E%A1%E7%94%A8\"><a class=\"header-anchor-link\" href=\"#css-in-js%E3%81%A8%E3%81%97%E3%81%A6emotion%E6%8E%A1%E7%94%A8\" aria-hidden=\"true\"></a> CSS in JSとしてemotion採用</h4>\n<p>好みですが、</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">import { css } from '@emotion/react';\n</code></pre></div><p>で<a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modules</a>ぽくもpropsでCSSの値指定できるようないいとこ取りな書き方よくないっすか？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2Fsrc%2Fcomponents%2Ficons%2Fmenu_icon%2Fmenu_icon.styles.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.styles.ts\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.styles.ts</a><br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2Fsrc%2Fcomponents%2Ficons%2Fmenu_icon%2Fmenu_icon.tsx\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.tsx\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.tsx</a></p>\n<h3 id=\"%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_storybook\"><a class=\"header-anchor-link\" href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_storybook\" aria-hidden=\"true\"></a> サブプロジェクト: <a href=\"https://github.com/igara/syonet_eight/tree/master/projects/syonet_eight_storybook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_storybook</a></h3>\n<p>Storybookを配布するように<a href=\"https://github.com/igara/syonet_eight/blob/master/projects/syonet_eight_storybook/serverless.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serverless.yml</a>しか置いてないです。</p>\n<p>これもServerless Frameworkのコンポーネントをつかっており、<a href=\"https://github.com/serverless-components/website\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">website</a>というものを使っています。</p>\n<p>ただのSPAのサイトをホスティングしたい用途で使うのがちょうど良さそうです。</p>\n<h2 id=\"%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><a class=\"header-anchor-link\" href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\" aria-hidden=\"true\"></a> おわりに</h2>\n<p>以上自分なりのモノレポ運用についての記載でした。</p>\n<p>まだ実装そのものを着手してなく、APIのプロジェクトも作成していない状況なのでこれからすすめていきたいと思います。</p>\n<p>アドベントカレンダー、明日は <a href=\"https://qiita.com/yuta-ron\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@yuta-ron</a> さんです。<br>\nよろしくおねがいします。</p>\n\n</div>",
    "link": "/blogs/zenn/(仮) NextJS モノレポ運用",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/e622a0f9c108cf09f9973569d3ca8e5e630ce98766d40f5856ec47f63d6f0205.png",
      "small": "/ogp/630x630/blogs/zenn/e622a0f9c108cf09f9973569d3ca8e5e630ce98766d40f5856ec47f63d6f0205.png"
    }
  },
  {
    "name": "bot_slack_matome_channnel",
    "title": "Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた",
    "publishedAt": "2021-04-21 21-00-48",
    "description": "作ろうとした背景としてメンバー各位が書く分報チャンネルがあってチャンネル参加してなくても一括に確認できるようなものがあったらいいなと思っていたので作ってみた感じです。  Slack",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%921%E3%81%A4%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AB%E9%9B%86%E7%B4%84%E3%81%99%E3%82%8Bslack%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22slack%22%2C-%22gas%22%2C-%22googleappsscrip%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%921%E3%81%A4%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AB%E9%9B%86%E7%B4%84%E3%81%99%E3%82%8Bslack%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22slack%22%2C-%22gas%22%2C-%22googleappsscrip%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた&quot;<br>\nemoji: &quot;💬&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;slack&quot;, &quot;gas&quot;, &quot;googleappsscrip&quot;]<br>\npublished: true</h2>\n<p>作ろうとした背景としてメンバー各位が書く分報チャンネルがあってチャンネル参加してなくても一括に確認できるようなものがあったらいいなと思っていたので作ってみた感じです。</p>\n<p>Slackの分報を社内Twitterに！皆の分報を一つのチャネルに集約するSlackボットを作ってみた<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fzenn.dev%2Fryo_kawamata%2Farticles%2Ftimes-all-bot\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://zenn.dev/ryo_kawamata/articles/times-all-bot\" style=\"display: none\" target=\"_blank\">https://zenn.dev/ryo_kawamata/articles/times-all-bot</a><br style=\"display: none\">\nのパクリですがGAS版として投稿しています。</p>\n<h2 id=\"%E4%BD%9C%E6%88%90%E7%89%A9\"><a class=\"header-anchor-link\" href=\"#%E4%BD%9C%E6%88%90%E7%89%A9\" aria-hidden=\"true\"></a> 作成物</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fbot_slack_matome_channnel\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/bot_slack_matome_channnel\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/bot_slack_matome_channnel</a></p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_bot_message.gif\" alt=\"\"></p>\n<p>オプションで集約したくないチャンネルの場合は無視できるようなものを作成しました。</p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>GASなので利用回数の制限があるので注意です。<br>\n<a href=\"https://developers.google.com/apps-script/guides/services/quotas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.google.com/apps-script/guides/services/quotas</a></p>\n<p>2021/04/20時点では</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Consumer (e.g., gmail.com) and G Suite free edition(legacy)</th>\n<th>Google Workspace accounts</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Triggers total runtime</td>\n<td>90 min / day</td>\n<td>6 hr / day</td>\n</tr>\n<tr>\n<td>URL Fetch calls</td>\n<td>20,000 / day</td>\n<td>100,000 / day</td>\n</tr>\n</tbody>\n</table>\n<p>と記載されていますので規模感に合わせてGASじゃない実装にしたほうが良いというのもありそうです。<br>\nTriggerはSlackの情報をSpreadsheetにキャッシュさせるために使用したり、<br>\nURL FetchはSlackにメッセージを流すために使用していますので上記の上限できびしいなと思ったらこの記事を参考にしないほうがいいと思います。</p>\n</div></aside>\n<h2 id=\"%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\"><a class=\"header-anchor-link\" href=\"#%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-hidden=\"true\"></a> セットアップ</h2>\n<h3 id=\"slack%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEscope%E8%A8%AD%E5%AE%9A\"><a class=\"header-anchor-link\" href=\"#slack%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEscope%E8%A8%AD%E5%AE%9A\" aria-hidden=\"true\"></a> Slackアプリのscope設定</h3>\n<p><a href=\"https://api.slack.com/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://api.slack.com/apps</a> からアプリを作成し、<br>\n<strong>OAuth &amp; Permissions</strong> の画面から以下のscopeをBot Userに追加します。</p>\n<ul>\n<li>channels:history</li>\n<li>channels:read</li>\n<li>chat:write</li>\n<li>users.profile:read</li>\n<li>users:read</li>\n<li>users:read.email</li>\n</ul>\n<p>usersのscopeはSpreadsheetに情報を残した際にメールアドレスもGoogle Workspaceとの連携も楽そうという未来実装的に入れているものなので本題では不要なscopeだったりします。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_bot_scope.jpg\" alt=\"\"></p>\n<p>設定が完了したら <strong>OAuth &amp; Permissions</strong> の画面上部にある <strong>Bot User OAuth Token</strong> の値をコピーしましょう。</p>\n<h3 id=\"gas%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><a class=\"header-anchor-link\" href=\"#gas%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\" aria-hidden=\"true\"></a> GASのプロジェクトを作成</h3>\n<p>下記コマンドからソースを持ってきます。</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">git clone https://github.com/igara/bot_slack_matome_channnel.git\ncd bot_slack_matome_channnel\n</code></pre></div><p>環境変数の適応を行います。</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">cp .env.sample.ts .env.ts\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Slackのチーム名</span>\n  <span class=\"token constant\">SLACK_TEAM</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// OAuth &amp; Permissionsのページに記載されてたBot User OAuth Token</span>\n  <span class=\"token constant\">SLACK_ACCESS_TOKEN</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xoxb-xxxxx-xxxxx-xxxxx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// メッセージを送りたい対象のチャンネル名</span>\n  <span class=\"token constant\">BOT_SLACK_MATOME_CHANNEL_NAME</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bot_slack_matome_channnel\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 集約したい対象のチャンネル名の正規表現 下記は分報チャンネル想定</span>\n  <span class=\"token constant\">TARGET_CHANNEL_REGEXES</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^t_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^time_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// TARGET_CHANNEL_REGEXESの中から除外したいチャンネルの正規表現</span>\n  <span class=\"token constant\">IGNORE_TARGET_CHANNEL_REGEXES</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^t_ignore_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^time_ignore_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>下記のコマンドからSpreadsheet &amp; GASを作成します</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">npm install\n\n# login\nnpx clasp login\n\n# new create spreadsheet &amp; script project &amp; .clasp.json\nnpm run new name=hoge\n\n# build\nnpm run build\n# push\nnpx clasp push\n</code></pre></div><p>上記を実行するとSpreadsheetが作成され、その中にあるスクリプトエディターを開くとGASも追加されているかと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/create_spreadsheet.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/create_gas.jpg\" alt=\"\"></p>\n<h3 id=\"spreadsheet%E3%81%ABslack%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\"><a class=\"header-anchor-link\" href=\"#spreadsheet%E3%81%ABslack%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\" aria-hidden=\"true\"></a> SpreadsheetにSlackの情報を読み込む</h3>\n<p>スクリプトエディターから下記の関数を実行してSlackの情報をSpreadsheetに残します。</p>\n<ul>\n<li><strong>create_sheets.ts.gs</strong> の <strong>createSheets</strong> を実行して必要なシートを作成</li>\n<li><strong>get_channels.ts.gs</strong> の <strong>getChannels</strong> を実行してシートにチャンネルの情報を残す</li>\n<li><strong>get_users.ts.gs</strong> の <strong>getUsers</strong> を実行してシートにユーザの情報を残す</li>\n</ul>\n<p>スクリプトエディターを経由しないで実行する方法として</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fqiita.com%2Fjiroshin%2Fitems%2Fdcc398285c652554e66a%23%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%258B%25E3%2582%2589gas%25E3%2582%2592%25E5%258F%25A9%25E3%2581%258F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://qiita.com/jiroshin/items/dcc398285c652554e66a#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%8B%E3%82%89gas%E3%82%92%E5%8F%A9%E3%81%8F\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/jiroshin/items/dcc398285c652554e66a#ローカルからgasを叩く</a></p>\n<p>にあるようなGoogle Cloud Consoleと自前で作成したClaspのログインができていれば</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">npx clasp run createSheets\nnpx clasp run getChannels\nnpx clasp run getUsers\n</code></pre></div><p>というようなコマンドで実行が可能です。<br>\nその際のGoogleアプリのスコープ設定はこちらの設定がされていればよいはず<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fbot_slack_matome_channnel%2Fblob%2Fmaster%2Fdist%2Fappsscript.json%23L14-L29\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/dist/appsscript.json#L14-L29\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/bot_slack_matome_channnel/blob/master/dist/appsscript.json#L14-L29</a></p>\n<h3 id=\"web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><a class=\"header-anchor-link\" href=\"#web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\" aria-hidden=\"true\"></a> Webアプリケーション公開する</h3>\n<p>スクリプトエディターのメニューから 公開 -&gt; ウェブアプリケーションとして導入から更新を実行し、</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/update_gas_web_appllication.jpg\" alt=\"\"></p>\n<p>公開したWebアプリケーションのURLをコピーします。</p>\n<h3 id=\"slack%E3%81%AEevent-subscriptions%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\"><a class=\"header-anchor-link\" href=\"#slack%E3%81%AEevent-subscriptions%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\" aria-hidden=\"true\"></a> SlackのEvent Subscriptionsを登録する</h3>\n<p><strong>Request URL</strong> に公開したGASのWebアプリケーションのURLを貼り、<strong>Verified</strong> が表示されるか確認します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_event_request_url.jpg\" alt=\"\"></p>\n<p>確認できたら、 <strong>Subscribe to bot events</strong> の項目で</p>\n<ul>\n<li>message.channels</li>\n</ul>\n<p>を登録してください。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_event_bot.jpg\" alt=\"\"></p>\n<p>以上で設定は完了です。<br>\nSlackで対象のチャンネルを作成してメッセージを投稿してみてボットのメッセージが送られるようになっていたら成功です。</p>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E9%9B%91%E3%81%AB%E8%AA%AC%E6%98%8E\"><a class=\"header-anchor-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E9%9B%91%E3%81%AB%E8%AA%AC%E6%98%8E\" aria-hidden=\"true\"></a> ソースコード雑に説明</h2>\n<h3 id=\"src%2Ftasks%2Fcreate_clasp_json.ts\"><a class=\"header-anchor-link\" href=\"#src%2Ftasks%2Fcreate_clasp_json.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/tasks/create_clasp_json.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/tasks/create_clasp_json.ts</a></h3>\n<p><a href=\"https://github.com/google/clasp#create\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/google/clasp#create</a> に該当するもの<br>\nSpreadsheetとスクリプトエディターの名前を一緒にしたかったから自作したようなもの</p>\n<h3 id=\"src%2Fgas%2Fcreate_sheets.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fcreate_sheets.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/create_sheets.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/create_sheets.ts</a></h3>\n<p>GASとして使用する関数<br>\nGAS経由にシートを作成する</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\">Spreadshhet<span class=\"token punctuation\">.</span><span class=\"token function\">deleteSheet</span><span class=\"token punctuation\">(</span>Spreadshhet<span class=\"token punctuation\">.</span><span class=\"token function\">getSheetByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> channelsSheetColumnNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ChannelsSheet <span class=\"token operator\">=</span> Spreadshhet<span class=\"token punctuation\">.</span><span class=\"token function\">insertSheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nChannelsSheet<span class=\"token punctuation\">.</span><span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> channelsSheetColumnNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>channelsSheetColumnNames<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>な削除して再度シート作成するような作りになっている</p>\n<p>過去に作ったGoogle API経由でCSVを元にシートを作成するのもありっちゃあり<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fspreadsheet_master%2Fblob%2Fmaster%2Fsrc%2Ftasks%2Frecreate_spreadsheet.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/spreadsheet_master/blob/master/src/tasks/recreate_spreadsheet.ts\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/spreadsheet_master/blob/master/src/tasks/recreate_spreadsheet.ts</a></p>\n<p>ローカルPCで実行するよりGASの環境で実行したい気持ちが今回強かった</p>\n<h3 id=\"src%2Fgas%2Fdo_post.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fdo_post.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/do_post.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/do_post.ts</a></h3>\n<p>SlackのEvent Subscriptions経由できたメッセージがリクエストされて処理を実行するGASの関数</p>\n<p>今回設定したEvent Subscriptionsがメッセージに対する更新系もプッシュされていたので除外するために書いた処理がこちら</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fbot_slack_matome_channnel%2Fblob%2Fmaster%2Fsrc%2Fgas%2Fdo_post.ts%23L9-L23\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/do_post.ts#L9-L23\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/do_post.ts#L9-L23</a></p>\n<p>必要に応じて除外しているものを活用してみるのも良さそう<br>\nなおGASの利用枠</p>\n<h3 id=\"src%2Fgas%2Fget_channels.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fget_channels.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/get_channels.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/get_channels.ts</a></h3>\n<p>GASとして使用する関数<br>\nSlack APIを叩いてすべてのチャンネルを取得する<br>\nスクリプトエディターで定期実行するトリガーを設定できるのでこの関数を時間実行できると良いかも</p>\n<p>トリガーの設定もコード化したい場合は下記のコードを参考にすればいけるんですかね？（試してない<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdevelopers.google.com%2Fapps-script%2Fguides%2Ftriggers%2Finstallable%23managing_triggers_programmatically\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://developers.google.com/apps-script/guides/triggers/installable#managing_triggers_programmatically\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.google.com/apps-script/guides/triggers/installable#managing_triggers_programmatically</a></p>\n<h3 id=\"src%2Fgas%2Fget_users.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fget_users.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/get_users.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/get_users.ts</a></h3>\n<p>GASとして使用する関数<br>\nSlack APIを叩いてすべてのユーザを取得する</p>\n<h3 id=\"src%2Futils%2Ftasks%2Fclasp_json.ts\"><a class=\"header-anchor-link\" href=\"#src%2Futils%2Ftasks%2Fclasp_json.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/utils/tasks/clasp_json.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/utils/tasks/clasp_json.ts</a></h3>\n<p>JSONファイルでも型定義したい思いが強くてtsファイル経由で読み込もうとしている</p>\n<h3 id=\"src%2Futils%2Ftasks%2Fclasprc_json.ts\"><a class=\"header-anchor-link\" href=\"#src%2Futils%2Ftasks%2Fclasprc_json.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/utils/tasks/clasprc_json.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/utils/tasks/clasprc_json.ts</a></h3>\n<p>JSONファイルでも型定義したい思いが強くてtsファイル経由で読み込もうとしている</p>\n<h3 id=\"src%2Futils%2Ftasks%2Fgoogle.ts\"><a class=\"header-anchor-link\" href=\"#src%2Futils%2Ftasks%2Fgoogle.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/utils/tasks/google.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/utils/tasks/google.ts</a></h3>\n<p>Google API クライアント扱う</p>\n\n</div>",
    "link": "/blogs/zenn/Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/8b31009aee6bc193d47ce009d7508fa3c935385249ac3281495383083d288332.png",
      "small": "/ogp/630x630/blogs/zenn/8b31009aee6bc193d47ce009d7508fa3c935385249ac3281495383083d288332.png"
    }
  },
  {
    "name": "2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る",
    "publishedAt": "2020-12-08 00-00-00",
    "title": "2020年の t_igarashi_sho を振り返る",
    "description": "  この記事は Lancers（ランサーズ） Advent Calendar 2020の9日目の記事になります。qiita.comまえがきピックアップしたもの  - チャタるSla",
    "body": "<div class=\"markdown-body\">\n  <p>この記事は <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2020/lancers\">Lancers（ランサーズ） Advent Calendar 2020</a>の9日目の記事になります。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2020/lancers\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-5c7f1fc6a836f63edb4ce4712fa4829bb1812c4aa77216cc71b397f61cbd4db5.png\" alt=\"                                                                                                                                                        Lancers（ランサーズ） Advent Calendar 2020 - Qiita\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2020/lancers\">qiita.com</a></p>\n<ul>\n<li><p><a href=\"#まえがき\">まえがき</a></p>\n</li>\n<li><p><a href=\"#ピックアップしたもの\">ピックアップしたもの</a>  - <a href=\"#チャタる\">チャタる</a></p>\n<ul>\n<li><p><a href=\"#Slackのアイコンを自分の顔にした\">Slackのアイコンを自分の顔にした</a></p>\n</li>\n<li><p><a href=\"#スプレッドシートをスプシ言うかスプレと言うか\">スプレッドシートをスプシ言うかスプレと言うか</a></p>\n</li>\n<li><p><a href=\"#Wayする動詞\">Wayする【動詞】</a></p>\n</li>\n<li><p><a href=\"#テスト環境で使えるクレジットカード番号\">テスト環境で使えるクレジットカード番号</a></p>\n</li>\n<li><p><a href=\"#VSCode系\">VSCode系</a>    - <a href=\"#CakePHPのテンプレートとjQueryとインテリセンス\">CakePHPのテンプレートとjQueryとインテリセンス</a></p>\n<ul>\n<li><a href=\"#Save-and-Run-で自動でテストと整形するようにする\">Save and Run で自動でテストと整形するようにする</a></li>\n</ul>\n</li>\n<li><p><a href=\"#みんなのClipyを晒す会\">みんなのClipyを晒す会</a>    - <a href=\"#GitHubのコメントをスニペット化\">GitHubのコメントをスニペット化</a></p>\n<ul>\n<li><a href=\"#業務効率系のスクリプトをスニペット化\">業務効率系のスクリプトをスニペット化</a></li>\n</ul>\n</li>\n<li><p><a href=\"#SlackBot開発\">SlackBot開発</a>    - <a href=\"#Botがチャンネルをハシゴしてコメント投稿する機能\">Botがチャンネルをハシゴしてコメント投稿する機能</a></p>\n</li>\n<li><p><a href=\"#CakePHPのユニットテストのFixtureの定義議論\">CakePHPのユニットテストのFixtureの定義議論</a></p>\n</li>\n<li><p><a href=\"#リグレッションツール導入したい\">リグレッションツール導入したい</a></p>\n</li>\n<li><p><a href=\"#リモート手当てのようなもの取り入れたい\">リモート手当てのようなもの取り入れたい</a></p>\n</li>\n<li><p><a href=\"#ライブラリのセキュリティ的なアップデート検知できるものを導入したい\">ライブラリのセキュリティ的なアップデート検知できるものを導入したい</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#さいごに\">さいごに</a></p>\n<h3 id=\"まえがき\">まえがき</h3>\n</li>\n</ul>\n<p>入社して3ヶ月になりました。五十嵐です。<br>この記事は、Slackにある自身の分報チャンネルを振り返ってみてどんなことあったのかとかやりたいこと、共通の話題にできそうなものをピックアップしてみる記事です。<br>世間的にフルリモート推奨される事態になり、雑談をすることが減ったこともあって、今年は雑談として分報を活用することが多かったなと思います。  </p>\n<p>業務のわからないとこなどを雑にプッシュすることもありますが、雑談と業務の話の割合は1対1ぐらいなんじゃないかなと思います。\nあと分報以外では、時間をあわして対応したいときなどには Slack Call などのテレビ電話で会話ベースで作業を進めることもあります。<br>下記にピックアップしたものを記載しますが、多くなると思いますのでメモ書きベースな感じで書いていきたいと思います。<br><strong>どんな気持ちでこの記事を見れば良いのかというとリモート作業でも弊社はこんな雰囲気なんだという感じにみていただければ良いかなと思います。</strong>  </p>\n<h3 id=\"ピックアップしたもの\">ピックアップしたもの</h3>\n<h4 id=\"チャタる\">チャタる</h4>\n<p>MacBook支給されてキーボードの操作で不具合がなさそうだったので  </p>\n<p>「今回のMacBook Pro今のところチャタらないので多分あたり枠(13-inch, 2019」  </p>\n<p>と言ったときにチャタるとは？となった話です。  </p>\n<p>正しくはチャタリングのことで、MacBookのキーボード不具合について公式で修理を受け付けてますというページが去年ぐらいに出てたというのもあってなんとなく分報に流しました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://support.apple.com/ja-jp/keyboard-service-program-for-mac-notebooks\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-e57b6f9ab7f99251f173780a3628c9f1c8456df0323c6bc1bcdf5a79dc86598c.png\" alt=\"MacBook、MacBook Air、MacBook Pro キーボード修理プログラム - Apple サポート\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://support.apple.com/ja-jp/keyboard-service-program-for-mac-notebooks\">support.apple.com</a></p>\n<h4 id=\"slackのアイコンを自分の顔にした\">Slackのアイコンを自分の顔にした</h4>\n<p>顔をあわすことが少ないと思うので入社手続きで出社したときに撮った写真を顔だけ切り抜きしてアイコン化しました。<br>後にSlackの絵文字化もして、メンションされて個人のアピールしたいときにリアクションするために使うようになります。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/0-img-tag.gif\" alt=\"f:id:igara1119:20201208002821g:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p>この際に作成した動く画像をGoogleアカウントのプロフィール画像にも登録したらカレンダーやスプレッドシート上でも動く顔が表示されるようになりました。  </p>\n<h4 id=\"スプレッドシートをスプシ言うかスプレと言うか\">スプレッドシートをスプシ言うかスプレと言うか</h4>\n<p>弊社ではスプシ派が多そうです。  </p>\n<p>僕はスプレ派でこれからもスプレと言い通すのでしょう。  </p>\n<h4 id=\"wayする【動詞】\">Wayする【動詞】</h4>\n<p>入社したときの資料の名前を見てやたら〜Wayと書いてあったので  </p>\n<p>「Wayする【動詞】 という語録が存在しそう」  </p>\n<p>と、ふと分報に記載したものです。<br>弊社限定かもしれませんがツールの使い方や社内規定のようなものをWayをつけてドキュメント化するようになっているようです。  </p>\n<p>例えばSlackの使い方が記載されているSlack Wayとかあります。  </p>\n<p>Wayと言うワードで共通認識化しようとする考え方は良いと思いました。<br>仕組みとしてないものやよしなに力（りょく）で対応しちゃっているタスクもまだあったりするのでWay化していくことが大事だなぁと思ってます。  </p>\n<h4 id=\"テスト環境で使えるクレジットカード番号\">テスト環境で使えるクレジットカード番号</h4>\n<p>支払いどうしたらいいのか聞いた時に教えていただいた記事です。  </p>\n<p>今でも結構見ます。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/mimoe/items/8f5d9ce46b72b7fecff5\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-5ede3821b02f9f9c489108c876ce68d5fdadff3f97ca02281fb5b7152fa7ccc3.png\" alt=\"テスト環境で使えるクレジットカード番号 - Qiita\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/mimoe/items/8f5d9ce46b72b7fecff5\">qiita.com</a></p>\n<h4 id=\"vscode系\">VSCode系</h4>\n<h5 id=\"cakephpのテンプレートとjqueryとインテリセンス\">CakePHPのテンプレートとjQueryとインテリセンス</h5>\n<p>PHP Intelephense (bmewburn.vscode-intelephense-client) 入れたらCakePHPのテンプレートでもjQueryの補完利くようになってこの拡張すごくない？と言う話をしました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-e37e877682c1c217fee3735c430b950590729efe0a888d26e3aff197a42b136f.png\" alt=\"PHP Intelephense - Visual Studio Marketplace\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client\">marketplace.visualstudio.com</a></p>\n<h5 id=\"save-and-run-で自動でテストと整形するようにする\">Save and Run で自動でテストと整形するようにする</h5>\n<p>今だとXdebugと併用してDockerコンテナ内のユニットテストをデバッグしながら実行可能な状態になっているので、サンプル用のPHPプロジェクトを作成して記事化したいなぁと思っています。すごい便利です。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://marketplace.visualstudio.com/items?itemName=wk-j.save-and-run\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-6f0ebf7a4189903fb1b94644b3c4a948842b0963885c15ba5af7ca25d6a89975.png\" alt=\"Save and Run - Visual Studio Marketplace\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://marketplace.visualstudio.com/items?itemName=wk-j.save-and-run\">marketplace.visualstudio.com</a></p>\n<h4 id=\"みんなのclipyを晒す会\">みんなのClipyを晒す会</h4>\n<h5 id=\"githubのコメントをスニペット化\">GitHubのコメントをスニペット化</h5>\n<p>approveする時や本番確認した時にPR対してのコメントをする機会があります。  </p>\n<p>定型文をクリップボードやどこからか引用して貼り付けるような仕組みを各々持ってたりしますよねと言うあるある話がありました。  </p>\n<h5 id=\"業務効率系のスクリプトをスニペット化\">業務効率系のスクリプトをスニペット化</h5>\n<p>晒していただいた方の例で  </p>\n<ul>\n<li>実行するビルドコマンド\nコンテナ内にアプリケーション毎の異なるフロントエンドのソースがあるのでパス情報を含めたワンラインで実行できるようなビルドコマンドなど</li>\n<li>システムフロー上で必要なデータを作成するためのSQL\n複数のテーブルに対してデータを作るようなもの\n画面操作で10分くらい時間かけていたものを10秒で終わらせるようになったとか\n各々の努力を感じました。  <h4 id=\"slackbot開発\">SlackBot開発</h4>\n</li>\n</ul>\n<p>業務外で対応していました。  </p>\n<h5 id=\"botがチャンネルをハシゴしてコメント投稿する機能\">Botがチャンネルをハシゴしてコメント投稿する機能</h5>\n<pre><code>@igarashi-bot say channel=#hoge_channel comment=リモート開始します。36.5\n</code></pre>\n<p>とコメントすれば対象のチャンネルにも投稿される仕組みを自分の分報チャンネルに入れてみました。<br>Slack経由でジョブカンに打刻する仕組みがあるのですがそれプラス、勤怠連絡する用のチャンネルがあるのでどっちも忘れないようにするために  </p>\n<pre><code>/jobcan_touch @igarashi-bot say channel=#hoge_channel comment=リモート開始します。36.5\n</code></pre>\n<p>とコメントすれば同時に対応するようにしました。  </p>\n<p>このコメントはClipyに保存しています。<br>GASで作成しているのでどのぐらい利用枠でいけるのか謎なのでまだ個人のみでしか使用していないですが、安定してそうならこれも記事にしたいです。  </p>\n<h4 id=\"cakephpのユニットテストのfixtureの定義議論\">CakePHPのユニットテストのFixtureの定義議論</h4>\n<p>Fixture側のfield定義とModelの定義がずれていたものがあり、Fixtureに手を入れなくても済むようにできないかと話し、Fixture側も更新しようという結論になりました。  </p>\n<p>（Fixtureの定義自体がテスト用に使用したいものの定義として別出ししているものなので）  </p>\n<p>将来的にはCakePHPにあるbakeでうまいことできないか検討しようという会話ができました。<br>本番反映するためのDDLなど別ファイルで保存してたりするのでユニットテスト環境でも併用できるようなスキーマ反映するものがあったら良さそうとも思いました。  </p>\n<p>（該当するのがridgepoleなんだよなぁと思いつつ...）<br>いろいろベストに近いものをこれからも考えていきたいと思います。  </p>\n<h4 id=\"リグレッションツール導入したい\">リグレッションツール導入したい</h4>\n<p>様々なフロントエンドのソースがあったりするのでちょっとしたCSSの変更があったときにも差分表示できるものを導入しようか検討しています。ツールとして BackstopJS のようなものを使用して画面検証しようかと考えております。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/garris/BackstopJS\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-d1457487a29331529673c634a4d53722de78166cc83c2544bc5a838e3d1d2e63.png\" alt=\"garris／BackstopJS\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/garris/BackstopJS\">github.com</a></p>\n<p>ツールのサンプルをGitHubに管理していますがどう運用まわすかが課題になっていて  </p>\n<ul>\n<li>誰がテスト対象の画面を追加していくか</li>\n<li>ページ上のイベントを実行した検証を追加するか</li>\n<li>CI上でWebサーバとHeadless Chrome起動できるような構成がないと検証できない</li>\n<li>CI運用した際に差分表示したファイルをどう設置して見えるようにするか\nなどなど  <h4 id=\"リモート手当てのようなもの取り入れたい\">リモート手当てのようなもの取り入れたい</h4>\n</li>\n</ul>\n<p>家で作業することが多くなったことにより光熱費がかかるようになった反面、飲食代かからなくなったという今までになかった生活面の話があったりしました。<br>月一にビデオ通話による全体会があるのですがそのときにも、リモート作業に対しての手当てを出そうという話が展開されており、iPadの貸し出しなどされるようになったというのがあります。  </p>\n<h4 id=\"ライブラリのセキュリティ的なアップデート検知できるものを導入したい\">ライブラリのセキュリティ的なアップデート検知できるものを導入したい</h4>\n<p>今のところ Dependabot を検討予定で考えており、複数あるフロントエンドのプロジェクトや既存のPHPライブラリに対して更新するべきタイミングを検知できればと思います。<br>まだ業務とは関係のない個人のプロジェクトで入れて検証したぐらいなので、次回の定例で入れるか会話をした上で実施しようかと思っているところです。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dependabot.com/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-08 00-00-00 2020年の t_igarashi_sho を振り返る/iframe-50c13b7188a6eb4a085739739942b8a55b0eca3fad52a5ca170bd35222a38bec.png\" alt=\"Dependabot\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dependabot.com/\">dependabot.com</a></p>\n<h3 id=\"さいごに\">さいごに</h3>\n<p>分報で言ってたことをただ箇条書きにしたような記事ですみませんでした。  </p>\n<p>改めて振り返ってみるとちょっとした雑談のものが課題点だったり、  </p>\n<p>分報の発言から個人としてできる会社に貢献できそうなミッションを出すきっかけにもなっているので今後も引き続き分報を続けていきたいと思います。<br>以上でこの記事は終わりになります。<br>次回 10日目 金澤さんのランサーズのリモートワーク化の歴史です。  </p>\n<p>引き続きよろしくお願いします。  </p>\n\n</div>",
    "link": "/blogs/hatena/2020年の t_igarashi_sho を振り返る",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/dcf9dcb4a35abe4f8eeac703f64e99df794aa2f086eaae86bc8c1f0838310800.png",
      "small": "/ogp/630x630/blogs/hatena/dcf9dcb4a35abe4f8eeac703f64e99df794aa2f086eaae86bc8c1f0838310800.png"
    }
  },
  {
    "name": "2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感",
    "publishedAt": "2020-12-04 00-00-00",
    "title": "USキーボード OSの違い キーバインド 違和感",
    "description": "  この記事は Lancers（ランサーズ） Advent Calendar 2020の5日目の記事になります。qiita.comまえがき前提知識: 使用しているキーボードの配列ほ",
    "body": "<div class=\"markdown-body\">\n  <p>この記事は <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2020/lancers\">Lancers（ランサーズ） Advent Calendar 2020</a>の5日目の記事になります。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2020/lancers\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-5c7f1fc6a836f63edb4ce4712fa4829bb1812c4aa77216cc71b397f61cbd4db5.png\" alt=\"                                                                                                                                                        Lancers（ランサーズ） Advent Calendar 2020 - Qiita\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2020/lancers\">qiita.com</a></p>\n<ul>\n<li><p><a href=\"#まえがき\">まえがき</a></p>\n</li>\n<li><p><a href=\"#前提知識-使用しているキーボードの配列\">前提知識: 使用しているキーボードの配列</a></p>\n</li>\n<li><p><a href=\"#ほんだい\">ほんだい</a>  - <a href=\"#先に注意\">先に注意</a></p>\n<ul>\n<li><a href=\"#日本語入力切り替えの共通化\">日本語入力切り替えの共通化</a></li>\n<li><a href=\"#ショートカットキーの共通化\">ショートカットキーの共通化</a></li>\n<li><a href=\"#クリップボードの共通化\">クリップボードの共通化</a></li>\n</ul>\n</li>\n<li><p><a href=\"#さいごに\">さいごに</a></p>\n<h3 id=\"まえがき\">まえがき</h3>\n</li>\n</ul>\n<p>システム開発している 五十嵐です。<br>この記事は、2020年弊社アドベントカレンダー キーボードについて書く枠 代表として書きたかったので書きました。  </p>\n<p>数少ないErgodox派としてのアウトプットをしたいというのもあります。  </p>\n<p>半年前、こんな記事書いててなんやかんやでこのキーボードに慣れました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://igara1119.hatenablog.com/entry/2020/05/10/002501\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-392a563febb215a912ac43489279b68e6e3f527a797c5d60ffed0d429b370c41.png\" alt=\"Ergodox EZ キーボードのカスタム - 無銘雑記\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://igara1119.hatenablog.com/entry/2020/05/10/002501\">igara1119.hatenablog.com</a></p>\n<p>とはいえ、業務に関係ないですけど最近は個人のWindows機ともキーボード併用してて、  </p>\n<p>macOSとWindowsのOSの違いによる同じ操作感で使用できない問題点が出てきてたので  </p>\n<p>どのようにして問題解決したのかを重点的に記載できればと思います。<br>記事のタイトルにErgodox入れなかったのは、USキーボードだったら共通の話題になるのかなぁと思い、外しています。  </p>\n<h3 id=\"前提知識-使用しているキーボードの配列\">前提知識: 使用しているキーボードの配列</h3>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/0-img-tag.png\" alt=\"f:id:igara1119:20201203225946p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\">\n\n  \n<p>上記はMacbookのUSキーボードの配列に近い形に設置しています。<br>例えば  </p>\n<ul>\n<li>左上Esc</li>\n<li>左上Tab</li>\n<li>左下・右下Shift</li>\n<li>下側にCommand, Option\nちょっと例外的な配列で  </li>\n<li>左親指位置にEnter, Space, Backspace, Delete</li>\n<li>左下Control\n（MacBookでCaps LookをControlに置き換える作業ってみんなやらない？）</li>\n<li>右親指位置にEsc, Tab, Up, Down, Left, Right\n※この配列は若干ターミナル操作を意識したものにしてますが実際はEsc, Tab左上のを使うことが多いです。\n実際の写真で見るとわかるのですがDownが大きめの記号のShiftキーを下方向に反転させてます。\nカーソル操作でめっちゃガチャガチャするときなどに、このデコボコしてる感がいい感じに手に馴染みます。<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/1-img-tag.jpg\" alt=\"f:id:igara1119:20201203233043j:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></li>\n</ul>\n<p>そもそもなんでUSキーボードを使うようになったかというと  </p>\n<p>たまにデフォルトの入力作業がUS配列というものがあるからUSキーボードに慣れてた方が良いと思ったのがあります。  </p>\n<p>（最近はあまりないですがRaspberry PiとかLinuxサーバ上のターミナル作業とか）  </p>\n<h3 id=\"ほんだい\">ほんだい</h3>\n<h4 id=\"先に注意\">先に注意</h4>\n<p>Windowsのキーボード操作改善のためにAutoHotKeyを使用した方法を記載しています。  </p>\n<p><strong>一部、チート対策や自動化作業によるマクロ対策がされているソフトウェアを起動できなくなる可能性がありますのでその際はこのマクロを停止してから実行するようにお願いします。</strong>  </p>\n<p>（実際、某オンラインゲームを起動しようとしたらAutoHotKeyが原因で起動できなかった）  </p>\n<h4 id=\"日本語入力切り替えの共通化\">日本語入力切り替えの共通化</h4>\n<p>macOSでは ⌘英かな というアプリケーション使って左右のCommandキーで英字 / 日本語入力の切り替えを行っています。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/iMasanari/cmd-eikana\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-776a1d330be32d1ce38a00afbe619f01238e835bfe0a3aaad9ee6474613c6c59.png\" alt=\"iMasanari／cmd-eikana\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/iMasanari/cmd-eikana\">github.com</a></p>\n<p>前はKarabiner-Elementsで切り替えしてましたがOSアップデートのタイミングで使えなくなることが多かったので最近はこちらのアプリを使うことが多いです。<br>Windowsでは CommandキーがWindowsキー扱いされるのでAutoHotKeyというソフトウェアを使ってWIndowsキー押したら日本語入力するようなマクロを起動するようにしました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/ergodox-jp-autohotkey\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-36716317032eb27caf04a5bea66cc653e3481daa2e5247deaedca27e7a768cfd.png\" alt=\"igara／ergodox-jp-autohotkey\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/ergodox-jp-autohotkey\">github.com</a></p>\n<p>マクロの内容として該当する箇所がこちらになります。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/ergodox-jp-autohotkey/blob/3a8805d2254922ea648e10b2b45f937e3e35a952/ergodox-jp-autohotkey.ahk#L1-L15\">https://github.com/igara/ergodox-jp-autohotkey/blob/3a8805d2254922ea648e10b2b45f937e3e35a952/ergodox-jp-autohotkey.ahk#L1-L15</a>  </p>\n<h4 id=\"ショートカットキーの共通化\">ショートカットキーの共通化</h4>\n<p>OSの違いによるキーボードの操作の違いとしてショートカットキー（ホットキー）の違いや  </p>\n<p>macOSではCommandキーをよく使うけど  </p>\n<p>WindowsではControlキーをよく使うなどソフトウェアでの違いがあったりすると思います。<br>macOS側は特別な設定をしていないです。<br>Windows側ではまたAutoHotKeyによるマクロで  </p>\n<p>複数のキーを同時に押す場合はWindowsキーをControlキーに置き換えするようにしています。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/ergodox-jp-autohotkey/blob/3a8805d2254922ea648e10b2b45f937e3e35a952/ergodox-jp-autohotkey.ahk#L17-L75\">https://github.com/igara/ergodox-jp-autohotkey/blob/3a8805d2254922ea648e10b2b45f937e3e35a952/ergodox-jp-autohotkey.ahk#L17-L75</a><br>全てのアルファベットキーを置き換えしなかったのもWindowsキー + Rなどの便利なショートカットもあるので対応していなく、比較的よく使うものだけを対応しています。<br>対応できていないものとして  </p>\n<p>キーを3つ使うようなの（Control + Shift + Fなど） ができていないので残課題です。  </p>\n<h4 id=\"クリップボードの共通化\">クリップボードの共通化</h4>\n<p>macOSでは Clipy 使ってます<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Clipy/Clipy\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-66cf448b5c053a04003e6725c540cbf8cbfa4ff3dbb67b93e7a034236fb7403b.png\" alt=\"Clipy／Clipy\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Clipy/Clipy\">github.com</a></p>\n<p>キーボードの配列の話でもありましたがCaps LookをControlとしておいている都合上、左手小指で一番下らへんを2回タップするとクリップボードを開く設定にしてます。    </p>\n<p>この操作のスカカって感じ結構好きです。  </p>\n<p>Enterをターンするようなものだと思ってください。  </p>\n<p>この点に関してはMacBookのキーボード US / 日本語配列関係なく共通です。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/2-img-tag.png\" alt=\"f:id:igara1119:20201204003326p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p>WindowsではWindows 10からWindowsキー + V 押すことでクリップボード開けるようになりましたが  </p>\n<p>ショートカットキーの共通化により貼り付けのショートカットキーに上書きされて、  </p>\n<p>代わりに Clibor によるクリップボードを使うようにしています。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chigusa-web.com/clibor/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-318c490fe55255872a0cc5603a07bc529850243e0177f05f80f22746fb7f0f73.png\" alt=\"Cliborの使い方 | 千草ウェブ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chigusa-web.com/clibor/\">chigusa-web.com</a></p>\n<p>こちらもmacOSと同様にControlを2回押すことでクリップボードを表示する設定にすれば同じように使用することが可能になります。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/3-img-tag.png\" alt=\"f:id:igara1119:20201204004457p:plain\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p>辞書のような定型文登録ができて純粋に優れているから Clibor 使っているというのもあります。  </p>\n<h3 id=\"さいごに\">さいごに</h3>\n<p>だいぶこの対応で環境の違いによる違和感を消化することができました。  </p>\n<p>誰かが同じような問題を抱えてて、この記事を元により効率を上げることに繋がればといいなぁと思います。<br>以上でこの記事は終わりになります。<br>過去にも弊社のアドベントカレンダーでキーボードの話題がありますので  </p>\n<p>宣伝になっちゃうんですけどこちらも見ていただけますと書いた人が喜ぶんじゃないかなぁと思います。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2016/lancers\">ランサーズ Advent Calendar 2016 - Qiita</a><br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://engineer.blog.lancers.jp/2016/12/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-21b648119add889edeef37f79be0fd7a7a06f25e2ecfe6b7dd0ab36f7ec12e3e.png\" alt=\"みんなの使ってるキーボード調べてみた | ランサーズ（Lancers）エンジニアブログ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://engineer.blog.lancers.jp/2016/12/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AE%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F/\">engineer.blog.lancers.jp</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/advent-calendar/2018/lancers\">Lancers（ランサーズ） Advent Calendar 2018 - Qiita</a><br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://engineer.blog.lancers.jp/2018/12/lancerskeyboard/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-12-04 00-00-00 USキーボード OSの違い キーバインド 違和感/iframe-38d3f82c664bc0d5caf01692fba800871409d800ec9005104b2f84b8868d0b92.png\" alt=\"ランサーズエンジニアのキーボードの世界 | ランサーズ（Lancers）エンジニアブログ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://engineer.blog.lancers.jp/2018/12/lancerskeyboard/\">engineer.blog.lancers.jp</a></p>\n<p>次回 6日目 まみーさん による 「MySQLの話を何か」です。  </p>\n<p>引き続きよろしくお願いします。  </p>\n\n</div>",
    "link": "/blogs/hatena/USキーボード OSの違い キーバインド 違和感",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/688ba4d45d6b9ff3eef81ebb91a855cf8c98d567cc9cd6aa525a0770b583720a.png",
      "small": "/ogp/630x630/blogs/hatena/688ba4d45d6b9ff3eef81ebb91a855cf8c98d567cc9cd6aa525a0770b583720a.png"
    }
  },
  {
    "name": "2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事",
    "publishedAt": "2020-09-26 00-00-00",
    "title": "PC組んでみたのでいろいろ書く記事",
    "description": "  6月に古いPCを廃棄して最近のWindows 10を一度もさわったことがないというのもあったので久しぶりにパーツ見て作ってみたという話です。正面がこんな感じ  正面  裏側  ",
    "body": "<div class=\"markdown-body\">\n  <p>6月に古いPCを廃棄して最近のWindows 10を一度もさわったことがないというのもあったので久しぶりにパーツ見て作ってみたという話です。<br>正面がこんな感じ  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/0-img-tag.jpg\" alt=\"f:id:igara1119:20200926184417j:plain\" title=\"f:id:igara1119:20200926184417j:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n正面\n\n  \n<p>裏側  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/1-img-tag.jpg\" alt=\"f:id:igara1119:20200926184450j:plain\" title=\"f:id:igara1119:20200926184450j:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n裏側\n\n  \n<p>購入したものの一覧として  </p>\n<ul>\n<li>OS\nMicrosoft Windows 10 Home\n最近のWindows OSのインストールはUSBブートでできるのでDVDドライブとか付けなくても良くなったのいいすね</li>\n<li>CPU\nIntel BX8070110900K Core i9-10900K\n今使ってるMacBookも世代とコア数違うけどi9だったのでi9同士で比較したかった</li>\n<li>CPUファン\nNoctua NH-D15\nでかい\n水冷はリスクありそうと思って空冷にした</li>\n<li>マザーボード\nASUS ROG MAXIMUS XII FORMULA\nツクモでCPUセット価格で購入した\nなんかひかる\n水冷にも対応しているらしく所々管を通せる仕組みがある\nあとでドライバーインストールしたらWifiとBluetoothも使えるようになった</li>\n<li>グラフィックボード\nASUS ROG-STRIX-RTX2080TI-O11G-WHITE-GAMING\nこいつもなんかひかる\nあとでAura Syncというの入れて設定したらマザーボードのひかるのと一緒に止めることができた\n本当は3080欲しかったけど店にあるものでいいものを探した結果これだった</li>\n<li>メモリ\nCrucial CT2K32G4DFD832A\n32GBのメモリ2枚で64GBにした</li>\n<li>SSD\nWestern Digital WDS100T2B0A\n1TBのSSD\n軽量なので裏側の写真通り宙にSSDが浮いている状態で置いてる</li>\n<li>電源\nSeasonic SSR-1000GD\n1000Wの電源\n余裕を持たせるために大きめのを購入</li>\n<li>ケース\nダイソー メタルラック\nあえて壁がないことにより熱をこもらせないようにしている\n上記のパーツを組ませたらどのくらいの大きさになるのか想定できなかったのであとで購入\n金額として</li>\n</ul>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/2-img-tag.jpg\" alt=\"f:id:igara1119:20200926192449j:plain\" title=\"f:id:igara1119:20200926192449j:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n金額\n\n  \n<p>これぐらいだったので  </p>\n<p>タイトル「藤井棋士のCPUより安いPC」と呼ぶようにしています<br>ベンチマークとかも今回回してみたので記載すると  </p>\n<p>先に普段使いの2018 MacBookPro  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/3-img-tag.png\" alt=\"f:id:igara1119:20200926193500p:plain\" title=\"f:id:igara1119:20200926193500p:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n2018MacBookPro\n\n  \n<p>な構成でCinebench回してみたら  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/4-img-tag.png\" alt=\"f:id:igara1119:20200926193644p:plain\" title=\"f:id:igara1119:20200926193644p:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\nmacbook cinebench\n\n  \n<p>高いのか低いのか分かりませんが  </p>\n<p>作成したPCをCinebenchしてみたら  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/5-img-tag.jpg\" alt=\"f:id:igara1119:20200926193835j:plain\" title=\"f:id:igara1119:20200926193835j:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n自作PCのベンチマーク\n\n  \n<p>ptsという数値が倍ちかく異なっていたのでそこそこ性能良さそうです<br>あとFF15のベンチマークを新しいPCの方だけやってみたら  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/6-img-tag.jpg\" alt=\"f:id:igara1119:20200926194140j:plain\" title=\"f:id:igara1119:20200926194140j:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\nFF15ベンチマーク\n\n  \n<p>快適そうなのでこれから3Dのゲームを高品質で楽しむことができそうです<br>あとは環境構築してたりしましたが  </p>\n<p>マウスをMagic Trackpad使いたいというのを<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/imbushuo/mac-precision-touchpad\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-09-26 00-00-00 PC組んでみたのでいろいろ書く記事/iframe-9f7b61af9dd596bdbec53a91501d02b18923d2cb6f35437f7fba47491871663e.png\" alt=\"imbushuo／mac-precision-touchpad\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/imbushuo/mac-precision-touchpad\">github.com</a></p>\n<p>使えばジェスチャーで仮想デスクトップの切り替えやブラウザの拡大表示が同様に使えてよかったです<br>未解決なものとしてErgodoxのキーボードがMacの設定しかないのでWindowsで使用した際に配列の違和感があるのでどう解決していこうかなって感じです  </p>\n\n</div>",
    "link": "/blogs/hatena/PC組んでみたのでいろいろ書く記事",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/5187d985055d5aafaf4e2fb066c9cf44bc6266b399d1da66cdfb8347f0d5fbab.png",
      "small": "/ogp/630x630/blogs/hatena/5187d985055d5aafaf4e2fb066c9cf44bc6266b399d1da66cdfb8347f0d5fbab.png"
    }
  },
  {
    "name": "2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう",
    "publishedAt": "2020-08-09 14-55-24",
    "title": "Google Apps Scriptで音声認識の議事録アプリを作ろう",
    "description": "  この記事は喋ったことを文字で確認できるようなものなにかないか探していてGoogle Docsの音声入力というものがあることを知ったわけですが(GIFアニメ)音声入力中に他のアプ",
    "body": "<div class=\"markdown-body\">\n  <h2 id=\"この記事は\">この記事は</h2>\n<p>喋ったことを文字で確認できるようなものなにかないか探していてGoogle Docsの音声入力というものがあることを知ったわけですが</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/0-md.gif\" alt=\"docs.gif\">\n(GIFアニメ)</p>\n<p>音声入力中に他のアプリをクリックしてしまうと自動で終了されてしまいます。</p>\n<p>なんとかならんものかと考えたところ、ChromeのSpeech Recognition APIとGASのWebアプリケーションを使えば解決できたので解説していこうといった内容です。</p>\n<h2 id=\"どのようなものが仕上がったのか\">どのようなものが仕上がったのか</h2>\n<p>↓の画像は動画のリンクになっております。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=yeq7vMeb7sA\"><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/1-md.png\" alt=\"youtube\"></a></p>\n<p>↓のリンクはソースコードです。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs\">https://github.com/igara/speech-to-docs</a></p>\n<h2 id=\"使い方\">使い方</h2>\n<h3 id=\"docsとgasのwebアプリの作成\">DocsとGASのWebアプリの作成</h3>\n<p>NodeJS v12.14.0使っていましたがたぶんよほど古くなければ他のバージョンでも大丈夫かと思います。\nコマンドを羅列すると</p>\n<pre><code>git clone https://github.com/igara/speech-to-docs\ncd speech-to-docs\nnpm install\n\n# Googleの認証を行う\nnpx clasp login\n\n# exampleという名前のDocsに紐づくGASプロジェクトを同時に作成する\nnpm run new name=example\n\n# TypeScriptで記載されたコードをGAS用にビルド\nnpm run build\n\n# ビルド済みのコードをGASプロジェクトに転送する\nnpx clasp push\n</code></pre>\n<p>ここまでの作業が完了したらDocsから\nメニュー -&gt; ツール -&gt; スクリプトエディタ</p>\n<p>スクリプトエディタ上で\nメニュー -&gt; 公開 -&gt; ウェブアプリケーションとして導入...</p>\n<p>を選択し、作成しようとすると認証確認が出ると思うので認証させれば完成です。\nウェブアプリケーションとして導入にあるURLが開ければ完了です。</p>\n<h3 id=\"gasのwebアプリ\">GASのWebアプリ</h3>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/2-md.gif\" alt=\"webapp.gif\">\n(GIFアニメ)</p>\n<p>背景色変更や文字の大きさの変更が可能だったりするので配信する人とかはここを変えてOBSのクロマキー処理とかも使ったりしたらいい感じになるんじゃないでしょうか。</p>\n<img width=\"436\" alt=\"マイク.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/0-img-tag.png\">\n\n<p>マイクの設定は各自使用しているものに適応してください。</p>\n<h2 id=\"コード説明\">コード説明</h2>\n<h3 id=\"srcgas\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/tree/master/src/gas\">src/gas</a></h3>\n<p>  GASのスクリプトエディタに反映するコードを記載しています。</p>\n<h4 id=\"appsscriptjson\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/appsscript.json\">appsscript.json</a></h4>\n<pre><code>  &quot;executionApi&quot;: {\n    &quot;access&quot;: &quot;ANYONE&quot;\n  },\n</code></pre>\n<p>の箇所はclaspのデバッグの都合でANYONEにしています。\n今回の記事にはデバッグの仕方を記載しませんがやってみる場合はこちらの記事を参考にすると良いかもしれません。主にCloud Consoleでの設定がつむポイント\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/abetomo/items/59379e26679e342ef6e3\">clasp run できないとき。2018-09-25</a></p>\n<pre><code>  &quot;webapp&quot;: {\n    &quot;access&quot;: &quot;MYSELF&quot;,\n    &quot;executeAs&quot;: &quot;USER_DEPLOYING&quot;\n  },\n</code></pre>\n<p>&quot;access&quot;: &quot;MYSELF&quot;はWebアプリケーションを使用できる人を自分だけにするために設定しています。\n&quot;executeAs&quot;: &quot;USER_DEPLOYING&quot;はnpx clasp deployでもWebアプリケーションの更新ができるようなので設定しています。\nただし初回の時はスクリプトエディタ上で承認しないと反映されないようです。\nDocsのアクセス権限はデフォルト自分のみになっているので後でブラウザからDocsはURLわかる人には閲覧できるように設定するとリアルタイムで議事録の記載がされているのがDocs経由でみれるとかできます。</p>\n<h4 id=\"indexhtml\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html\">index.html</a></h4>\n<p>GASのWebアプリケーションを構成するHTMLです。</p>\n<pre><code>   &lt;?!= HtmlService.createHtmlOutputFromFile(&quot;css&quot;).getContent(); ?&gt;\n   &lt;?!= HtmlService.createHtmlOutputFromFile(&quot;js&quot;).getContent(); ?&gt;\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html#L5-L6\">https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html#L5-L6</a></p>\n<p>外部のファイルを呼び出しを上記で行っている点以外は標準なHTMLかと思います。</p>\n<h4 id=\"csshtml\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/css.html\">css.html</a></h4>\n<p>HTMLファイルですがGASのWebアプリケーションを構成するCSSです。</p>\n<p>VSCodeでもstyleタグの補完が効いてくれていたので特に困ることがなかったです。</p>\n<h4 id=\"jshtml\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html\">js.html</a></h4>\n<p>HTMLファイルですがGASのWebアプリケーションを構成するJavaScriptです。</p>\n<p>このファイルもTypeScript化しようかと思いましたが既にGASの関数定義でWebpack等使っているのもあり、Webアプリケーション上ではHTMLファイルじゃないと外部読み込みできないというのもあって普通にJavaScriptで書くようにしました。</p>\n<pre><code>google.script.run.setText(logText);\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html#L33\">https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html#L33</a></p>\n<p>というのがありますがWebアプリケーション側のJavaScriptでgoogle.script.run.xxxのような記載をするとGASの関数が起動可能みたいです。</p>\n<h4 id=\"do_getts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/do_get.ts\">do_get.ts</a></h4>\n<p>WebアプリケーションのURLを開いた時に<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html\">index.html</a>を開く処理を記載しています。</p>\n<h4 id=\"do_postts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/do_post.ts\">do_post.ts</a></h4>\n<p>POSTで音声認識とは別でDocsにテキスト反映できるかテスト用に作成しただけのものです。</p>\n<h4 id=\"set_textts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/set_text.ts\">set_text.ts</a></h4>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html\">js.html</a>で使われているSpeech Recognition APIの結果をこのGAS関数を使ってDocsに文字起こしをしています。</p>\n<h3 id=\"srctasks\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/tree/master/src/tasks\">src/tasks</a></h3>\n<p>CLIで実行するツールなどを扱っています。</p>\n<h4 id=\"create_clasp_jsonts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/tasks/create_clasp_json.ts\">create_clasp_json.ts</a></h4>\n<pre><code># exampleという名前のDocsに紐づくGASプロジェクトを同時に作成する\nnpm run new name=example\n</code></pre>\n<p>を実行した時に使用していたスクリプトです。\nnameの指定からDocsとGASプロジェクトが作成されるような処理を記載しています。</p>\n<h2 id=\"最後に\">最後に</h2>\n<p>配信を文字に起こして振り返りがしやすくなる利点ってありそうだけど、音声認識がまだそこまで精密でもないから実施していないのかわかんないですが、この記事をきっかけになにか発展があれば幸いです。</p>\n\n</div>",
    "link": "/blogs/qiita/Google Apps Scriptで音声認識の議事録アプリを作ろう",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/11b68a1a8beb7eb61d0a978accb9430db1bba3129401b658a1297bdac60aaec3.png",
      "small": "/ogp/630x630/blogs/qiita/11b68a1a8beb7eb61d0a978accb9430db1bba3129401b658a1297bdac60aaec3.png"
    }
  },
  {
    "name": "2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム",
    "publishedAt": "2020-05-10 00-00-00",
    "title": "Ergodox EZ キーボードのカスタム",
    "description": "  ちょっとエルゴノミクスキーボード（キーボード分割したような）を作ってみたいという気持ちがありつつ、行ってみたいキーボード屋さんにも行けない状況なので、既に出来上がっているキーボ",
    "body": "<div class=\"markdown-body\">\n  <p>ちょっとエルゴノミクスキーボード（キーボード分割したような）を作ってみたいという気持ちがありつつ、\n行ってみたいキーボード屋さんにも行けない状況なので、\n既に出来上がっているキーボードで先に慣らしておこうという気分で購入しました。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/0-img-tag.jpg\" alt=\"f:id:igara1119:20200509213205j:plain\" title=\"f:id:igara1119:20200509213205j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ergodox-ez.com/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-0b80c965305e885eb8232966ee8daaef2f4a50bd9d7bf417a591dae302544f5c.png\" alt=\"ErgoDox EZ: An Incredible Mechanical Ergonomic Keyboard\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ergodox-ez.com/\">ergodox-ez.com</a></p>\n<p>注文画面でいろいろ、光らせるようにするかとかリストレストも付属するとか選択肢があり、注文を終えると3週間ぐらいでお家に届きました。\n（時期が時期だったので注文からの発注大変そうと思いました。）<br>注文内容としては以下のもので<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/1-img-tag.png\" alt=\"f:id:igara1119:20200509211850p:plain\" title=\"f:id:igara1119:20200509211850p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<ul>\n<li>ErgoDox EZ Glow Standalone × 1<ul>\n<li>Glowというのが光るやつ ただし親指の箇所など端の箇所は光らない</li>\n<li>Backlit / Black / Cherry MX Brown (RGB)<ul>\n<li>BlackのほかWhiteもある</li>\n<li>茶軸以外も選択可能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The Wing: Custom ErgoDox EZ Wrist Rest × 1<ul>\n<li>Black<ul>\n<li>黒しかない</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Tilt/Tent Kit × 1<ul>\n<li>Black<ul>\n<li>これも黒しかない\n全部込みで注文しました。<br>注文したもの以外でキーキャップを外す道具もおまけでついてきたのですがこれ結構使いやすかったです。  <img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/2-img-tag.jpg\" alt=\"f:id:igara1119:20200509223008j:plain\" title=\"f:id:igara1119:20200509223008j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>あと、キーのイメージ変えたいのと自作でキーキャップ 欲しかったので↓のを注文したのですが今回あまり使いませんでした。\n一部数字など使用しています。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/3-img-tag.jpg\" alt=\"f:id:igara1119:20200509213536j:plain\" title=\"f:id:igara1119:20200509213536j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www2.razer.com/jp-jp/gaming-accessories/razer-pbt-keycap-upgrade-set\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-25137c82b771bef7b80ca72aeb929c0152e0f5a318a5f46127d723f03f39e3b5.png\" alt=\"Razer PBT キーキャップ アップグレードセット - ゲーミングキーボードアクセサリ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www2.razer.com/jp-jp/gaming-accessories/razer-pbt-keycap-upgrade-set\">www2.razer.com</a></p>\n<p>さすがゲーミングの製品を扱っているだけあって光るキーボード用のキーキャップも販売していました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://shop.tvc.jp/?pid=40897107\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-08fcbb6b4ab9da0137571f01589479db3f2e2708799634b52035f618f40618b0.png\" alt=\"KB200／20A／58A／840A用キートップ1×2、2×1（10個入） - テクノベインズ オンラインショップ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://shop.tvc.jp/?pid=40897107\">shop.tvc.jp</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://shop.tvc.jp/?pid=40897248\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-83a4c4db160b441beae7e07bf637d5f45707b20ba27de6c165a85a42b3ddcb9d.png\" alt=\"KB200／20A／58A／840A用キートップ1×1（10個入） - テクノベインズ オンラインショップ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://shop.tvc.jp/?pid=40897248\">shop.tvc.jp</a></p>\n<p>こちらのキーキャップ はPOSレジ用のですが万が一、やっぱりちゃんと文字が印刷されたキーキャップ欲しいとなったとき、自由に紙に印刷したものを使用できるような保険のものです。<br>今回はわりと不自由しなかったので使いませんでした。<br>で、あとはキーの配置も変えたりしました。<br>画像にするとこんな感じです。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/4-img-tag.jpg\" alt=\"f:id:igara1119:20200509235036j:plain\" title=\"f:id:igara1119:20200509235036j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p>もしこのキーマップを使用したい場合は下記を使っていただければと思います。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/ergodox-ez-keymap\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-2859af1edbc629cb275b0c067eff2df146d6c923b52513efc2e174d8d316664b.png\" alt=\"igara／ergodox-ez-keymap\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/ergodox-ez-keymap\">github.com</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://configure.ergodox-ez.com/ergodox-ez/search?q=igarashi&legacy=false\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-a3bb7273f12b9619e798099f885dde8c871a3cf4d95c1da9408f71716d0af128.png\" alt=\"Ergodox EZ Configurator\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://configure.ergodox-ez.com/ergodox-ez/search?q=igarashi&legacy=false\">configure.ergodox-ez.com</a></p>\n<p>このキーボードを使用してまだ1週間かかってないぐらいですが使ってみての感想として<br>格子配列っていうんですかね?\n今まで使用していたキーボードと比べてキーの位置が水平垂直にあるのでちょっとまだ慣れてないところがあってまだ満足に使用できていないなぁという感じです。\nよく使うキーボードってQWERTY配列というらしいのですが初めてキーボードの歴史を調べるきっかけを作ってくれた気がします。<br>あとは親指で選択するキーが多いのでどれを設置しようかという迷いがありました。\nよく使いそうなのを親指にやろうとしても今まで使っていた箇所にやたら指を動かしてしまうみたいなのが癖で多かったりするのでしばらくは慣れるように頑張るしかないなぁって思います。\n特にEnterとDelete<br>マウス操作もできるようにしましたが今まで使用していたトラックパッドの方が操作しやすいです。\nただキーボードから手を離さないでマウスとしての操作ができるので細かい操作を要求されなければキーボードからの操作でもいいかなと思いました。<br>しばらくこのキーボードを使い倒して安心して外出できるようになったらキーボード屋に行きたいと思うのでキーボード作りたい人いたらDMください。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://yushakobo.jp/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2020-05-10 00-00-00 Ergodox EZ キーボードのカスタム/iframe-5354e5bb3c974e0b5164a9e0c4fa32f4287f604c6c62e810ea29d02305c31ced.png\" alt=\"遊舎工房 | 自作キーボード＆レーザーカット＆UVプリント\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://yushakobo.jp/\">yushakobo.jp</a></p>\n\n</div>",
    "link": "/blogs/hatena/Ergodox EZ キーボードのカスタム",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/9a48727e8707925fc5d6589687311fefa38c4fb71fdce141f6c2e7ab9b68645d.png",
      "small": "/ogp/630x630/blogs/hatena/9a48727e8707925fc5d6589687311fefa38c4fb71fdce141f6c2e7ab9b68645d.png"
    }
  },
  {
    "name": "2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する",
    "publishedAt": "2020-04-07 18-42-03",
    "title": "puppeteer経由でインストール済みのアプリケーションを操作する",
    "description": "  最初にこの記事でやろうとしたことを思ったきっかけとして最近声をかけられるということが少なくなったのでせめてSlackとかのチャットで文字だけでなく声を発してくれるようなのが欲し",
    "body": "<div class=\"markdown-body\">\n  <h2 id=\"最初に\">最初に</h2>\n<p>この記事でやろうとしたことを思ったきっかけとして\n最近声をかけられるということが少なくなったのでせめてSlackとかのチャットで文字だけでなく声を発してくれるようなのが欲しいと思ったのがはじまりでした。</p>\n<p>（このままだと聞き取り能力下がるんじゃないかというの危険視してる。テレビ電話使えよというのはありますが会話としての相手がいないとね...</p>\n<p>いろいろ試行錯誤した結果、Electronで作られたアプリとか既にChromeで使用しているアプリに対して「こんな操作方法ある？」というやり方ができてしまったので記事にしました。</p>\n<h2 id=\"対象のアプリ\">対象のアプリ</h2>\n<p>実際に試験的に外部のアプリを操作しているアプリです。\nmacOSでのみ使用できます。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/releases/tag/experimental-1\">https://github.com/igara/speeche/releases/tag/experimental-1</a>\nもしかするとソース上で指定しているアプリのパスの違いによって起動できない人もいるかもしれません。</p>\n<p>下記は実際に操作している対象のアプリです。</p>\n<ul>\n<li>Chrome<ul>\n<li>Twitter</li>\n<li>Facebook</li>\n</ul>\n</li>\n<li>Electron<ul>\n<li>Slack</li>\n<li>Discord</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"chrome\">Chrome</h3>\n<p>コードとして下記の箇所になります\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L20-L46\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L20-L46</a></p>\n<pre><code class=\"language-ts\">const createChromeBrowser = async () =&gt; {\n  try {\n    const chromeBrowser = await puppeteer.launch({\n      executablePath: &quot;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&quot;,\n      // userDataDir: path.resolve(path.join(process.env.HOME || &quot;&quot;, &quot;Library/Application Support/Google/Chrome&quot;)),\n      headless: false,\n    });\n\n    const twitterCookies = chromeCookies.cookies(&quot;twitter.com&quot;);\n    const twitterPage = await chromeBrowser.newPage();\n    for (const cookie of twitterCookies) {\n      await twitterPage.setCookie(cookie);\n    }\n    await twitterPage.goto(&quot;https://twitter.com/home&quot;);\n    await twitterPage.addStyleTag({ content: `* {background: red;}` });\n\n    const facebookCookies = chromeCookies.cookies(&quot;facebook.com&quot;);\n    const facebookPage = await chromeBrowser.newPage();\n    for (const cookie of facebookCookies) {\n      await facebookPage.setCookie(cookie);\n    }\n    await facebookPage.goto(&quot;https://www.facebook.com&quot;);\n    await facebookPage.addStyleTag({ content: `* {background: red;}` });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n<p><code>executablePath</code>には実際に使用しているChromeのアプリ内の実行ファイルを指定しています。\n<code>userDataDir</code>がコメントされていますがこれ使用できればChromeでログインしているユーザの状態でpuppeteerの操作ができそうですが**UnhandledPromiseRejectionWarning: Error: Failed to launch chrome!**という実行エラーが出てしまったのでコメントにしています。</p>\n<h3 id=\"twitter\">Twitter</h3>\n<p>該当箇所こちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L28-L34\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L28-L34</a></p>\n<pre><code class=\"language-ts\">const twitterCookies = chromeCookies.cookies(&quot;twitter.com&quot;);\nconst twitterPage = await chromeBrowser.newPage();\nfor (const cookie of twitterCookies) {\n  await twitterPage.setCookie(cookie);\n}\nawait twitterPage.goto(&quot;https://twitter.com/home&quot;);\nawait twitterPage.addStyleTag({ content: `* {background: red;}` });\n</code></pre>\n<p>行っていることとしてtwitterのドメインで取得できるCookieを設定してTwitterのページを開き、CSSの追加をしているという処理をしています。\nCookieの取得についてですが下記のツールから取得したものを使用しています。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/chrome-cookies\">https://github.com/igara/chrome-cookies</a></p>\n<p>これを実行すると下記のような画面が表示されるようになります。</p>\n<img width=\"730\" alt=\"スクリーンショット 2020-04-07 17.55.55.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/0-img-tag.png\">\n\n<p>タイムラインの箇所はCookieではない別のストレージの情報から取得するようになっているようなので中途半端なログインな状態で表示されます。\n（タイムラインの箇所とるためにCookie同様にLocal Strage取得用CLI作ろうとしたのですがLevelDBから取れたLocal Strageの値が暗号化されててうまく複合化できずにめげました。</p>\n<h3 id=\"facebook\">Facebook</h3>\n<p>該当箇所こちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L36-L42\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L36-L42</a></p>\n<pre><code class=\"language-ts\">const facebookCookies = chromeCookies.cookies(&quot;facebook.com&quot;);\nconst facebookPage = await chromeBrowser.newPage();\nfor (const cookie of facebookCookies) {\n  await facebookPage.setCookie(cookie);\n}\nawait facebookPage.goto(&quot;https://www.facebook.com&quot;);\nawait facebookPage.addStyleTag({ content: `* {background: red;}` });\n</code></pre>\n<p>Twitterとやっていることは同様ですがこちらは他のユーザの投稿内容を取得することが可能みたいです。</p>\n<img width=\"808\" alt=\"スクリーンショット 2020-04-07 18.02.21.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/1-img-tag.png\">\n\n\n<h2 id=\"electron\">Electron</h2>\n<p>ElectronのアプリはChromeとは異なり何故か<code>userDataDir</code>でユーザの状態を保ったまま開くことが可能みたいです。\n「そのパスでいけちゃうもんなの？」という感じが否めなかったです。</p>\n<h3 id=\"slack\">Slack</h3>\n<p>該当箇所はこちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L48-L64\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L48-L64</a></p>\n<pre><code class=\"language-ts\">const createSlackBrowser = async () =&gt; {\n  try {\n    const slackBrowser = await puppeteer.launch({\n      executablePath: &quot;/Applications/Slack.app/Contents/MacOS/Slack&quot;,\n      userDataDir: path.resolve(path.join(process.env.HOME || &quot;&quot;, &quot;Library/Application Support/Slack&quot;)),\n      headless: false,\n    });\n    const pages = await slackBrowser.pages();\n\n    pages.forEach(async page =&gt; {\n      await page.waitFor(1000);\n      await page.addStyleTag({ content: `* {background: red;}` });\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n<img width=\"800\" alt=\"スクリーンショット 2020-04-07 18.21.52.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/2-img-tag.png\">\n\n\n<h3 id=\"discord\">Discord</h3>\n<p>該当箇所はこちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L66-L82\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L66-L82</a></p>\n<pre><code class=\"language-ts\">const createDiscordBrowser = async () =&gt; {\n  try {\n    const discordBrowser = await puppeteer.launch({\n      executablePath: &quot;/Applications/Discord.app/Contents/MacOS/discord&quot;,\n      userDataDir: path.resolve(path.join(process.env.HOME || &quot;&quot;, &quot;Library/Application Support/Discord&quot;)),\n      headless: false,\n    });\n    const pages = await discordBrowser.pages();\n\n    pages.forEach(async page =&gt; {\n      await page.waitFor(1000);\n      await page.addStyleTag({ content: `* {background: red;}` });\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n<p>DiscordはSlackと異なって</p>\n<img width=\"288\" alt=\"スクリーンショット 2020-04-07 18.27.38.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/3-img-tag.png\">\n\n<p>一瞬DOMのかけらのようなものが表示されて</p>\n<img width=\"1267\" alt=\"スクリーンショット 2020-04-07 18.31.08.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/4-img-tag.png\">\n\n<p>いつものような画面が表示されているので遅延的に複数のpageを扱うようにしているみたいです。</p>\n<h2 id=\"最後に\">最後に</h2>\n<p>今回は<code>page.addStyleTag</code>によるスタイル変更しか実施していないですが\npuppeteerには<code>page.evaluate</code>というアプリケーション内でJavaScriptを実行できるものがあったりするのでより高度な操作を要求する場合はpuppeteerのドキュメントを見るとよりいろんなことできそうと妄想を膨らますことができるんじゃないかと思います。</p>\n\n</div>",
    "link": "/blogs/qiita/puppeteer経由でインストール済みのアプリケーションを操作する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/61f3665428d770e1036261928342717a639dda5860d2e62430f1c65557ad84f1.png",
      "small": "/ogp/630x630/blogs/qiita/61f3665428d770e1036261928342717a639dda5860d2e62430f1c65557ad84f1.png"
    }
  },
  {
    "name": "2020-02-01 00-00-00 2020／2時点で最近やっていること思うことをいろいろ書いてみる",
    "publishedAt": "2020-02-01 00-00-00",
    "title": "2020／2時点で最近やっていること思うことをいろいろ書いてみる",
    "description": "  1つの人生観としてみていただければと思います  最近会わなくなった人にも対して生存確認報告的なものとして記載します  最近やっていることお仕事関連本業作業マスターデータ作成サイ",
    "body": "<div class=\"markdown-body\">\n  <p>1つの人生観としてみていただければと思います  </p>\n<p>最近会わなくなった人にも対して生存確認報告的なものとして記載します  </p>\n<h2 id=\"最近やっていること\">最近やっていること</h2>\n<ul>\n<li>お仕事関連<ul>\n<li>本業<ul>\n<li>作業<ul>\n<li>マスターデータ作成<ul>\n<li>サイトの内容を構成するYAMLとDBのテーブルを構成するCSVとか編集してページ作成する作業</li>\n</ul>\n</li>\n<li>マスターデータ反映するためのWeb画面の雛形の改修<ul>\n<li>もともと作成済だったものの未対応だったものやバグの修正とか</li>\n</ul>\n</li>\n<li>効率化<ul>\n<li>マスターデータ反映など自社の開発側でやっていたが外部の会社に依頼して大量のページを複製できるようにする対応してる</li>\n<li>Google Spreadsheetで全て管理するようなものにしてたりとか</li>\n</ul>\n</li>\n<li>3月末に退職予定なので引き継ぎとか<ul>\n<li>秘伝のタレのようなLP作成のナレッジとかしてる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>雇用<ul>\n<li>よくフリーランスと思われるが自社と直契約の契約社員<ul>\n<li>正社員とほぼ変わらないが権限周りなどの違いがある</li>\n<li>ボーナスないが月給高いので正直今までの会社よりも年収はもらっている</li>\n</ul>\n</li>\n<li>もともと正社員雇用目指していたがあまり正社員になろうという気が起きなくなった<ul>\n<li>CTOとの面接があったりと正社員になるための段階が嫌だった<ul>\n<li>どっかの退職エントリの「正社員にしてくださってありがとうございます」みたいなの好まない</li>\n</ul>\n</li>\n<li>目標管理が嫌<ul>\n<li>最近、社会主義に傾倒しているとこがあって割りに合わないと感じているから<ul>\n<li>（脱線）理想の主義ではあるが結果的に資本主義な国の存在知ってる<ul>\n<li>サイコパスな発言をすると原始共産主義というのもいいんじゃないかと思ってしまう<ul>\n<li>多様性というかグローバリズムで疲弊してるのじゃないかと思うときがある</li>\n<li>無頼派なのかもしれない</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>他人を結構気にするところがあるので</li>\n</ul>\n</li>\n<li>社会不適合者なとこあるので<ul>\n<li>コミュ障だと思っている</li>\n</ul>\n</li>\n<li>サービス自体にもあまり興味を持てなくなった<ul>\n<li>いろいろ企画しても強いユーザ・弱いユーザというのが出てきてみていられなくなってきた</li>\n<li>だんだんソシャゲの運用になってきて何かあったときの補填対応とか嫌になってきた</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>副業しなくなりました</li>\n<li>転職活動しなきゃなと思いながらあまりしていない<ul>\n<li>職業訓練校行ってみようかと思ってみたり<ul>\n<li>3Dの加工とかちょっとやってみたいと思ったりする</li>\n<li>職業訓練校のレベル感があまりわかっていない</li>\n</ul>\n</li>\n<li>結局自分は何をしたいのか明確ではない<ul>\n<li>ものつくりは何かと掛け合わせで生まれるものだと思っているのでその時の気分によるものが大きいと思う</li>\n</ul>\n</li>\n<li>自分が文句を垂れない環境というものを探し出せていない<ul>\n<li>どういった環境が自分に合っているのかも理解できていない</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>プライベート<ul>\n<li>動画サイトで見ているもの<ul>\n<li>ゲーム実況者 幕末志士<ul>\n<li>西郷さんの体調が心配</li>\n<li>動画で出てくる自作ゲーム開発者のリスペクトがある<ul>\n<li>西郷ゲームとかTeam Mの作品とか</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>政治系の解説動画<ul>\n<li>右左の主張の違いあるなと思っていろいろ見ている</li>\n<li>どの情報が正しいのかよくわからないからさらに別の解説も見てみるのループに入る</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>動画作成の授業受けてる<ul>\n<li>開発系の仕事をするのをやめようかと思い始めた<ul>\n<li>地上最強のものつくり屋になりたいというのがあるので<ul>\n<li>個人的にハマってる漫画の刃牙で心境を例えると<ul>\n<li>カンフーで強い烈海王がなぜか空手やボクシングをやり始めるのような</li>\n<li>もともと1つの技術でやっていこうと思っていないので本部以蔵みたいな人物に近いのかもしれない</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>地元に帰ろうかというのも思っているが開発系の仕事が少ないので<ul>\n<li>（補足）地元に帰ろうかと思うことについて<ul>\n<li>地元でも開発している人を拝見したので関わってみたいというのがある</li>\n<li>なんだかんだで東京は仕事があるので生存できることに飽きがあった<ul>\n<li>都内じゃない環境に対応したい<ul>\n<li>住めば都みたいなものがあるのでどうにかなることではあるが</li>\n<li>東京オリンピック前に東京でたい<ul>\n<li>福島も野球の開催地ではあるので例外ではないが</li>\n<li>オリンピック開催前後に何か東京に起きると予知してる</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>（補足）地元に帰った時にお話しにいった企業があって開発の仕事は0ではない<ul>\n<li>ラビックス rabbix さん<ul>\n<li>大学のシステムをRailsで作っている</li>\n<li>福島大学の学生さんとかと勉強会開いている<ul>\n<li>connpassでみたことある</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>オリエンタルエージェンシー さん<ul>\n<li>福島駅前の中合にある大型ビジョンの広告代理店</li>\n<li>WordPressのHP作成もやってる</li>\n<li>市町村のページの多言語化とか大変みたいな話を聞いた<ul>\n<li>大河ドラマゆかりの観光地とかに海外の人来てたりするので</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Adobe製品いじってた<ul>\n<li>Premiere Pro<ul>\n<li>レーザーツールによるカット編集</li>\n<li>リンク解除（動画と音声の切り離し）して2カメ撮影動画の編集</li>\n<li>エフェクト・トランジションとか</li>\n<li>Lumetriスコープ（色・明るさ調整）とか</li>\n</ul>\n</li>\n<li>After Effects<ul>\n<li>キーフレームアニメーション作成とか</li>\n</ul>\n</li>\n<li>Photoshop<ul>\n<li>ビットマップ画像な画像編集<ul>\n<li>透過とか</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Illustrator<ul>\n<li>ベジェ曲線を用いてロゴを作るなど</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UnityとVRMを独学<ul>\n<li>最近はVRoid Studioで簡単にバ美肉できてしまうことがわかった</li>\n<li>定期的にやってる開発合宿で見てもらうために何かを作成中<ul>\n<li>ご期待ください</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n</div>",
    "link": "/blogs/hatena/2020／2時点で最近やっていること思うことをいろいろ書いてみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/9ef2d4c0dd12acfce6740bb703053542c89468830797e72c2c51894dee5e6da5.png",
      "small": "/ogp/630x630/blogs/hatena/9ef2d4c0dd12acfce6740bb703053542c89468830797e72c2c51894dee5e6da5.png"
    }
  },
  {
    "name": "2019-03-03 00-00-00 サークルのHPリニューアルしました",
    "publishedAt": "2019-03-03 00-00-00",
    "title": "サークルのHPリニューアルしました",
    "description": "  平成の終わりが近いですね  先にサークル現状の報告この場を借りて先に今のサークル（shin・DO・meeeee）がどうしているのかという報告をさせていただきます。結論言ってしま",
    "body": "<div class=\"markdown-body\">\n  <img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/0-img-tag.png\" alt=\"f:id:igara1119:20190303145348p:plain\" title=\"f:id:igara1119:20190303145348p:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n平成の終わりが近いですね\n\n  \n<h2 id=\"先にサークル現状の報告\">先にサークル現状の報告</h2>\n<p>この場を借りて先に今のサークル（shin・DO・meeeee）がどうしているのかという報告をさせていただきます。<br>結論言ってしまうと\n先月の2月5日に 技術書典6 のサークル当落通知というのがあって落選してしまったので技術書典6には参加しません。<br>技術書典5以降の技術書典6に向けたサークル内部の動きとして  </p>\n<ul>\n<li>GitLabのサブプロジェクト機能・issues board機能使っていい感じに細かいタスクの可視化<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/1-img-tag.png\" alt=\"f:id:igara1119:20190303145554p:plain\" title=\"f:id:igara1119:20190303145554p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></li>\n<li>Hangoutで打ち合わせするようになった\nとかあって前回とは違った問題解決できてきたなぁと思ったんですけどね。  <h2 id=\"hpリニューアルしました\">HPリニューアルしました</h2>\n</li>\n</ul>\n<p>こちらになります。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://shindomeeee.github.io/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/iframe-3ad6b13db57a12b1282c482e7b01dd056112daadef1a47e7e7e6c3db53e617b8.png\" alt=\"shin・DO・meeeee\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://shindomeeee.github.io/\">shindomeeee.github.io</a></p>\n<p>リニューアルをおこなった理由としては先ほどのissues boardの画像で目移りしたかもしれませんが<br>ホームページメンテしんどい問題<br>があって告知用とかマルチに使おうとして結果的に放置されてしまったというのがありました。\nHPの作成段階では実績もなく <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/pull/3\">なんとなくなデザイン作成</a> とかの負債があったなぁと感じてあのHPの立ち位置を考え直し、  </p>\n<ul>\n<li>みんなブログなら記載する</li>\n<li>実績のみ載せるLP的なページの認識であった方がライトで良さそう\nというのに気づいて思い切って今までのホームページを捨てることにしました。<br>HPにあるリンクとかもGoogleのスプレットシートで管理するようにしたのでよりサークル内部の情報をまとめやすくなったんじゃないかなと思っています。<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/2-img-tag.png\" alt=\"f:id:igara1119:20190303152113p:plain\" title=\"f:id:igara1119:20190303152113p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></li>\n</ul>\n<p>あとはイラストなど素材も充実してきたのでHPにも導入するようになったのも大きな変更です。\n（あのイラストは汎用性高いので気に入ってます。  </p>\n<h2 id=\"ここから玄人（バイニン）向け\">ここから玄人（バイニン）向け</h2>\n<p>あのHPを僕1人でメンテするのもあれで、やったこと結構エグいのが多かったのでナレッジ残す意味あいで色々記載します。\n※記載している内容はほとんど僕の趣味によるものが強いです。  </p>\n<h3 id=\"blogs一覧取得api作成\">Blogs一覧取得API作成</h3>\n<ul>\n<li>API・DBはFirebaseのCloud Firestore(最近GAになったらしいですね</li>\n<li>マスタ管理としてSpreadSheet</li>\n<li>SpreadSheet -&gt; Cloud Firestoreにデータ反映する仕組みとしてGoogle Apps Scriptを使用しています。\n図にするとこんな感じです  <img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/3-img-tag.png\" alt=\"f:id:igara1119:20190303162325p:plain\" title=\"f:id:igara1119:20190303162325p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></li>\n</ul>\n<p>なぜの構成にしたかというとサークルメンバーのGoogleアカウントわかっていたのでIAM管理もGoogleにさせてしまった方が楽だったからです。  </p>\n<h4 id=\"cloud-firestoreの設定\">Cloud Firestoreの設定</h4>\n<h5 id=\"ルール\">ルール</h5>\n<p>SpreadSheetに入力できてFirebaseのロールを持っている人への書込み権限\n一覧のデータを取得するための読み込み権限\nを下記のようなので設定  </p>\n<pre><code>service cloud.firestore {\n  match /databases/{database}/documents {\n    match /blogs/{document=**} {\n      allow read;\n      allow write: if request.auth;\n      allow delete: if request.auth;\n    }\n    match /events/{document=**} {\n      allow read;\n      allow write: if request.auth;\n      allow delete: if request.auth;\n    }\n  }\n}\n</code></pre>\n<h4 id=\"spreadsheetの設定\">SpreadSheetの設定</h4>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/4-img-tag.png\" alt=\"f:id:igara1119:20190303170609p:plain\" title=\"f:id:igara1119:20190303170609p:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n\n  \n<p>CSVにすると  </p>\n<pre><code>id,title,url,tags,created_at,document_id\n1,技術書典5当選しました！！！,https://ultrabirdtech.hatenablog.com/entry/2018/08/02/065033,[&quot;技術書典&quot;, &quot;技術書典5&quot;],2018-08-02,hogehoge\n</code></pre>\n<p>な構成にし、列の説明として  </p>\n<ul>\n<li>id -&gt; 順番</li>\n<li>title -&gt; ブログタイトル</li>\n<li>tags -&gt; 現在使用してないけど絞り込み検索とかで使用する想定</li>\n<li>created_at -&gt; ブログの公開日</li>\n<li>document_id -&gt; Firestoreのdocument_id\nな感じで  <img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/5-img-tag.png\" alt=\"f:id:igara1119:20190303171445p:plain\" title=\"f:id:igara1119:20190303171445p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></li>\n</ul>\n<p>SpreadSheet上に描画ツールで作成した更新ボタンにGoogle Apps Scriptのスクリプトを割り当てできるようにします。  </p>\n<h4 id=\"google-apps-script\">Google Apps Script</h4>\n<p>Google Apps Script経由でSpreadSheetの内容取得、Firestoreに書込みができるように\nマニフェストファイルを編集します<br>appsscript.json  </p>\n<pre><code>{\n  &quot;timeZone&quot;: &quot;Asia/Tokyo&quot;,\n  &quot;dependencies&quot;: {\n    &quot;libraries&quot;: []\n  },\n  &quot;exceptionLogging&quot;: &quot;STACKDRIVER&quot;,\n  &quot;oauthScopes&quot;: [\n    &quot;https://www.googleapis.com/auth/firebase.database&quot;,\n    &quot;https://www.googleapis.com/auth/script.external_request&quot;,\n    &quot;https://www.googleapis.com/auth/spreadsheets.currentonly&quot;,\n    &quot;https://www.googleapis.com/auth/spreadsheets&quot;,\n    &quot;https://www.googleapis.com/auth/datastore&quot;\n  ]\n}\n</code></pre>\n<p>肝心なのがoauthScopesで  </p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.googleapis.com/auth/script.external_request\">https://www.googleapis.com/auth/script.external_request</a>\n外部にリクエストするUrlFetchApp.fetchの使用を許可</li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.googleapis.com/auth/spreadsheets.currentonly\">https://www.googleapis.com/auth/spreadsheets.currentonly</a></li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.googleapis.com/auth/spreadsheets\">https://www.googleapis.com/auth/spreadsheets</a>\nSpreadSheetの内容を取得するために必要</li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.googleapis.com/auth/firebase.database\">https://www.googleapis.com/auth/firebase.database</a></li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.googleapis.com/auth/datastore\">https://www.googleapis.com/auth/datastore</a>\nFirestoreに書込むために必要\nで追加してます。<br>あとはスクリプトの追加で<br>blogs.gs</li>\n</ul>\n<pre><code>function setBlogs() {\n  // 列の扱うデータの配置\n  const columnNumbers = {\n    id: 0,\n    title: 1,\n    url: 2,\n    tags: 3,\n    created_at: 4,\n    document_id: 5\n  }\n\n  const rowNumbers = {\n    // 列名がある箇所の配置\n    scheme: 0\n  }\n  const apiUrl = &quot;https://firestore.googleapis.com/v1/projects/(project id)/databases/(default)/documents/blogs&quot;\n  // 後にdocument_idを取得するために使用\n  const removeString = &quot;projects/(project id)/databases/(default)/documents/blogs/&quot;\n\n  // マニフェストファイル(appsscript.json)にあるoauthScopesで許可されたoauth tokenを取得\n  const token = ScriptApp.getOAuthToken()\n  const headers = {\n    authorization: &quot;Bearer &quot; + token\n  }\n\n  // 対象のSpreadSheetのURL\n  const url = &quot;https://docs.google.com/spreadsheets/d/(SpreadSheet ID)&quot;\n  const spreadsheet = SpreadsheetApp.openByUrl(url)\n  // SpreadSheetの読み込みたいシート\n  const blogsSheet = spreadsheet.getSheetByName(&#39;blogs&#39;)\n  const blogsData = blogsSheet.getDataRange().getValues()\n  // IDの逆の順番にする(最新のものを先に登録させるため Firestore REST APIのorderBy asc があれば...)\n  blogsData.reverse().pop()\n\n  blogsData.forEach(function(blog, rowIndex) {\n    const id = blog[columnNumbers.id]\n    const title = blog[columnNumbers.title]\n    const url = blog[columnNumbers.url]\n    const tags = JSON.parse(blog[columnNumbers.tags])\n    const created_at = new Date(blog[columnNumbers.created_at]).toISOString()\n\n    if (blog[columnNumbers.document_id]) {\n      const targetDocumentId = blog[columnNumbers.document_id]\n      const deleteOptions = {\n        method: &quot;delete&quot;,\n        contentType: &quot;application/json&quot;,\n        headers: headers,\n        muteHttpExceptions: true\n      }\n      const deleteResponse = UrlFetchApp.fetch(apiUrl + &quot;/&quot; + targetDocumentId , deleteOptions)\n      const deleteResponseCode = deleteResponse.getResponseCode()\n      const deleteResponseBody = deleteResponse.getContentText()\n\n      if (deleteResponseCode === 200) {\n        const deleteResponseJson = JSON.parse(deleteResponseBody)\n      } else {\n        Logger.log(Utilities.formatString(&quot;Request failed. Expected 200, got %d: %s&quot;, deleteResponseCode, deleteResponseBody))\n      }\n    }\n\n    if (id &amp;&amp; title &amp;&amp; url &amp;&amp; tags &amp;&amp; created_at) {\n      const createPayload = {\n        fields: {\n          id: {\n            integerValue: rowIndex + 1\n          },\n          title: {\n            stringValue: title\n          },\n          url: {\n            stringValue: url\n          },\n          tags: {\n            arrayValue: {\n              values: tags.map(function(tag) {\n                return {stringValue: tag}\n              })\n            }\n          },\n          created_at: {\n            timestampValue: created_at\n          }\n        }\n      }\n\n      const createOptions = {\n        method: &quot;post&quot;,\n        contentType: &quot;application/json&quot;,\n        payload: JSON.stringify(createPayload),\n        headers: headers,\n        muteHttpExceptions: true\n      }\n      const createResponse = UrlFetchApp.fetch(apiUrl, createOptions)\n      const createResponseCode = createResponse.getResponseCode()\n      const createResponseBody = createResponse.getContentText()\n\n      if (createResponseCode === 200) {\n        const createResponseJson = JSON.parse(createResponseBody)\n        const documentId = createResponseJson.name.replace(removeString, &quot;&quot;)\n        blogsSheet.getRange(id + 1, columnNumbers.document_id + 1).setValue(documentId)\n      } else {\n        Logger.log(Utilities.formatString(&quot;Request failed. Expected 200, got %d: %s&quot;, createResponseCode, createResponseBody))\n      }\n    }\n  })\n}\n</code></pre>\n<p>な感じで雑にSpreadSheetにあるデータを正とするためにFirestore上のデータ全消しした後で再度追加するようにしてます。<br>このスクリプトに先ほどSpreadSheetのボタンにスクリプトの割り当てをすることでボタンから更新することが可能になります。  </p>\n<h3 id=\"フロント実装\">フロント実装</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/pull/15/files\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/iframe-18e49c3ea7ff55d7c7dcc9a6d78f32edc6d89377232d0eab5130573740f506d6.png\" alt=\"Feature／new site by igara · Pull Request #15 · shindomeeee／shindomeeee.github.io\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/pull/15/files\">github.com</a></p>\n<p>がっつり変更入れてるので現在(2018/03/03時点)でもPR中にしてます。  </p>\n<h4 id=\"昔ながらのpublic_html-に-自身で編集したindexhtml-置くような運用辞めた\">昔ながらのpublic_html に 自身で編集したindex.html 置くような運用辞めた</h4>\n<p>どう言ったことというと以前はindex.html, css, jsを直接変更していたのを辞めたということです。\nいわゆるジェネレータやbundlerのようなものを用いていなかったため新しいページを作成するときはディレクトリ切ってindex.htmlを設置し、共通で変更必要なものを都度都度index.htmlを直すようなことを辞めました。\nなぜ今までこのような運用していたのかというとサークルのみんながどのようなの得意としているのか理解していなかったのもあり一番共通な認識でできるだろうと当時思っていたのですが、結果としていじる側にしんどみが出てしまっていたという風に感じています。  </p>\n<h4 id=\"ジェネレータとしてgatsbyjsにした\">ジェネレータとしてGatsbyJSにした</h4>\n<p>GatsbyJSのベースとなるReactJSを用いるため別の学習コストが発生してしまっているのですがここは僕が率先してできるので無理やりに選定しました。\nVueベースなものを扱うというのもありましたがTypeScriptで補完が効くようにすぐに作れるのが僕の中でReactだったのでGatsbyJSにしたというのがあります。\n知り合いでよくJekyllで作ったGitHub Pagesを見てたりしてたのですが僕個人としてフロントで動的に見させたい需要が強かったのでNodeJSよりのものを選びました。  </p>\n<h4 id=\"デプロイ周りの変更\">デプロイ周りの変更</h4>\n<p>GitHub Pagesのホスティングの仕組みとしてmasterブランチのものが静的サイトとして公開されるようになっていて\n以前は様々な対応したものをPR出してmasterブランチに反映されて初めて公開されるような運用していました。<br>しかし今はmasterブランチとは別でdevelopブランチをデフォルトブランチとし、\nyarn deployを実行することでmasterブランチ以外でもすぐにmasterブランチにあげて\nGitHub Pagesに反映されたものを確認するようにしました。\nyarn deploy と言っても厳密には\ngatsby build と NodeJSライブラリのgh-pagesによるmasterブランチ反映をさせています。  </p>\n<h4 id=\"型システム--コンポーネント思考--できるだけすぐに捨てられるように対応\">型システム &amp; コンポーネント思考 &amp; できるだけすぐに捨てられるように対応</h4>\n<p>CSSの運用はCSS Modulesでやるようにしました。\nReactならstyled-componentsでやる手段もありますがelementとstyleが密結合すぎると感じて基本的なhtmlとcssで運用した方が良いと感じてCSS Modulesでやるようにしてます。\nCSSのやつもNodeJSライブラリのtyped-css-modulesを用いれば型定義化され補完が効くようにできるのでそうしてます。\nあと型導入によってAPIとして使用しているFirestoreが返してくるJSONの形(<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/blob/3ea21153b43245996e167f44474b73fee2f696cc/src/thunks/blogs.ts#L14-L39\">これとか</a>)であったり、\nよく困惑するコンポーネントが持つ独自の状態(<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/blob/3ea21153b43245996e167f44474b73fee2f696cc/src/components/index/wrapper.tsx#L35-L43\">これとか</a>やってることとして背景画像が読み込まれたことを保証して背景画像のアニメーションをするようにするためのstate変更をさせる実装してます)\nというのも型化されて見通しいいように？しました。  </p>\n<h4 id=\"jest導入\">jest導入</h4>\n<p>Reduxによる状態変更テスト以外に独自のコンポーネントのテストも行うようにして作成したテストファイルに対して必ずカバレッジが100%になるように頑張ってます。<br><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2019-03-03 00-00-00 サークルのHPリニューアルしました/6-img-tag.png\" alt=\"f:id:igara1119:20190303183634p:plain\" title=\"f:id:igara1119:20190303183634p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></p>\n<p>API周りはモック使用したり(<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/blob/3ea21153b43245996e167f44474b73fee2f696cc/tests/thunks/blogs.test.ts#L103-L168\">これとか</a>)、\nデフォルトの値をモックしたりとか(<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/blob/3ea21153b43245996e167f44474b73fee2f696cc/tests/components/seo.test.tsx#L166-L205\">これとか</a>)、\n画像の読み込み完了時にstate変更されるようなテストをjest.spyOn使用したとか(<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/shindomeeee/shindomeeee.github.io/blob/3ea21153b43245996e167f44474b73fee2f696cc/tests/components/index/wrapper.test.tsx#L24-L38\">これとか</a>)あります。<br>UI周りはBlogs一覧でリンク何個あるかのテストとかはやってますがどういったスタイル当たるかというかまでやってません。\n（そこに関してはjestによるテストというか自動でスクリーンショットとるかstorybookによるもので担保するのが疲弊しないんじゃないかと個人的に思っています  </p>\n\n</div>",
    "link": "/blogs/hatena/サークルのHPリニューアルしました",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/fa9f00c067cecdc75fcd572c5b4f5576423009eb17ac19250ed9a03ea32eb200.png",
      "small": "/ogp/630x630/blogs/hatena/fa9f00c067cecdc75fcd572c5b4f5576423009eb17ac19250ed9a03ea32eb200.png"
    }
  },
  {
    "name": "2018-10-21 00-01-38 RailsプロジェクトをVSCodeからデバックできるようにする",
    "publishedAt": "2018-10-21 00-01-38",
    "title": "RailsプロジェクトをVSCodeからデバックできるようにする",
    "description": "  この記事はVSCodeとgemのruby-debug-ide・debaseを用いてデバックできましたといった記事は多いのですがリモートデバッガーを利用する場合、環境周りなどその",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事は\">この記事は</h1>\n<p>VSCodeとgemのruby-debug-ide・debaseを用いてデバックできましたといった記事は多いのですがリモートデバッガーを利用する場合、環境周りなどその節々でなかなか実行できないというのが経験上多かったので参考程度にみていただければいいなぁと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2018-10-21 00-01-38 RailsプロジェクトをVSCodeからデバックできるようにする/0-md.gif\" alt=\"ezgif-1-d3ba8c59123c.gif\"></p>\n<h1 id=\"プロジェクト\">プロジェクト</h1>\n<ul>\n<li>Rails: 5.2.1</li>\n<li>Ruby: 2.5.3</li>\n<li>VSCode: 1.28.2</li>\n<li>VSCode Extension Ruby(rebornix.ruby): 0.20.0</li>\n<li>gem ruby-debug-ide: 0.6.1</li>\n<li>gem debase: 0.2.2</li>\n</ul>\n<h2 id=\"ソースコード\">ソースコード</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample\">https://github.com/igara/debug_sample</a></p>\n<p>MacOSから直接Rails起動した時と\nDockerから起動した時のデバックを検証したソースになります。</p>\n<h3 id=\"プロジェクト構成\">プロジェクト構成</h3>\n<img width=\"597\" alt=\"スクリーンショット 2018-10-20 22.46.50.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2018-10-21 00-01-38 RailsプロジェクトをVSCodeからデバックできるようにする/0-img-tag.png\">\n\n<p>後々DBなどのミドルウェアや別のアプリケーションの追加しやすいようにRails用のディレクトリを切って構成しました。</p>\n<h3 id=\"vscodeのデバック設定launchjson\">VSCodeのデバック設定(launch.json)</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/.vscode/launch.json\">.vscode/launch.json</a></p>\n<pre><code>{\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;Local - Listen for rdebug-ide&quot;,\n            &quot;type&quot;: &quot;Ruby&quot;,\n            &quot;request&quot;: &quot;attach&quot;,\n            &quot;cwd&quot;: &quot;${workspaceRoot}/rails&quot;,\n            &quot;remoteHost&quot;: &quot;0.0.0.0&quot;,\n            &quot;remotePort&quot;: &quot;1234&quot;,\n            &quot;remoteWorkspaceRoot&quot;: &quot;${workspaceRoot}/rails&quot;,\n            &quot;useBundler&quot;: true\n        },\n        {\n            &quot;name&quot;: &quot;Local Docker - Listen for rdebug-ide&quot;,\n            &quot;type&quot;: &quot;Ruby&quot;,\n            &quot;request&quot;: &quot;attach&quot;,\n            &quot;cwd&quot;: &quot;${workspaceRoot}/rails&quot;,\n            &quot;remoteHost&quot;: &quot;0.0.0.0&quot;,\n            &quot;remotePort&quot;: &quot;1234&quot;,\n            &quot;remoteWorkspaceRoot&quot;: &quot;/rails&quot;,\n            &quot;useBundler&quot;: true\n        }\n    ]\n}\n</code></pre>\n<ul>\n<li>Local - Listen for rdebug-ide<br>こちらはDockerを使用しないで直接Railsを起動した時の設定です。<br>一旦、下記のようにrailsディレクトリに移動してからbundle installを行いデバック用のrails起動コマンドを実行し、VSCodeのデバックを実行することができます。</li>\n</ul>\n<pre><code>$ cd rails\n$ bundle install --path vendor/bundle\n$ bundle exec rdebug-ide --host 0.0.0.0 --port 1234 --dispatcher-port 26162 -- bin/rails s\n</code></pre>\n<ul>\n<li>Local Docker - Listen for rdebug-ide<br>こちらはDockerを使用したRailsデバックの設定になります。<br>remoteWorkspaceRootがコンテナ先のディレクトリ階層になります。<br>下記はデバック用に作成したDockerを起動するコマンドで起動後VSCodeのデバックが可能になります。</li>\n</ul>\n<pre><code>$ docker-compose -f docker-compose.debug.yml up\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/docker-compose.debug.yml\">docker-compose.debug.yml</a>と<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/docker-compose.yml\">docker-compose.yml</a>の2つのファイルがありますが違いとして\nRails起動しようとするコマンドにrdebug-ideがあるかないかの違いと\nデバックで使用するポートを開けてるかの違いしかありません。</p>\n<h3 id=\"ruby-253-rails-521のデバックではまったところ\">Ruby 2.5.3 Rails 5.2.1のデバックではまったところ</h3>\n<p>下記のURLに現象と解決方法が書いてあったのですが</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://superuser.com/questions/1359747/is-it-possible-to-get-visual-studio-code-ide-debugging-of-apps-on-rails-5-2-to-w\">https://superuser.com/questions/1359747/is-it-possible-to-get-visual-studio-code-ide-debugging-of-apps-on-rails-5-2-to-w</a></p>\n<p>あまり解説を見てもちょっと理解しきれていないのですが\nRuby 2.5系のtrace命令を削除することによる5～10%の高速化の対応と\ngemのbootsnapによるRails起動時の最適化によるもので\nデバックがうまくいかないみたいなのがあるようです。</p>\n<p>一旦は<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/rails/config/boot.rb\">rails/config/boot.rb</a>を</p>\n<pre><code>ENV[&#39;BUNDLE_GEMFILE&#39;] ||= File.expand_path(&#39;../Gemfile&#39;, __dir__)\n\nrequire &#39;bundler/setup&#39; # Set up gems listed in the Gemfile.\n# require &#39;bootsnap/setup&#39; # Speed up boot time by caching expensive operations.\nunless ( ((&#39;2.5.0&#39;..&#39;2.5.3&#39;).include? RUBY_VERSION) &amp;&amp; defined?(Debugger) )\n  # see: https://superuser.com/questions/1359747/is-it-possible-to-get-visual-studio-code-ide-debugging-of-apps-on-rails-5-2-to-w\n  require &#39;bootsnap/setup&#39; # Speed up boot time by caching expensive operations.\nend\n</code></pre>\n<p>みたいにデバック時はbootsnapを使用しないようにしてデバックできるようにしています。</p>\n\n</div>",
    "link": "/blogs/qiita/RailsプロジェクトをVSCodeからデバックできるようにする",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/ecc38ab02ed8e64582314035e839674b1ebd91c0c8ff43fc93d89070fbebc536.png",
      "small": "/ogp/630x630/blogs/qiita/ecc38ab02ed8e64582314035e839674b1ebd91c0c8ff43fc93d89070fbebc536.png"
    }
  },
  {
    "name": "2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か",
    "publishedAt": "2018-09-23 00-00-00",
    "title": "しんどみの技術書典5 中間報告的な何か",
    "description": "  この記事の内容宣伝とかはバードくんやかんずさんが行っているのでultrabirdtech.hatenablog.comk-anz.hatenablog.com僕からは入稿までに",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容\">この記事の内容</h1>\n<p>宣伝とかはバードくんやかんずさんが行っているので<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ultrabirdtech.hatenablog.com/entry/2018/09/22/081957\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か/iframe-336fb5d1424ae4a4ae257b79c13e6c33163c5a15f3446ef6dcc648c299381ff8.png\" alt=\"IT井戸端会議Vol.1 完成しました！！！ #技術書典5 - ばぁど・うぉっちんぐ\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ultrabirdtech.hatenablog.com/entry/2018/09/22/081957\">ultrabirdtech.hatenablog.com</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://k-anz.hatenablog.com/entry/2018/09/21/230839\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か/iframe-c59eb80efb966a9f5b501d607cc764e6cbf9c7f6d164384d8eb11aacc167193a.png\" alt=\"技術書典５(2018／10／8開催)で合同誌を出します！ - かんずねっと\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://k-anz.hatenablog.com/entry/2018/09/21/230839\">k-anz.hatenablog.com</a></p>\n<p>僕からは入稿までにどういったことを行ったのかという報告をしたいと思います。  </p>\n<h1 id=\"行ったこと\">行ったこと</h1>\n<h2 id=\"サークル名の決定\">サークル名の決定</h2>\n<p>サークル名の候補としてメンバーの共通点から決めようというのがありました。  </p>\n<p>色々あったのですが身内ネタが濃すぎ・喧嘩を売り過ぎてるネーミングだったという自粛の点があり、生き残った候補の<strong>shin・DO・meeee</strong>にしたというのがあります。<br>「<em>みんな なんらかの業（カルマ）とかしんどみあるでしょ？</em>」<br>意味とかは宣伝のブログに記載しているので割愛します。<br>気付かれている方々もいるかもしれませんが、  </p>\n<p>技術書典5のサークルリスト上で<strong>shin</strong>じゃなくて<strong>sin</strong>になってるあれは  </p>\n<p>スペルまで明確に決めていない時に先に登録してしまった名残で、  </p>\n<p>間違えるのもsin（罪）だなというの感じて残したまましております。  </p>\n<h2 id=\"サークルカットの作成\">サークルカットの作成</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://techbookfest.org/event/tbf05/circle/49050001\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か/iframe-9cd1ad19a3ad55914b522456f99a4d2e77ca6f559cbcefd8f00ac770b3a33d4d.png\" alt=\"技術書典5：sin・DO・meeee 詳細\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://techbookfest.org/event/tbf05/circle/49050001\">techbookfest.org</a></p>\n<p>技術書典5の詳細にある画像は別のプロのもきちくんに作成していだたきました。  </p>\n<p>なんでああなったのかの図にするとこれしかない案からデフォルメされた画像を作ってくれました。  </p>\n<img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か/0-img-tag.png\" alt=\"f:id:igara1119:20180923174130p:plain\" title=\"f:id:igara1119:20180923174130p:plain\" class=\"hatena-fotolife\" itemprop=\"image\">\n爆誕\n\n  \n<p>PSDデータのレイヤー見ると細かい下書きの非表示レイヤーが残ってたり、  </p>\n<p>画像作成してと依頼したのも直近なのにも関わらずに対応していただいて  </p>\n<p>本当にありがとうございました。  </p>\n<h2 id=\"先駆者の意見を聞いてみること\">先駆者の意見を聞いてみること</h2>\n<p>初めて出展する人向けの勉強会があったので参加しました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://techbookfest.connpass.com/\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か/iframe-00327cf58f9cc9076b95232c6c9890bcc0554cb3c2acaac01799e0ff86cc131b.png\" alt=\"技術書典\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://techbookfest.connpass.com/\">techbookfest.connpass.com</a></p>\n<p>その中で知ったこととして  </p>\n<ul>\n<li>確定申告方法</li>\n<li>印刷所</li>\n<li>作成方法</li>\n<li>ロイヤリティフリー素材の扱いについて\n（レビューの時にいらすとやの絵があるなぁと思ったけど規約内だったのでOKそうとか気付きがあった</li>\n<li>過去の現場の声\nなど他のサークルの人から聞けたというのがあるので</li>\n</ul>\n<p>感謝だなぁと思っています。  </p>\n<h2 id=\"本の作成手順的なこと\">本の作成手順的なこと</h2>\n<h3 id=\"本のタイトルの決定\">本のタイトルの決定</h3>\n<p>みんな別々のテーマで書いていたので汎用性あるようなタイトルにならざるを得なかったです。  </p>\n<h3 id=\"執筆内容\">執筆内容</h3>\n<p>モチベーション保って書けることを重視し各自自由にテーマを決めて書くようにしました。  </p>\n<p>途中でテーマ変えたりとかもありました。  </p>\n<h3 id=\"執筆環境\">執筆環境</h3>\n<p>これ完全に僕の圧でRe:VIEWで作成しましょうという風にしてしまったなぁと負い目を感じてますが、Re:VIEWで作成しました。  </p>\n<p>ただRe:VIEWにしたことによるCIとの連携や、  </p>\n<p>GitLab上でのMerge Requestのレビューが上手くいきましたので結果的によかったと思います。<br>今回の環境のサンプルとしてこんなものを作成しました。<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gitlab.com/igara/review-template\"><img src=\"https://raw.githubusercontent.com/igara/hatenablog-export\n/master/data/igara1119/2018-09-23 00-00-00 しんどみの技術書典5 中間報告的な何か/iframe-46328fba7847469c16cbd3b1dc96d2d172b426d9232134d7acc4fbba8958e82e.png\" alt=\"Syo Igarashi ／ review-template\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gitlab.com/igara/review-template\">gitlab.com</a></p>\n<p>CI上で行わせたこととして  </p>\n<ul>\n<li>textlintによる簡単な文章構文の静的解析</li>\n<li>電子書籍用のPDF作成</li>\n<li>印刷用のPDF作成（本文のみのPDFにして隠し（通し）ノンブルを追加、ページ総数が奇数の時は空白ページをうめる</li>\n<li>ビルド結果をDiscordに通知\nMerge Requestのレビューついては</li>\n</ul>\n<p>今までこのメンバーで議論をするということがあまりなかったので楽しかったです。  </p>\n<p>（途中、議論したがり欲でようわからん難癖議論をしてすみませんでした。<br>勉強会でも議論になっていたことですが、  </p>\n<p>レビューしてくれる人がいなくてどうしようというのがある中で  </p>\n<p>僕達のサークルでは相互にレビューしてくれる人がいるというのはありがたいことだと思いました。  </p>\n<h3 id=\"しんどみあったとこ\">しんどみあったとこ</h3>\n<ul>\n<li>マージン調整とかでLaTexの知見が必要になったところ\n（CSSやっていき組だったらまた別の世界があったのかもしれない</li>\n<li>textlintででたerrorをignoreするか議論\n（固有名詞として存在するけど長い漢字の単語なのでerrorが出るとか</li>\n<li>PDF出力すると半角の_（アンダースコア）がなんかでかくみえる\n（未解決<h2 id=\"入稿手順的なこと\">入稿手順的なこと</h2>\n</li>\n</ul>\n<h3 id=\"印刷所の決定\">印刷所の決定</h3>\n<p>日光企画さんにしました。  </p>\n<p>理由としては<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.nikko-pc.com/only-event/backup.html\">http://www.nikko-pc.com/only-event/backup.html</a>とかのページを見ると入稿から本が納品される日の目安が見れて良いというのと  </p>\n<p>技術書典のバックアップ印刷所でもあるので本の受け取りが会場でできて楽そうだったからです。  </p>\n<h3 id=\"入稿日の決定\">入稿日の決定</h3>\n<p>早めに印刷所に入稿すると割引が適応されるので当初は50%引きの日に入稿しようとしていました。  </p>\n<h3 id=\"入稿の仕方・添削をしてもらう\">入稿の仕方・添削をしてもらう</h3>\n<p>日光企画さんにお伺いし、いただいた指摘として  </p>\n<ul>\n<li>出力された本文がB5サイズのものではない\n（今回はB5想定ではない本文の中心から無理やりB5サイズに適応した\n   Re:VIEWの設定でtexdocumentclass: [&quot;jsbook&quot;, &quot;uplatex,oneside,b5j&quot;] を忘れていた</li>\n<li>本文全体に通しノンブルがない</li>\n<li>本の厚さに適応した表紙の設置がされていない\n（もきちくんに依頼してたけど細かい指示内容なしで\n日光企画さんのテンプレートに表紙載っけてとしか言わなかったので反省してます。\nあとB5で入稿できそうな雰囲気がなかったので別のフォーマットの提示とか\nかわいそうな事させたなぁと思っています。<h3 id=\"入稿申し込み・入金\">入稿申し込み・入金</h3>\n</li>\n</ul>\n<p>申し込みした結果  </p>\n<ul>\n<li>B5</li>\n<li>34ページ（表紙4ページ + 本文30ページ</li>\n<li>50冊</li>\n<li>左綴じ</li>\n<li>平綴じ</li>\n<li>クリアPP（表紙の加工</li>\n<li>本文用紙 上質90</li>\n<li>オンデマンド スミ</li>\n<li>割引適応40%\n計15,180円 になりました。  <h1 id=\"さいごに\">さいごに</h1>\n</li>\n</ul>\n<p>様々な方の知見を借りる事で進める事ができたなぁと思います。<br>当日寝坊しないようにがんばろう  </p>\n\n</div>",
    "link": "/blogs/hatena/しんどみの技術書典5 中間報告的な何か",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/b6c5dbbc2adcd37be7285b5f7b5a1c9f7fde9f7f0d187d6cdc5697646e7e32a0.png",
      "small": "/ogp/630x630/blogs/hatena/b6c5dbbc2adcd37be7285b5f7b5a1c9f7fde9f7f0d187d6cdc5697646e7e32a0.png"
    }
  },
  {
    "name": "2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法",
    "publishedAt": "2017-12-11 19-06-17",
    "title": "Headless Chromeを使用した画像収集方法",
    "description": "  はじめに &amp; モチベーションまわりこの記事では更読みがあるような一覧画面での画像収集方法について一部記載します。更読みがある一覧画面とは言わずもがなという感じもしますが",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"はじめに--モチベーションまわり\">はじめに &amp; モチベーションまわり</h1>\n<p>この記事では\n<strong>更読みがあるような一覧画面での画像収集方法</strong>\nについて一部記載します。</p>\n<p>更読みがある一覧画面とは言わずもがなという感じもしますが</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法/0-md.gif\" alt=\"1.gif\"></p>\n<p>なんかボタンを押したらさらに情報が出てきたり、</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法/1-md.gif\" alt=\"2.gif\"></p>\n<p>画面の一番下に行ったらさらに画像が読み込まれるような画面です。</p>\n<p>動機としては最近やっぱり独自でデータを所有していること前提でビジネス動いてるなというのあり、\n最低限のデータ収集方法を身に付けたいというのがありました。</p>\n<p>その中でデータ収集の中で画像を集めることというのが\n今の僕の趣味に一番マッチしてたのでやってみたという話です。</p>\n<h2 id=\"なぜheadless-chromeを使った画像収集を行おうとしたのか\">なぜHeadless Chromeを使った画像収集を行おうとしたのか</h2>\n<p>理由は多々あって</p>\n<ul>\n<li><p>最近はSPA(シングルページアプリケーション)なページが多い為、\nどうしてもブラウザの機能使ったデータ取得がしたかった。</p>\n</li>\n<li><p>某SNSでAPIによる画像URL取得できるが、\n某他サイトではAPIがオープン公開されてない or\n<del>APIの仕様を調べるのが面倒</del>\nなのでブラウザに見えるありのままの一覧情報を<del>こそっと</del>\nごそっと持ってきたかったから。</p>\n</li>\n</ul>\n<h2 id=\"結果的にできたもの\">結果的にできたもの</h2>\n<p><strong>即席で画像を集めたかったのでコードの内容は煩雑です。お許しください。</strong></p>\n<p>使い方としてこちらのREADME参照\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki\">https://github.com/igara/image_shiki</a></p>\n<p>puppeteerを使用した例\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/a115335016cd3d301daf1e959ed4fa3d0bbe976d/puppeteer.js\">https://github.com/igara/image_shiki/blob/a115335016cd3d301daf1e959ed4fa3d0bbe976d/puppeteer.js</a></p>\n<p>chrome-launcherとchrome-remote-interfaceを使用した例\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/aa8b39d0a74ee10e780cd8b40a3e82cb0b1abdf5/chrome_launcher.js\">https://github.com/igara/image_shiki/blob/aa8b39d0a74ee10e780cd8b40a3e82cb0b1abdf5/chrome_launcher.js</a></p>\n<p>最初はchrome-launcherとchrome-remote-interfaceを使って画像取得ツール作成してましたが、\nとある噂でpuppeteerの方が楽という強い言葉を聞き、puppeteerも使用してみました。</p>\n<p><strong>本記事の内容もpuppeteerを中心に寄せて記載します。</strong></p>\n<p>比較してみて一部の <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/\">Chrome DevTools Protocol</a> による機能の関数化がpuppeteerではされていなかったりしますが下記のコードで使用することができます。</p>\n<pre><code>page._client.send(&#39;使用したいChrome DevTools Protocolメソッド名&#39;, {パラメータ});\n</code></pre>\n<p>puppeteerで関数化されていないChrome DevTools ProtocolというのはだいたいがEXPERIMENTAL（試験的な）と記載されているものが多いです。</p>\n<p>後記で出てくる<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>もEXPERIMENTALなものの１つです。</p>\n<h1 id=\"僕のheadless-chromeを用いた画像収集方法\">僕のHeadless Chromeを用いた画像収集方法</h1>\n<p>大雑把に手順を公開すると</p>\n<ol>\n<li>Headless Chromeでみている画面を<br>コードでスクロール or 「もっと見る」リンクを押下して追加の画像を読み込む</li>\n<li>Chrome DevTools Protocolの１つである<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>を使用して<br>画像のリソースを取得する</li>\n<li>画像を保存する</li>\n</ol>\n<p>な手順で画像を集めました。</p>\n<p><strong>先にこの収集方法の欠点をいうと</strong></p>\n<ul>\n<li>Web画面のデザイン変更を行われると大量の画像取得できなくなる</li>\n<li>Chrome起動やっぱりメモリいっぱい取られる</li>\n</ul>\n<p>などなどありますが、\n上記の手順についてさらに詳しく説明していきたいと思います。</p>\n<h2 id=\"1-headless-chromeでみている画面をコードでスクロール-or-「もっと見る」リンクを押下して追加の画像を読み込む\">1. Headless Chromeでみている画面をコードでスクロール or 「もっと見る」リンクを押下して追加の画像を読み込む</h2>\n<h3 id=\"スクロール方法\">スクロール方法</h3>\n<p>puppeteerによるHeadless Chromeのスクロール方法についてのコード部分\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L85-L93\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L85-L93</a></p>\n<p>ここで注意することはスクロールの処理が非同期的なものなので\nawait / async ちゃんとしてないと\n無駄にスクロールしてるけど画像あまり拾えてないとなってしまいます。</p>\n<h3 id=\"「もっと見る」リンクの押下方法\">「もっと見る」リンクの押下方法</h3>\n<p>puppeteerによるHeadless Chromeのリンク押下方法についてのコード部分\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L80-L81\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L80-L81</a></p>\n<p>こちらのボタンの指定は <code>page.$</code> を使用しましたが <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.mozilla.org/ja/docs/Web/API/Document/querySelector\">document.querySelector</a> のようなHTMLのセレクタ・クラスなどの指定からHTMLElementを指定することができます。</p>\n<h2 id=\"2-chrome-devtools-protocolの１つであるpagegetresourcetreeを使用して画像のリソースを取得する\">2. Chrome DevTools Protocolの１つである<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>を使用して画像のリソースを取得する</h2>\n<p>先ほどから<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>という単語だけ先行して出てきていますが\nこいつは何なのかというとChromeの開発ツールのNetworkタブで表示されるリソースを取得することができます。</p>\n<p>どうゆうことかというと</p>\n<img width=\"1290\" alt=\"スクリーンショット 2017-12-11 17.21.23.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法/0-img-tag.png\">\n\n<p>赤枠の箇所の情報を全て取得できるわけです。\n当然不要なリソースも存在するかと思いますので任意で取り除いたりすると良いかと思います。</p>\n<p>コードとしてこちらになります。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L112-L114\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L112-L114</a></p>\n<h2 id=\"3-画像を保存する\">3. 画像を保存する</h2>\n<p>Page.getResourceTreeで画像のURLを取得できるわけですが\n(http|https)〜〜〜から始まるURLのパターンと\ndata:image〜〜〜から始まるパターンがありますので\nそれぞれのパターンでの画像データ取得について説明します。</p>\n<p>ソース上では趣味上の理由により謎のjpgに変換する処理がありますが\n気にしないでください。</p>\n<h3 id=\"httphttps〜〜〜から始まるurlのパターン\">(http|https)〜〜〜から始まるURLのパターン</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L130-L132\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L130-L132</a></p>\n<p>レスポンスからバイナリデータを引っ張ってくる処理を行なっています。</p>\n<h3 id=\"dataimage〜〜〜から始まるパターン\">data:image〜〜〜から始まるパターン</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L127-L128\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L127-L128</a></p>\n<p>base64エンコード文字列の部分だけを持ってきて再度バイナリにする処置を行なっています。</p>\n<h3 id=\"あとは取得したバイナリデータをファイル書き込みするだけ\">あとは取得したバイナリデータをファイル書き込みするだけ</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L143-L143\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L143-L143</a></p>\n<p>すみません。ファイル名適当すぎました。</p>\n<p>以上で僕の画像収集方法についての説明になります。</p>\n<h1 id=\"さいごに--やってみた感想\">さいごに &amp; やってみた感想</h1>\n<p>アドベントカレンダーやらなきゃという圧に屈して記載したのですが\nなかなかこの話題は記載していて罪悪感があるというのか...\nただ遊びのための技術を得る楽しさがありました。</p>\n<p>後日のアドベントカレンダーも楽しみですね!</p>\n\n</div>",
    "link": "/blogs/qiita/Headless Chromeを使用した画像収集方法",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/06a3c0b2e061354a1613fae82eb1466b06f56730259b2fac160bc066e3c03d95.png",
      "small": "/ogp/630x630/blogs/qiita/06a3c0b2e061354a1613fae82eb1466b06f56730259b2fac160bc066e3c03d95.png"
    }
  },
  {
    "name": "2017-11-09 00-00-00 IT Japan Expo 2017 秋 2017／11／9",
    "publishedAt": "2017-11-09 00-00-00",
    "title": "IT Japan Expo 2017 秋 2017／11／9",
    "description": "  例のごとくリンク参照https://gist.github.com/igara/60d89a5fa6e86314eed8d48c9a225027  ",
    "body": "<div class=\"markdown-body\">\n  <p>例のごとくリンク参照<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gist.github.com/igara/60d89a5fa6e86314eed8d48c9a225027\">https://gist.github.com/igara/60d89a5fa6e86314eed8d48c9a225027</a>  </p>\n\n</div>",
    "link": "/blogs/hatena/IT Japan Expo 2017 秋 2017／11／9",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/50f0a40bc3ab889e87d1a469dc5ca13f7380f052ce346159c9b7af96b4280073.png",
      "small": "/ogp/630x630/blogs/hatena/50f0a40bc3ab889e87d1a469dc5ca13f7380f052ce346159c9b7af96b4280073.png"
    }
  },
  {
    "name": "2017-09-03 00-00-00 OSC Chiba 2017 Fall レポート的な何か",
    "publishedAt": "2017-09-03 00-00-00",
    "title": "OSC Chiba 2017 Fall レポート的な何か",
    "description": "  https://gist.github.com/igara/c14f42217531365085f0dafda6c8a8ee様々な人の死生観がみれた  ",
    "body": "<div class=\"markdown-body\">\n  <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://gist.github.com/igara/c14f42217531365085f0dafda6c8a8ee\">https://gist.github.com/igara/c14f42217531365085f0dafda6c8a8ee</a><br>様々な人の死生観がみれた  </p>\n\n</div>",
    "link": "/blogs/hatena/OSC Chiba 2017 Fall レポート的な何か",
    "ogp": {
      "large": "/ogp/1200x630/blogs/hatena/451d7fcd69c75b2f549245946ff3554092e87aff1968bcf8bb0ed0b8a3bfa3a6.png",
      "small": "/ogp/630x630/blogs/hatena/451d7fcd69c75b2f549245946ff3554092e87aff1968bcf8bb0ed0b8a3bfa3a6.png"
    }
  },
  {
    "name": "2017-09-02 14-00-57 取得したドメインでメールサーバ構築",
    "publishedAt": "2017-09-02 14-00-57",
    "title": "取得したドメインでメールサーバ構築",
    "description": "  内容何番煎じかになるがお名前.comで入手したドメインを個人で作成したメールサーバに結びつけるためのメモ追加でGmail・スマホアプリにも受信する設定を記載モチベーションメール",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>何番煎じかになるが\nお名前.comで入手したドメインを個人で作成したメールサーバに結びつけるためのメモ\n追加でGmail・スマホアプリにも受信する設定を記載</p>\n<h1 id=\"モチベーション\">モチベーション</h1>\n<p>メールでやりとりすること実際そんなにないが\n開発とかでSNSアカウントをすぐに作りたいとき用にあれば良いかという程度のモチベーション\n後に後付け理由を記載している</p>\n<h2 id=\"個人のメールアドレスを得たい\">個人のメールアドレスを得たい</h2>\n<p>つい最近キャリアから格安スマホの会社に乗り換えた際に今まで使用していたメールアドレスを失効した。\n乗り換え先の会社のドメインによるメールアドレス追加オプションというのもあったが\n自分のドメイン所有してたのでどうせなら自分のドメインのメールアドレス作っちゃおうかという気持ちになった。</p>\n<h2 id=\"pcでもスマホでも容易に同じメールアドレスでやりとりしたい\">PCでもスマホでも容易に同じメールアドレスでやりとりしたい</h2>\n<p>そうそうないがMNPで機種乗り換えした時、\nメールアドレス変わったので〜〜〜というやりとりが不毛に思えてきた。\n携帯なくした時でもPCから連絡できる手段得たいというのもある。</p>\n<h1 id=\"ざっくりとしたネットワーク図\">ざっくりとしたネットワーク図</h1>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-09-02 14-00-57 取得したドメインでメールサーバ構築/0-md.png\" alt=\"syonet_network.png\"></p>\n<p>Webサーバとは分離してメールサーバを作成している\nメールサーバ上では受信のPOPと送信のSMTPの両方を起動させている</p>\n<h1 id=\"ざっくりとした構築参考\">ざっくりとした構築参考</h1>\n<p>下記のリンクを順番に実行していく</p>\n<p>メールサーバー構築(Postfix+Dovecot)\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://centossrv.com/postfix.shtml\">https://centossrv.com/postfix.shtml</a></p>\n<p>メールサーバー間通信内容暗号化(Postfix+Dovecot+OpenSSL)\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://centossrv.com/postfix-tls.shtml\">https://centossrv.com/postfix-tls.shtml</a></p>\n\n</div>",
    "link": "/blogs/qiita/取得したドメインでメールサーバ構築",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/f5f99e81e306760f8a392cbe4cc3f5f24bf7d42ace93ea509e716ac2de41038d.png",
      "small": "/ogp/630x630/blogs/qiita/f5f99e81e306760f8a392cbe4cc3f5f24bf7d42ace93ea509e716ac2de41038d.png"
    }
  },
  {
    "name": "2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -",
    "publishedAt": "2017-01-14 17-36-17",
    "title": "RoBoHoN開発Tip - ADB認識するまで -",
    "description": "  この記事ではRoBoHoN開発をmacで行った時に公式で公開されているサンプルコードをビルドして実行するまでの手順について記載する準備物Android Studio 2.1.1",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事では\">この記事では</h1>\n<p>RoBoHoN開発をmacで行った時に公式で公開されているサンプルコードをビルドして実行するまでの手順について記載する</p>\n<h1 id=\"準備物\">準備物</h1>\n<p>Android Studio 2.1.1\nADB DebugできるUSB mini端子\n※macですのでADB Driverのインストールは不要</p>\n<h1 id=\"robohonをusb経由でアプリインストールできるようにする\">RoBoHoNをUSB経由でアプリインストールできるようにする</h1>\n<p>よくあるAndroidのデバッグモード切り替えの方法と同じだった  </p>\n<ol>\n<li>ロボホンの背中から「設定」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/0-md.jpeg\" alt=\"IMG_1217.JPG\"></li>\n<li>「端末情報」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/1-md.jpeg\" alt=\"IMG_1218.JPG\"></li>\n<li>「ビルド番号」を複数回押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/2-md.jpeg\" alt=\"IMG_1219.JPG\">\nこの時点でRoBoHoNは開発モードになります<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/3-md.jpeg\" alt=\"IMG_1220.JPG\"></li>\n<li>「設定」画面から「その他」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/4-md.jpeg\" alt=\"IMG_1221.JPG\"></li>\n<li>「開発者向けオプション」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/5-md.jpeg\" alt=\"IMG_1222.JPG\"></li>\n<li>「On」にする<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/6-md.jpeg\" alt=\"IMG_1223.JPG\"></li>\n<li>「USBデバッグ」をチェックする\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/7-md.jpeg\" alt=\"IMG_1224.JPG\"></li>\n</ol>\n<p>この手順でADBデバイスとして認識されるようになり、Android Studioから自作アプリインストールができるようになる\n次回はアプリ作成</p>\n\n</div>",
    "link": "/blogs/qiita/RoBoHoN開発Tip - ADB認識するまで -",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/79cddf69f5ffc96145ff9d0a966be6b27d38dc282a7c97053add4056c74a7ad5.png",
      "small": "/ogp/630x630/blogs/qiita/79cddf69f5ffc96145ff9d0a966be6b27d38dc282a7c97053add4056c74a7ad5.png"
    }
  },
  {
    "name": "2016-09-22 22-01-36 Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ",
    "publishedAt": "2016-09-22 22-01-36",
    "title": "Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ",
    "description": "  この記事の内容について前回UnityでSwiftで書いたiOSのネイティブコードを使う方法について記載しました。UnityのネイティブコードをSwiftで書こうとした時にはまっ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容について\">この記事の内容について</h1>\n<p>前回UnityでSwiftで書いたiOSのネイティブコードを使う方法について記載しました。</p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/68b4d3efd53c118339b3\">UnityのネイティブコードをSwiftで書こうとした時にはまったこと</a></li>\n</ul>\n<p>（実際やってみるとUnityでビルドする度にXcode上の設定が戻ってしまって辛い問題が...）</p>\n<p>その後Androidのネイティブコードも書いてみてiOSとAndroidのプロジェクト構成に違いが出たなぁということでメモ書きです。</p>\n<h1 id=\"対象のプロジェクトの簡単な説明\">対象のプロジェクトの簡単な説明</h1>\n<ul>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55\">Bariiiii</a>\nAssets、ProjectSettingsは\nUnityプロジェクトで使用されるものです。</p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin\">CreateBariiiiiAndroidNativePlugin</a><br>  このプロジェクトはAndroid Studioで作成されており、<br>  このプロジェクトでビルドで作成されたjarファイルやaarファイルをGradlew経由で<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/Android\">/Assets/Plugins/Android</a>にimportさせます。</li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiIOSNativePlugin\">CreateBariiiiiIOSNativePlugin</a><br>  このプロジェクトはXcodeで作成されますが、<br>  対象のネイティブコードはUnity管理のディレクトリ<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii\">/Assets/Plugins/iOS/</a>に直接配置します。この構成を実現させるにはXcodeプロジェクト上のファイルと実ファイルの参照がちゃんとリンクさせる必要があります。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"補足：そもそもunityによるiosとandroidのビルドの違い\">補足：そもそもUnityによるiOSとAndroidのビルドの違い</h2>\n<ul>\n<li><p>iOS\n一旦Xcodeのプロジェクトが作成されて\nXcode経由でiOS端末にアプリインストールします。</p>\n</li>\n<li><p>Android\nUnityの設定でAndroid SDKのパス設定が正常ならば\nUnityのビルドで直接Android端末にアプリインストールします。</p>\n</li>\n</ul>\n<h1 id=\"androidのプロジェクト\">Androidのプロジェクト</h1>\n<h2 id=\"ネイティブコードの配置先\">ネイティブコードの配置先</h2>\n<p>Layout XML、コードなどはよくあるAndroidプロジェクトの配置と同じです。</p>\n<h2 id=\"androidmanifestxml\">AndroidManifest.xml</h2>\n<p>使用したいAndroidプロジェクトのActivityや必要な権限（permission）はUnityプロジェクト側のAndroidManifest.xmlに記載します。\n理由としてはUnityビルド中に他のaarファイルの中にあるAndroidManifest.xmlがマージを行いコンフリクトを起こす原因になるからです。</p>\n<ul>\n<li>Androidプロジェクト側<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/src/main/AndroidManifest.xml\">AndroidManifest.xml</a></li>\n</ul>\n<pre><code class=\"language-/CreateBariiiiiAndroidNativePlugin/app/src/main/AndroidManifest.xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;work.syonet.bariiiii&quot;&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>\n<ul>\n<li>Unityプロジェクト側<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/Android/AndroidManifest.xml\">AndroidManifest.xml</a></li>\n</ul>\n<pre><code class=\"language-/Assets/Plugins/Android/AndroidManifest.xml\">&lt;manifest\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;uses-sdk android:minSdkVersion=&quot;14&quot; android:targetSdkVersion=&quot;23&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot;/&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;application\n        android:theme=&quot;@style/UnityThemeSelector&quot;\n        android:icon=&quot;@drawable/app_icon&quot;\n        android:label=&quot;@string/app_name&quot;&gt;\n        &lt;activity\n            android:name=&quot;com.unity3d.player.UnityPlayerNativeActivity&quot;\n            android:configChanges=&quot;fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen&quot;&gt;\n            &lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;unity&quot; /&gt;\n            &lt;meta-data android:name=&quot;unityplayer.ForwardNativeEventsToDalvik&quot; android:value=&quot;true&quot; /&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity android:name=&quot;work.syonet.bariiiii.BarcodeScanAndroidActivity&quot;\n            android:label=&quot;@string/app_name&quot;\n            android:configChanges=&quot;keyboard|keyboardHidden|orientation&quot;\n            android:exported=&quot;true&quot;\n            android:permission=&quot;android.permission.INTERNET&quot;&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>\n<h2 id=\"buildgradle\">build.gradle</h2>\n<ul>\n<li>Androidプロジェクト直下のbuild.gradle<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/build.gradle\">build.gradle</a></li>\n</ul>\n<pre><code class=\"language-/CreateBariiiiiAndroidNativePlugin/build.gradle\">// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = &#39;1.0.3&#39;\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;com.android.tools.build:gradle:2.1.0&#39;\n        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;\n        classpath &quot;org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version&quot;\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n</code></pre>\n<p>ちょっとkotlin使いたかったのでその設定ぐらいしかしていません  </p>\n<ul>\n<li>Androidプロジェクト直下のapp/build.gradle<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/build.gradle\">build.gradle</a></li>\n</ul>\n<pre><code class=\"language-/CreateBariiiiiAndroidNativePlugin/app/build.gradle\">apply plugin: &#39;com.android.library&#39;\napply plugin: &#39;kotlin-android&#39;\napply plugin: &#39;kotlin-android-extensions&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &quot;24.0.2&quot;\n\n    defaultConfig {\n        minSdkVersion 14\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n        multiDexEnabled true\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n    sourceSets {\n        main.java.srcDirs += &#39;src/main/kotlin&#39;\n    }\n}\n\n// UnityのAndroidプラグインフォルダに移動させる\ntask copyLibs &lt;&lt; {\n    configurations.compile.each { lib -&gt;\n        if (lib.path.startsWith(&quot;${projectDir}/libs&quot;)) {\n            // libs内のものはコピー対象外\n            return\n        }\n        copy {\n            from lib.path\n            into &#39;../../Assets/Plugins/Android&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;\n    compile &#39;com.google.android.gms:play-services-vision:9.4.0&#39;\n    // Unityのプラグイン一覧には含めない\n    provided files(&#39;/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Development/Classes/classes.jar&#39;)\n}\n\n// このプロジェクトをaar化させる\ntask exportAar(type: Copy, dependsOn: assembleRelease) {\n    from(&#39;build/outputs/aar/&#39;)\n    into(&#39;../../Assets/Plugins/Android/&#39;)\n    include(&#39;app-release.aar&#39;)\n    rename(&#39;app-release.aar&#39;, &#39;bariiiii.aar&#39;)\n}\n\n\nandroid.libraryVariants.all { variant -&gt;\n    variant.outputs.each { output -&gt;\n        output.packageLibrary.exclude(&#39;libs/classes.jar&#39;)\n    }\n}\n</code></pre>\n<p>このbuild.gradleファイルで注目する点として  </p>\n<ul>\n<li>apply plugin: &#39;com.android.library&#39;<br>com.android.applicationから変更</li>\n<li>task copyLibs<br>Google Play ServicesなどAndroidプロジェクトで使用していた<br>ライブラリをUnity管理下にするためのバッチ</li>\n<li>task exportAar<br>今回作成したAndroidプロジェクトをaarファイル化しUnity管理下にするバッチ<br>aarファイル化させた理由としてはAndroidプロジェクト内にあるLayout XMLやstring.xmlなどもまとめてくれるからです。</li>\n<li>provided files(&#39;/Applications/Unity/〜〜〜〜<br>Androidプロジェクト内のコードでUnityで提供されているUnitySendMessageを使用したかったからです。<br>使用していた箇所として<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/src/main/java/work/syonet/bariiiii/BarcodeCameraFragment.kt\">これ</a>になります。<br>provided filesを入れないとtask copyLibsを実行した時にUnityのクラスファイルを二重に入れることになり、ビルドが通らなくなります。</li>\n</ul>\n<h3 id=\"ビルド実行\">ビルド実行</h3>\n<pre><code>gradlew app:copyLibs &amp;&amp; gradlew app:exportAar\n</code></pre>\n<h2 id=\"androidバージョンの指定の統一\">Androidバージョンの指定の統一</h2>\n<p>build.gradlewやAndroidManifest.xml、UnityEditor上で指定されているminSdkVersionやtargetSdkVersionはバラツキがないように設定</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-09-22 22-01-36 Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ/0-md.png\" alt=\"スクリーンショット 2016-09-22 21.02.59.png\"></p>\n<h2 id=\"cからandroidプロジェクトのコードを動かすようにする\">C#からAndroidプロジェクトのコードを動かすようにする</h2>\n<p>ここのやり方は公式や他のQiitaの記事でも書いてあったりしますので詳しい説明は割愛します。\nActivityLauncher.javaというkotlinじゃなくてJavaのファイルにした理由ですが特にありません。\n強いて理由とすればC#とJavaって書き方似てるなぁという愉悦に浸るぐらいの程度のものです。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Screen/BarcodeScanScreen/Component/CameraRawImageComponent.cs\">CameraRawImageComponent.cs</a></p>\n<pre><code class=\"language-CameraRawImageComponent.cs\">AndroidJavaClass unityPlayer = new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;); \n        AndroidJavaObject currentUnityActivity = unityPlayer.GetStatic&lt;AndroidJavaObject&gt;(&quot;currentActivity&quot;); \n\n        AndroidJavaClass plugin = new AndroidJavaClass(&quot;work.syonet.bariiiii.ActivityLauncher&quot;); \n        plugin.CallStatic(&quot;launchActivity&quot;, &quot;work.syonet.bariiiii.BarcodeScanAndroidActivity&quot;, currentUnityActivity );\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/src/main/java/work/syonet/bariiiii/ActivityLauncher.java\">ActivityLauncher.java</a></p>\n<pre><code class=\"language-ActivityLauncher.java\">package work.syonet.bariiiii;\n\nimport android.app.Activity;\nimport android.content.Intent;\n\n/**\n * C#のコードからAndroidのアクティビティにつなげるクラス\n */\npublic class ActivityLauncher {\n\n    /**\n     * AndroidのアクティビティにIntentを発行する\n     * @param type 起動したいアクティビティ\n     * @param m_activity Unity自身のアクティビティ\n     */\n    public static void launchActivity(String type, final Activity m_activity) {\n        Intent i = new Intent();\n        i.setAction(Intent.ACTION_MAIN);\n        i.setClassName(m_activity, type);\n\n        // 画面遷移を行う\n        m_activity.startActivity(i);\n    }\n}\n</code></pre>\n<h1 id=\"iosのプロジェクト\">iOSのプロジェクト</h1>\n<h2 id=\"ネイティブコードの配置先-1\">ネイティブコードの配置先</h2>\n<p>この記事の冒頭にもありましたが/Assets/Plugins/iOS/下に配置します。</p>\n<blockquote>\n<p>このプロジェクトはXcodeで作成されますが、<br>対象のネイティブコードはUnity管理のディレクトリ<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii\">/Assets/Plugins/iOS/</a>に直接配置します。この構成を実現させるにはXcodeプロジェクト上のファイルと実ファイルの参照がちゃんとリンクさせる必要があります。</p>\n</blockquote>\n<p>iOSにもLayoutを構成するxibファイルやstoryboardなどInterface Builderで作成したもの達がありますがUnity上でも呼び出すことが可能で特別なIBの設定なども必要ありません。</p>\n<h3 id=\"実ファイルとxcodeプロジェクトをリンクさせる方法\">実ファイルとXcodeプロジェクトをリンクさせる方法</h3>\n<p>まず/Assets/Plugins/iOS/下に空のクラスファイルを作成します。\nあとはFinderからファイルをXcode上にドラッグアンドドロップしましょう。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-09-22 22-01-36 Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ/1-md.png\" alt=\"スクリーンショット 2016-09-22 21.20.35.png\"></p>\n<p>これでリンクされるようになります。</p>\n<h2 id=\"cからiosプロジェクトのコードを動かすようにする\">C#からiOSプロジェクトのコードを動かすようにする</h2>\n<p>ここのやり方もAndroid同様に公式や他のQiitaの記事でも書いてあったりしますので詳しい説明は割愛です。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.cs\">BarcodeScanIOS.cs</a></p>\n<pre><code class=\"language-/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.cs\">    [DllImport(&quot;__Internal&quot;)]\n    private static extern void barcordScanInit_ ();\n\n    public static void barcordScanInit () {\n        if (Application.platform != RuntimePlatform.OSXEditor) {\n            barcordScanInit_ ();\n        }\n    }\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.mm\">BarcodeScanIOS.mm</a></p>\n<pre><code class=\"language-/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.mm\">#pragma mark called by C#\n/**\n * MARK:Unity上で扱うViewController\n */\nextern UIViewController *UnityGetGLViewController();\n\nextern &quot;C&quot; {\n    void barcordScanInit_();\n}\n\n/**\n * MARK:C#からBarcodeIOSのクラスを呼び出す\n */\nvoid barcordScanInit_() {\n\n    UINib *nib = [UINib nibWithNibName:@&quot;BarcodeScanIOSScreen&quot; bundle:nil];\n    BarcodeScanIOS *barcode = [[nib instantiateWithOwner:nil options:nil] objectAtIndex:0];\n    [UnityGetGLViewController() presentViewController:barcode animated:YES completion:nil];\n}\n</code></pre>\n<h1 id=\"今後（今\">今後（今</h1>\n<p>Unityプロジェクトとネイティブコードプロジェクトのビルドを楽にできるようなツールを作成中\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/master/BuildTool\">https://github.com/igara/Bariiiii/tree/master/BuildTool</a>\nもっとiOSのビルドが楽になるようなものを作っていきたいです。</p>\n<h1 id=\"参考リンク\">参考リンク</h1>\n<ul>\n<li>公式<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.unity3d.com/ja/current/Manual/PluginsForAndroid.html\">Unity - マニュアル_ Android 用のプラグインをビルド</a></li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.unity3d.com/ja/current/Manual/PluginsForIOS.html\">Unity - マニュアル_ iOS 用のプラグインをビルド</a></li>\n</ul>\n</li>\n<li>UnityとAndroidネイティブの連携：UnityからネイティブのActivityを呼び出す[part1] _ 未知の路<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://redfreshet.com/2015/08/24/unity_android_link_3/\">http://redfreshet.com/2015/08/24/unity_android_link_3/</a></li>\n<li>【Unity】こんなAndroidネイティブプラグインをつくっちゃいけない！【特に広告SDK】 - Qiita<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/RyotaMurohoshi/items/3b95daeb8eaa6b487a20\">http://qiita.com/RyotaMurohoshi/items/3b95daeb8eaa6b487a20</a></li>\n</ul>\n\n</div>",
    "link": "/blogs/qiita/Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/9e30ecf86e17d3d83376cc11a5898a6f24c3111abb467e838ce654402a84be1f.png",
      "small": "/ogp/630x630/blogs/qiita/9e30ecf86e17d3d83376cc11a5898a6f24c3111abb467e838ce654402a84be1f.png"
    }
  },
  {
    "name": "2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと",
    "publishedAt": "2016-07-02 16-23-38",
    "title": "UnityのネイティブコードをSwiftで書こうとした時にはまったこと",
    "description": "  内容Unityで一部の処理をiOSのネイティブコードで書きたい時があるかと思います。尚且つiOSであるならばSwiftで書きたいということもあるかと思います。その時に実際にやっ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>Unityで一部の処理をiOSのネイティブコードで書きたい時があるかと思います。\n尚且つiOSであるならばSwiftで書きたいということもあるかと思います。\nその時に実際にやってみてはまったことを書き残します。</p>\n<p>私の場合はUnityアプリケーション上で動くWebカメラではなく、iOSのAVFoundationライブラリ使ってカメラモジュールを動かしバーコードの読み取りを行いたいという時にここの箇所をSwiftで書ければなぁ...ということがありました。</p>\n<h1 id=\"ネイティブコードを書いてみて呼び出してみよう！\">ネイティブコードを書いてみて呼び出してみよう！</h1>\n<h2 id=\"サンプルコード\">サンプルコード</h2>\n<p>先にC#上で外部のファイルを呼び出す処理について記載します。\nC#には<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://msdn.microsoft.com/ja-jp/library/aa288468(v=vs.71).aspx\">DllImport属性</a>を指定することで外部のdllを読み込むことができ、\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://msdn.microsoft.com/ja-jp/library/e59b22c5.aspx\">extern修飾子</a>というのでネイティブコード上のメソッドや変数を指定します。</p>\n<p>下記はネイティブコードを呼び出すためにC#で記載したクラスファイルです。</p>\n<pre><code class=\"language-HogeClass.cs\">using UnityEngine;\nusing System.Runtime.InteropServices;\n\npublic class HogeClass {\n    [DllImport(&quot;__Internal&quot;)]    // Unityで提供されているネイティブプラグイン\n    private static extern void hogeMethod_ ();    // ネイティブコード上のメソッド\n\n    public static void hogeMethod () {\n        if (Application.platform != RuntimePlatform.OSXEditor) {\n            hogeMethod_ ();    // ネイティブコード上のメソッドを呼び出す\n        }\n    }\n}\n</code></pre>\n<p>ただしC#から直接Swiftのコードを読み込むことができないため\nObjective-Cで記載したコードを経由してSwiftのコードを読みに行きましょう。</p>\n<pre><code class=\"language-HogeClass.mm\">#import &lt;UIKit/UIKit.h&gt;\n#import &lt;[Unityのプロジェクト名]-Swift.h&gt;\n\nextern &quot;C&quot;{\n    void hogeMethod_() {\n         [HogeClass hogeMethod];    // Swiftのメソッドを呼び出す\n    }\n}\n</code></pre>\n<p>ここの</p>\n<pre><code>#import &lt;[Unityのプロジェクト名]-Swift.h&gt;\n</code></pre>\n<p>ですが\nObjective-C Generated Interface Header Name\nに記載されているのを指定してあげてください。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと/0-md.png\" alt=\"スクリーンショット 2016-07-02 15.13.12.png\"></p>\n<p>[Unityのプロジェクト名]-Swift.hの生成方法ですが\n下記にまとめて記載します。（今回一番はまったところです。）</p>\n<p>いよいよSwiftのコードの記載です。</p>\n<pre><code class=\"language-HogeClass.swift\">import UIKit\n\npublic class HogeClass: NSObject {\n    public class func hogeMethod() {\n        print(&quot;hoge&quot;)    // Xcodeのコンソール上にhogeと表示させる\n    }\n}\n</code></pre>\n<p>これでSwiftのコードを読み込むためのコーディング完了です。</p>\n<h2 id=\"unityのプロジェクト名-swifthの生成方法\">[Unityのプロジェクト名]-Swift.hの生成方法</h2>\n<p>Embedded Content Contains Swift Code　というとこをYesにすることでSwiftのコードがヘッダファイルとして生成されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと/1-md.png\" alt=\"スクリーンショット 2016-07-02 16.11.18.png\"></p>\n<p>あとObjective-CからSwiftを呼びだそうとすると</p>\n<pre><code>dyld: Library not loaded: @rpath/libswiftCore.dylib\nReferenced from: /private/var/mobile/Containers/Bundle/Application/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/App-Name.app/App-Name\nReason: image not found\n</code></pre>\n<p>というエラーが出てきてしまいます。\nこれの解決方法としてRunpath Search Pathに@executable_path/Frameworksを追加してあげることでUnity上でObjective-Cを経由しながらSwiftの処理を動かすことができるようになります。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと/2-md.png\" alt=\"スクリーンショット 2016-07-02 16.22.18.png\"></p>\n<h1 id=\"参考リンク\">参考リンク</h1>\n<p>KAKELOG / Unity iOS のネイティブプラグインを Swift で書いた\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://blog.kakeragames.com/2016/05/07/unity-swift.html\">http://blog.kakeragames.com/2016/05/07/unity-swift.html</a>\nObjective-cからSwiftを呼び出す方法\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/syou007/items/b0c54d795d63fb84de72\">http://qiita.com/syou007/items/b0c54d795d63fb84de72</a>\nUnityのスクリプトからのiOSのネイティブプラグインとのやりとり\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/tyfkda/items/dc5da219d22cc55de301\">http://qiita.com/tyfkda/items/dc5da219d22cc55de301</a>\nSwiftで書かれたiOSアプリを実機デバッグ実行時に「image not found」エラーとなる場合の対処\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://raimon49.github.io/2016/03/20/error-at-swift-app-with-ios-device.html\">http://raimon49.github.io/2016/03/20/error-at-swift-app-with-ios-device.html</a>\nテラシュールブログ / \nUnityのC#からネイティブプラグインを経由せずObjective-Cのコードを呼び出す\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://tsubakit1.hateblo.jp/entry/2014/08/14/022012\">http://tsubakit1.hateblo.jp/entry/2014/08/14/022012</a></p>\n\n</div>",
    "link": "/blogs/qiita/UnityのネイティブコードをSwiftで書こうとした時にはまったこと",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/38dc5a720ce754d7e8d5649aa60ccbb1a3be4facb003b7270668cce7b80de025.png",
      "small": "/ogp/630x630/blogs/qiita/38dc5a720ce754d7e8d5649aa60ccbb1a3be4facb003b7270668cce7b80de025.png"
    }
  },
  {
    "name": "2016-06-04 00-08-50 Webの入力作業を楽したい",
    "publishedAt": "2016-06-04 00-08-50",
    "title": "Webの入力作業を楽したい",
    "description": "  内容「おまえは今まで作ったアカウント数をおぼえているのか？」仕事でログイン・サインイン機能の改修があり、新規アカウントによるテストというのが何回も行わないといけなかったというこ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p><strong>「おまえは今まで作ったアカウント数をおぼえているのか？」</strong></p>\n<p>仕事でログイン・サインイン機能の改修があり、\n新規アカウントによるテストというのが何回も行わないといけなかったということがありました。\n新規アカウント作るにも電話番号であったり氏名など、入力項目が多くて辛い...\n少しでも楽したい...ということでちょっとしたツールを作ってみたという話</p>\n<p>テスト用の環境とかちゃんと整備しようよ...って気にもなりますが...</p>\n<p>即席で入力が楽になるというやり方の紹介になります。\n今回はこの画面からQiitaのキーワード検索を行ってみる例をやってみます。</p>\n<p>2016/06/04追記\n@tenkoma@github さんの紹介でFirefoxのアドオン、Selenium IDEというキーワードをいただいたので試してみましたが、\n結論を言いますとSelenium IDEで自動入力するのが楽でした。\n理由としては自動で行いたいことを人間の操作から自動で登録できたからです。\nSelenium IDEについて下記に追記を致しました。</p>\n<p>JavaScriptを用いてやるか、Seleniumで自動でやるかどっちがいいの？という話についてです。\nJavaScriptの実装過程でここを動かせばこのスクリプトを動かしたいとか\nデバッグを交えてやりたい時にJavaScriptによる半自動なやり方は有効だと思います。</p>\n<p>Selenium IDEを使ってアカウントの作成を行った方が早かった...。</p>\n<h1 id=\"何はともあれ開発ツールだ（javascript編）\">何はともあれ開発ツールだ（JavaScript編）</h1>\n<p>画面上部の虫眼鏡周りのHTML要素を見てみましょう。</p>\n<h2 id=\"虫眼鏡をクリック\">虫眼鏡をクリック</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/0-md.png\" alt=\"スクリーンショット 2016-06-03 23.24.49.png\"></p>\n<p>するとaタグや子の要素でiタグとかあります。\nこのあたりをクリックすれば検索入力のフォームが出てくるので\nこの中で比較的にJavaScriptでiタグのclassからHTMLの要素取得してイベント発火してみましょう。\nclassは複数のHTMLの要素に指定できるためプラスでどこの部分のclassを指定するのかを教えるために[0]も追記します。\nそれとクリックイベントを追記すれば検索フォームが出てきます。</p>\n<p>コードとして下記になります。</p>\n<p>虫眼鏡クリックの処理</p>\n<pre><code>document.getElementsByClassName(&#39;fa fa-search&#39;)[0].click();\n</code></pre>\n<p>これを開発ツールのコンソール部分に入れて実行すればフォームが出てきました。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/1-md.png\" alt=\"スクリーンショット 2016-06-03 23.41.21.png\"></p>\n<h2 id=\"文字の入力\">文字の入力</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/2-md.png\" alt=\"スクリーンショット 2016-06-03 23.46.43.png\"></p>\n<p>入力箇所のところはidの指定がされているのでidの指定から入力部に値を入れてみましょう。</p>\n<p>入力箇所の文字入力</p>\n<pre><code>document.getElementById(&#39;q&#39;).value = &#39;JavaScript&#39;;\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/3-md.png\" alt=\"スクリーンショット 2016-06-03 23.53.15.png\"></p>\n<p>文字が入りましたね！</p>\n<h2 id=\"「search」をクリック\">「Search」をクリック</h2>\n<p>説明は虫眼鏡クリックだいたい同じですので省略。</p>\n<p>「Search」をクリックする処理</p>\n<pre><code>document.getElementsByClassName(&#39;btn btn-default btn-sm&#39;)[0].click();\n</code></pre>\n<p>検索が実行されましたね！</p>\n<h2 id=\"ブックマークレットを作る\">ブックマークレットを作る</h2>\n<p>先ほど作成していったJavaScriptをブックマーク化します。\nその時に登録するURLの部分を下記のようにして登録を行います。</p>\n<pre><code>javascript:document.getElementsByClassName(&#39;fa fa-search&#39;)[0].click();document.getElementById(&#39;q&#39;).value = &#39;JavaScript&#39;;document.getElementsByClassName(&#39;btn btn-default btn-sm&#39;)[0].click();\n</code></pre>\n<p>あとはブックマーク一覧からこの作成されたものをクリックするだけで\nQiitaのページの要素やイベントを使って検索を半自動で行えるようになります。</p>\n<h1 id=\"selenium-ide\">Selenium IDE</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://addons.mozilla.org/ja/firefox/addon/selenium-ide/\">https://addons.mozilla.org/ja/firefox/addon/selenium-ide/</a></p>\n<p>FirefoxのアドオンとしてSelenium IDEがあります。\nSelenium自体は他のブラウザにもWebDriverというのをインストールしてあげれば使用することができますが、\n今回はこのアドオン利用してやった方がアカウント作成するまでにかかる時間が少なかったため、\nアドオンの紹介だけします。</p>\n<h2 id=\"まずはfirefoxとアドオンをインストール\">まずはFirefoxとアドオンをインストール</h2>\n<p>表題通りです。</p>\n<h2 id=\"selenium-ideを使う\">Selenium IDEを使う</h2>\n<p>メニューバーから「ツール」→「Selenium IDE」を選択。\nこんな今感じのが出てくるかと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/4-md.png\" alt=\"スクリーンショット 2016-06-04 16.59.02.png\"></p>\n<p>URLのとこに対象のURLを入れます。</p>\n<p>そしたら下記の画像の「ここをクリック」を押してみましょう。\nこれでFirefox上のユーザの操作を記憶できるようになります。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/5-md.png\" alt=\"スクリーンショット 2016-06-04 7.04.44.png\"></p>\n<p>操作を行いSelenium上で扱うコマンドを自動で作成されたら、<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/6-md.png\" alt=\"スクリーンショット 2016-06-04 17.03.59.png\">を押せば自動に入力などの操作が行われます。</p>\n\n</div>",
    "link": "/blogs/qiita/Webの入力作業を楽したい",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/f89bdc3d6d93ffbe671645a6ffe0bdfcbee8b1621e283db4f2ef5fb55098959e.png",
      "small": "/ogp/630x630/blogs/qiita/f89bdc3d6d93ffbe671645a6ffe0bdfcbee8b1621e283db4f2ef5fb55098959e.png"
    }
  },
  {
    "name": "2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング",
    "publishedAt": "2016-05-21 11-33-16",
    "title": "MacでUnityのAndroidビルドのセッティング",
    "description": "  概要今後UnityでAndroid・iOSアプリ両方を作っていきたいということがあり、いざやってみようとしたらUnity以外に必要なものがあったためメモとして記載する。なお対象",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<p>今後UnityでAndroid・iOSアプリ両方を作っていきたいということがあり、\nいざやってみようとしたらUnity以外に必要なものがあったため\nメモとして記載する。\nなお対象のプロジェクトはデフォルトで用意されているStandardプロジェクトで行う。</p>\n<h1 id=\"必要なもの\">必要なもの</h1>\n<p>Unityはインストールされている前提で記載します。\nAndroidのビルドに必要なものになります。</p>\n<p>下記のものがインストールされたらUnityのメニューバーより\n「 Unity → Preferences 」 External Tools を選択してパスの設定を行います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/0-md.png\" alt=\"スクリーンショット 2016-05-21 11.12.19.png\"></p>\n<h2 id=\"android-sdk\">Android　SDK</h2>\n<p>Unityの公式で記載されている内容としては下記になります。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://docs.unity3d.com/ja/current/Manual/android-sdksetup.html\">http://docs.unity3d.com/ja/current/Manual/android-sdksetup.html</a></p>\n<p>Android Studioをインストールされていて既にAndroid　SDKが存在するとき\n/Users/[ユーザ名]/Library/Android/sdk/\nここにAndroid　SDKが設置されます。</p>\n<h2 id=\"jdk\">JDK</h2>\n<p>既存でjdkがインストールされているときは下記のパスになります。\n/Library/Java/JavaVirtualMachines/jdk1.7.X_XX.jdk/Contents/Home</p>\n<h1 id=\"ビルドの実行\">ビルドの実行</h1>\n<p>Androidのエミュレータとして<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.genymotion.com/\">Genymotion</a>というのがありますがこちらのエミュレータはAndroid SDKからのエミュレータ起動より早いためこちらを事前に起動しておくと良いかもしれません。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.genymotion.com/\">https://www.genymotion.com/</a></p>\n<p>Unityのメニューバーより\n「 File → Build Settings 」\nPlatformからAndroidを選択し、「Build &amp; RUN」を行うとビルドが開始されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/1-md.png\" alt=\"スクリーンショット 2016-05-21 11.29.54.png\"></p>\n<p>しばらくするとGenymotionで起動したエミュレータ上にアプリケーションが起動されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/2-md.png\" alt=\"スクリーンショット 2016-05-21 11.31.39.png\"></p>\n<h1 id=\"新規のプロジェクトからandroidアプリを起動しよう\">新規のプロジェクトからAndroidアプリを起動しよう</h1>\n<p>Unityによる画面作成は「canvas」から行います。\nHierarchy ウィンドウから「Create　→ UI」より「canvas」を選択して画面を作成します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/3-md.png\" alt=\"スクリーンショット 2016-05-21 19.09.47.png\"></p>\n<p>それからそのあと「Command + S」で保存を行い、「Build &amp; RUN」でUnityのロゴが表示されるかと思われます。</p>\n<p>次回画面の作りについて記載したいと思います。</p>\n\n</div>",
    "link": "/blogs/qiita/MacでUnityのAndroidビルドのセッティング",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/6f131aa770774a1860c547ed75af2aeff7e08352007266f4844c5a53cc36debb.png",
      "small": "/ogp/630x630/blogs/qiita/6f131aa770774a1860c547ed75af2aeff7e08352007266f4844c5a53cc36debb.png"
    }
  },
  {
    "name": "2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える",
    "publishedAt": "2016-04-23 15-43-33",
    "title": "グラフィックツールで作成したSVGにアニメーションを付け加える",
    "description": "  内容CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）http://qiita.com/igara/items/918c6237d0cf8fbc0c1d非イラ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/918c6237d0cf8fbc0c1d\">http://qiita.com/igara/items/918c6237d0cf8fbc0c1d</a></p>\n<blockquote>\n<p>非イラストレータが初めてPCでイラストを描いた話\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/3a8dfad331652b632eff\">http://qiita.com/igara/items/3a8dfad331652b632eff</a></p>\n<blockquote>\n<p>新しいデザインを作るということがないのでちょっと勉強がてらに絵を描いてみたという話になります。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>前回描いた絵からの教訓で簡単なイラストだったら画像を使わずにCSSで表示可能なのでは？と思った為実践してみたというお話になります。</p>\n</blockquote>\n<p>前回はCSSを用いて絵を描いてましたが、図形の角度をコードで変更したりと計算が辛かった為、\nグラフィックツールでGUI的に編集できたら便利そう！というのと\n尚且つアニメーション追加できたら面白そう！\nと思ったので試しにやってみたという内容になります。</p>\n<h1 id=\"svgとは\">SVGとは</h1>\n<p>SVG：Scalable Vector Graphics</p>\n<p>JPGやPNGと呼ばれる画像はビットマップデータというものでデータの実態はバイナリです。\nそれに対しSVGはベクターデータと呼ばれるものでデータの実態はXMLで構成されているものになります。\nなのでちょっとしたデザインの修正をソース修正で行うことが可能です。</p>\n<p>この二つにはそれぞれ得意・不得意としているものがあります。\n参考リンク：「ビットマップデータ」と「ベクターデータ」の違い\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://webgaku.hateblo.jp/entry/20120408/1333859650\">http://webgaku.hateblo.jp/entry/20120408/1333859650</a></p>\n<p>近年、SVGはブラウザでもサポートされるようになった為、\nできればデザインはSVGで構築したいなと思いました。</p>\n<p>こちらは現在のSVG対応のブラウザバージョン状況です。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://caniuse.com/#feat=svg-img\">http://caniuse.com/#feat=svg-img</a></p>\n<h1 id=\"inkscape\">Inkscape</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://inkscape.org/\">Inkscape</a></p>\n<p>SVGを作成するために使用したソフトウェア\nMacやWindows、Linuxにマルチプラットフォームで対応されている。\n（Macは別途XQuartzをインストールする必要がある）\nInkscape以外のソフトウェアですとAdobe IllustratorとかSketchなどでも作成可能です。\n何気にLibreOfficeのDrawでも作成は可能のようです。</p>\n<p>筆者はMacによるInkscapeの使用となります。\nMacですとコピーや貼り付けを普段はCommandキーを押して行っているかと思いますがControlキーでコピー貼り付けを行うなど操作点でWindowsに近いものがあるように感じました。</p>\n<h2 id=\"とりあえずxmlエディターを開こう\">とりあえずXMLエディターを開こう!</h2>\n<p>前述でも記載しましたがSVGはXMLで構成されていますので\nInkscapeを開いたときは\nメニューバーより 「編集」→「XMLエディター」を選択しましょう。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/0-md.png\" alt=\"スクリーンショット 2016-04-17 20.04.48.png\"></p>\n<p>すると画面の右側にこんなものが出てくるかと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/1-md.png\" alt=\"スクリーンショット 2016-04-17 20.08.51.png\"></p>\n<p>height 297mmやwidth 210mmとありますがここを編集することで左に表示されている枠の大きさを変更することが可能です。</p>\n<h2 id=\"文字を入れてみる\">文字を入れてみる</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/2-md.png\" alt=\"スクリーンショット 2016-04-17 20.12.18.png\"></p>\n<p>左のツールバーに「テキストツール」があるのでこちらを選択して文字を入れたい箇所へクリックすることで文字の追加が行えます。</p>\n<p>文字の追加を行うとXMLの方にも自動で追加されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/3-md.png\" alt=\"スクリーンショット 2016-04-17 20.14.35.png\"></p>\n<p>上の画像は追加した文字のXMLの内容ですが文字の色やサイズの指定方法が「style」に記載されています。\nstyleの内容ですがこちらはCSSによるものです。\n文字を移動したい時、文字の大きさを変えたい時はXMLの変更からも行えますが、ツールバーの「選択ツール」（マウスマーク）でマウスによるデザインの変更が行えます。</p>\n<h2 id=\"xmlの記述を削除する\">XMLの記述を削除する</h2>\n<p>SVGでアニメーションさせる方法として3つあります。</p>\n<ul>\n<li>CSS（このやり方は<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/918c6237d0cf8fbc0c1d\">前回</a>やったものになるかと思います。）</li>\n<li>SVGのanimationタグ→こちらは一部ブラウザでは非推奨となっております。<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ssvvgg.net/post/127068682345/2015%E5%B9%B408%E6%9C%8819%E6%97%A5%E3%81%AEsvg\">http://ssvvgg.net/post/127068682345/2015%E5%B9%B408%E6%9C%8819%E6%97%A5%E3%81%AEsvg</a></li>\n<li>JavaScript</li>\n</ul>\n<p>今回もCSSを用いてアニメーションの追加を行ってみましょう。</p>\n<p>せっかくInkspaceを使っていたところですが適当なテキストエディタで開きます。\nテキストエディタでSVGを開くと下記のようなXMLが表示されるかと思います。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/4-md.png\" alt=\"スクリーンショット 2016-04-18 13.09.59.png\"></p>\n<p>SVGはHTMLに直書きすることでも動作するので\nSVGのソースの最上部に記載されている下記の記述を削除します。</p>\n<p>こちらは削除を行っても再度Inkspaceを使ったデザインの修正可能です。</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;\n&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;\n</code></pre>\n<p>削除した理由としてですが\nこのSVGファイルをHTMLのモジュールとして読み込んであげて後でCSSのアニメーション追加を行っていこうという方針にしました。（もっと良い方法がありそう...）</p>\n<h2 id=\"アニメーションの追加\">アニメーションの追加</h2>\n<p>作成したSVG中の要素は自動でidの指定がされているかと思います。\n（textXXXXとかpathYYYYとか）\nこちらのidに対してCSS3のアニメーション指定することで動かすことが可能になります。\nもちろんidの名前を変更することも可能です。</p>\n<p>CSS3のアニメーションについては下記のサイトを参考にしました。</p>\n<p>animation－CSS3リファレンス\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.htmq.com/css3/animation.shtml\">http://www.htmq.com/css3/animation.shtml</a>\ncss3のanimationを使ってみたら予想以上に簡単だった！\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://sterfield.co.jp/designer/css3%E3%81%AEanimation%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%89%E4%BA%88%E6%83%B3%E4%BB%A5%E4%B8%8A%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%A0%E3%81%A3%E3%81%9F%EF%BC%81/\">http://sterfield.co.jp/designer/css3%E3%81%AEanimation%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%89%E4%BA%88%E6%83%B3%E4%BB%A5%E4%B8%8A%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%A0%E3%81%A3%E3%81%9F%EF%BC%81/</a></p>\n<h1 id=\"所感・感想・まとめ\">所感・感想・まとめ</h1>\n<p>基本SVGファイルはInkspaceでいじる（HTMLに書き起こす作業についてWebPackがうまく解決してくれました）、アニメーション処理はCSSファイルで追加すると処理の分割ができました。</p>\n<p>アニメーションの箇所は結局また独自のCSSアニメーションの追加を行っていた為、次はライブラリを使って豪華なアニメーションを追加していきたいなと思います。</p>\n<h1 id=\"参考ページ\">参考ページ</h1>\n<p>滑らかで美しい表現ができる！SVGアニメーションを使ってみよう\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.codecamp.jp/svg_animation_intro\">https://blog.codecamp.jp/svg_animation_intro</a>\nWEBデザイナーのはじめての「SVG」\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webkikaku.co.jp/blog/webdesign/svg_for_webdesigner/\">https://webkikaku.co.jp/blog/webdesign/svg_for_webdesigner/</a></p>\n\n</div>",
    "link": "/blogs/qiita/グラフィックツールで作成したSVGにアニメーションを付け加える",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/15bc779c0d01a357af7bf65dfde2027cdc6d1151ca400381c45d434e34449acc.png",
      "small": "/ogp/630x630/blogs/qiita/15bc779c0d01a357af7bf65dfde2027cdc6d1151ca400381c45d434e34449acc.png"
    }
  },
  {
    "name": "2016-04-11 17-58-27 閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード",
    "publishedAt": "2016-04-11 17-58-27",
    "title": "閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード",
    "description": "  この記事の内容ServiceWorker・Cache APIとはServiceWorkerとCache APIを使ってオフラインでも動くWebアプリを作るhttp://qiit",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容\">この記事の内容</h1>\n<ul>\n<li>ServiceWorker・Cache APIとは</li>\n</ul>\n<p>ServiceWorkerとCache APIを使ってオフラインでも動くWebアプリを作る\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/horo/items/175c8fd7513138308930\">http://qiita.com/horo/items/175c8fd7513138308930</a></p>\n<p>JavaScriptの処理で自在にキャッシュ削除とかが行えたら良いなということでメモとして記載します。</p>\n<h1 id=\"コード\">コード</h1>\n<p>下記をブラウザの開発ツールのコンソールより実行することで\nServiceWorkerの登録削除とCache APIのキャッシュを全て削除されます。</p>\n<pre><code class=\"language-JavaScript\">navigator.serviceWorker.getRegistrations().then(function(registrations) {\n    // 登録されているworkerを全て削除する\n    for(let registration of registrations) {\n        registration.unregister();\n    }\n});\ncaches.keys().then(function(keys) {\n    var promises = [];\n    // キャッシュストレージを全て削除する\n    keys.forEach(function(cacheName) {\n        if (cacheName) {\n            promises.push(caches.delete(cacheName));\n        }\n    });\n});\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/672bfc332ff3eed6d2a085b4ca61ed0a4b5077fdd5b99c5666db4b24d8b9d12b.png",
      "small": "/ogp/630x630/blogs/qiita/672bfc332ff3eed6d2a085b4ca61ed0a4b5077fdd5b99c5666db4b24d8b9d12b.png"
    }
  },
  {
    "name": "2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）",
    "publishedAt": "2016-04-07 18-15-40",
    "title": "CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）",
    "description": "  内容非イラストレータが初めてPCでイラストを描いた話http://qiita.com/igara/items/3a8dfad331652b632eff新しいデザインを作るという",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>非イラストレータが初めてPCでイラストを描いた話\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/3a8dfad331652b632eff\">http://qiita.com/igara/items/3a8dfad331652b632eff</a></p>\n<blockquote>\n<p>新しいデザインを作るということがないのでちょっと勉強がてらに絵を描いてみたという話になります。</p>\n</blockquote>\n<p>前回描いた絵からの教訓で簡単なイラストだったら画像を使わずにCSSで表示可能なのでは？と思った為実践してみたというお話になります。</p>\n<p>記事の前半ではCSSの内容について、後半ではPostCSSの導入について記載させていただきます。</p>\n<h1 id=\"絵\">絵</h1>\n<p>こんなものができあがってしまった</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）/0-md.gif\" alt=\"カエルの絵\"></p>\n<p>実物として下記のリンクにあります。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://syonet.work/documents/styleguide/resources-assets-styleguide-css-symbol-myicon-icon-garasyo.html\">https://syonet.work/documents/styleguide/resources-assets-styleguide-css-symbol-myicon-icon-garasyo.html</a></p>\n<h1 id=\"絵の一部をパーツに置き換えて考える\">絵の一部をパーツに置き換えて考える</h1>\n<p>下記の画像のようにパーツを構成します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）/1-md.png\" alt=\"スクリーンショット 2016-04-07 17.40.10.png\"></p>\n<p>それぞれの図形は複雑ではないです。</p>\n<h1 id=\"コード内容\">コード内容</h1>\n<p>パーツ化したものをHTML、CSS化にしてみた内容になります。\n背景の赤い部分など実際は黄色い背景より大きいのですが、\n\b\b<code>overflow: hidden;</code>を用いてはみ出ないようにしていたり、\n三角形を作成するために<code>border</code>を用いたり無茶苦茶なことをやっていますが完成したものとして下記のものになります。</p>\n<h2 id=\"html\">HTML</h2>\n<pre><code class=\"language-HTML\">&lt;div class=&quot;myIconImage&quot;&gt;\n  &lt;div class=&quot;myIconImage-background-topTriangle&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-background-midddleTriangle&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-background-rightTriangle&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-head&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-lefteye&quot;&gt;\n    &lt;div class=&quot;myIconImage-character-lefteye-line&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-righteye&quot;&gt;\n    &lt;div class=&quot;myIconImage-character-righteye-line&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-leftnose&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-rightnose&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-body&quot;&gt;\n    &lt;div class=&quot;myIconImage-character-body-mouth&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"css\">CSS</h2>\n<pre><code class=\"language-CSS\">:root{\n  --ratio: 3;\n  --route2: 1.41421356237;\n}\n.myIconImage {\n  width: calc(100px * var(--ratio));\n  height: calc(100px * var(--ratio));\n  background-color: yellow;\n  position: relative;\n  overflow: hidden;\n}\n.myIconImage-background-topTriangle {\n  border-right: calc(100px * var(--ratio)) solid transparent;\n  border-bottom: calc(25px * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--ratio)) solid red;\n  position: absolute;\n}\n.myIconImage-background-midddleTriangle {\n  margin-top: calc(-25px * var(--ratio));\n  margin-left: calc(-100px * var(--route2) * var(--ratio) + 100px * var(--ratio));\n  border-top: calc(25px * var(--ratio)) solid transparent;\n  border-bottom: calc(25px * var(--ratio)) solid transparent;\n  border-right: calc(100px * var(--route2) * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--route2) * var(--ratio)) solid red;\n  transform: rotate(-45deg);\n  position: absolute;\n}\n.myIconImage-background-rightTriangle {\n  margin-top: calc(-25px / 2 * var(--ratio));\n  margin-left: calc(-25px / 2 * var(--ratio));\n  border-top: calc(25px * var(--ratio)) solid transparent;\n  border-right: calc(100px * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--ratio)) solid red;\n  transform: rotate(-90deg);\n  position: absolute;\n}\n.myIconImage-background-rightTriangle {\n  margin-top: calc(-25px / 2 * var(--ratio));\n  margin-left: calc(-25px / 2 * var(--ratio));\n  border-top: calc(25px * var(--ratio)) solid transparent;\n  border-right: calc(100px * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--ratio)) solid red;\n  transform: rotate(-90deg);\n  position: absolute;\n}\n.myIconImage-character-head {\n    margin-top: calc(25px * var(--ratio));\n    margin-left: calc(-25px * var(--ratio));\n    height: calc(100px * var(--ratio));\n    width: calc(100px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: lime;\n    position: absolute;\n}\n.myIconImage-character-lefteye {\n    margin-top: calc(18px * var(--ratio));\n    margin-left: calc(15px * var(--ratio));\n    height: calc(15px * var(--ratio));\n    width: calc(23px * var(--ratio));\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(5deg);\n    overflow: hidden;\n}\n.myIconImage-character-lefteye-line {\n    margin-top: calc(6px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(25px * var(--ratio));\n    background: black;\n    position: absolute;\n    transform: rotate(-4deg);\n}\n.myIconImage-character-righteye {\n    margin-top: calc(50px * var(--ratio));\n    margin-left: calc(60px * var(--ratio));\n    height: calc(15px * var(--ratio));\n    width: calc(23px * var(--ratio));\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(65deg);\n    overflow: hidden;\n}\n.myIconImage-character-righteye-line {\n    margin-top: calc(7px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(25px * var(--ratio));\n    background: black;\n    position: absolute;\n    transform: rotate(4deg);\n}\n.myIconImage-character-leftnose {\n    margin-top: calc(50px * var(--ratio));\n    margin-left: calc(35px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(2px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n.myIconImage-character-rightnose {\n    margin-top: calc(60px * var(--ratio));\n    margin-left: calc(45px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(2px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n.myIconImage-character-body {\n    margin-top: calc(50px * var(--ratio));\n    margin-left: calc(-40px * var(--ratio));\n    height: calc(90px * var(--ratio));\n    width: calc(90px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: white;\n    position: absolute;\n    overflow: hidden;\n}\n.myIconImage-character-body-mouth {\n    height: calc(50px * var(--ratio));\n    width: calc(50px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: red;\n    position: absolute;\n    transform: rotate(180deg);\n    animation-name: mouth-animation;\n    animation-duration: 7s;\n    animation-timing-function: ease;\n    animation-iteration-count: infinite;\n}\n@keyframes mouth-animation {\n  0% {\n    margin-top: calc(-20px * var(--ratio));\n    margin-left: calc(50px * var(--ratio));\n  }\n  50% {\n    margin-top: calc(-100px * var(--ratio));\n    margin-left: calc(100px * var(--ratio));\n  }\n  100% {\n    margin-top: calc(-20px * var(--ratio));\n    margin-left: calc(50px * var(--ratio));\n  }\n}\n</code></pre>\n<h1 id=\"postcssを導入\">PostCSSを導入</h1>\n<p>Sassを使ったことがありませんが先にPostCSSを入門してみました。</p>\n<h2 id=\"postcssについて\">PostCSSについて</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://postcss.org/\">PostCSS</a></p>\n<p>Sassと同様にトランスパイルが必要なAltCSS\nプラグインが充実しており、必要に応じたトランスパイルの方法が行える。\nビルドの速度が速いらしい</p>\n<h2 id=\"使用したプラグインについて\">使用したプラグインについて</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a></p>\n<p>コンパイルする前のソースを元にprefixを自動作成してくれるもの</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）/2-md.png\" alt=\"スクリーンショット 2016-04-07 18.00.41.png\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/jonathantneal/precss\">PreCSS</a></p>\n<p>PostCSSを使いながらSass記法が使えるもの\n今回はroute2やraito（比率）の変数の使用に用いた</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://cssnano.co/\">cssnano</a></p>\n<p>トランスパイル後のCSSをminify化してくれる</p>\n<h2 id=\"postcssを使用したコード\">PostCSSを使用したコード</h2>\n<p>上記のコードとさほど違いはありません...\n変更点として、変数がCSSのカスタムプロパティからSassの変数に変更しています。</p>\n<pre><code class=\"language-sass\">/* 100px * 100pxのアイコンを表示する為の比率 */\n$ratio: 3;\n/* ルート2の数値 */\n$route2: 1.41421356237;\n\n/* アイコンを表示する領域 */\n.myIconImage {\n  width: calc(100px * $ratio);\n  height: calc(100px * $ratio);\n  background-color: yellow;\n  position: relative;\n  overflow: hidden;\n}\n/* 上部に表示している赤い三角形 */\n.myIconImage-background-topTriangle {\n  border-right: calc(100px * $ratio) solid transparent;\n  border-bottom: calc(25px * $ratio) solid transparent;\n  border-left: calc(100px * $ratio) solid red;\n  position: absolute;\n}\n/* 真ん中に表示している赤い三角形 */\n.myIconImage-background-midddleTriangle {\n  margin-top: calc(-25px * $ratio);\n  margin-left: calc(-100px * $route2 * $ratio + 100px * $ratio);\n  border-top: calc(25px * $ratio) solid transparent;\n  border-bottom: calc(25px * $ratio) solid transparent;\n  border-right: calc(100px * $route2 * $ratio) solid transparent;\n  border-left: calc(100px * $route2 * $ratio) solid red;\n  transform: rotate(-45deg);\n  position: absolute;\n}\n/* 右端に表示している赤い三角形 */\n.myIconImage-background-rightTriangle {\n  margin-top: calc(-25px / 2 * $ratio);\n  margin-left: calc(-25px / 2 * $ratio);\n  border-top: calc(25px * $ratio) solid transparent;\n  border-right: calc(100px * $ratio) solid transparent;\n  border-left: calc(100px * $ratio) solid red;\n  transform: rotate(-90deg);\n  position: absolute;\n}\n/* カエルの頭部分 */\n.myIconImage-character-head {\n    margin-top: calc(25px * $ratio);\n    margin-left: calc(-25px * $ratio);\n    height: calc(100px * $ratio);\n    width: calc(100px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * $ratio) solid black;\n    background: lime;\n    position: absolute;\n}\n/* アイコンの左側に表示している目 */\n.myIconImage-character-lefteye {\n    margin-top: calc(18px * $ratio);\n    margin-left: calc(15px * $ratio);\n    height: calc(15px * $ratio);\n    width: calc(23px * $ratio);\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * $ratio) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(5deg);\n    overflow: hidden;\n}\n/* アイコンの左側に表示している目の線 */\n.myIconImage-character-lefteye-line {\n    margin-top: calc(6px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(25px * $ratio);\n    background: black;\n    position: absolute;\n    transform: rotate(-4deg);\n}\n/* アイコンの右側に表示している目 */\n.myIconImage-character-righteye {\n    margin-top: calc(50px * $ratio);\n    margin-left: calc(60px * $ratio);\n    height: calc(15px * $ratio);\n    width: calc(23px * $ratio);\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * $ratio) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(65deg);\n    overflow: hidden;\n}\n/* アイコンの右側に表示している目の線 */\n.myIconImage-character-righteye-line {\n    margin-top: calc(7px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(25px * $ratio);\n    background: black;\n    position: absolute;\n    transform: rotate(4deg);\n}\n/* アイコンの左側に表示している鼻 */\n.myIconImage-character-leftnose {\n    margin-top: calc(50px * $ratio);\n    margin-left: calc(35px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(2px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n/* アイコンの右側に表示している鼻 */\n.myIconImage-character-rightnose {\n    margin-top: calc(60px * $ratio);\n    margin-left: calc(45px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(2px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n/* カエルの胴体 */\n.myIconImage-character-body {\n    margin-top: calc(50px * $ratio);\n    margin-left: calc(-40px * $ratio);\n    height: calc(90px * $ratio);\n    width: calc(90px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * $ratio) solid black;\n    background: white;\n    position: absolute;\n    overflow: hidden;\n}\n/* カエルの口 */\n.myIconImage-character-body-mouth {\n    height: calc(50px * $ratio);\n    width: calc(50px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * $ratio) solid black;\n    background: red;\n    position: absolute;\n    transform: rotate(180deg);\n    animation-name: mouth-animation;\n    animation-duration: 7s;\n    animation-timing-function: ease;\n    animation-iteration-count: infinite;\n}\n/* 口のアニメーション */\n@keyframes mouth-animation {\n  0% {\n    margin-top: calc(-20px * $ratio);\n    margin-left: calc(50px * $ratio);\n  }\n  50% {\n    margin-top: calc(-100px * $ratio);\n    margin-left: calc(100px * $ratio);\n  }\n  100% {\n    margin-top: calc(-20px * $ratio);\n    margin-left: calc(50px * $ratio);\n  }\n}\n</code></pre>\n<h1 id=\"参考ページ\">参考ページ</h1>\n<p>なぜCSSのborderで三角形ができるのか、実際にコードを書いて調べてみた\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://liginc.co.jp/web/html-css/html/164641\">http://liginc.co.jp/web/html-css/html/164641</a>\n次世代CSS登場！PostCSSの簡単な使い方\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://designup.jp/postcss-how-to-use-438/\">http://designup.jp/postcss-how-to-use-438/</a>\nPostCSSとcssnextで最新CSS仕様を先取り！\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://html5experts.jp/t32k/17235/\">https://html5experts.jp/t32k/17235/</a></p>\n\n</div>",
    "link": "/blogs/qiita/CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/3525f786175acc4c7beb4379055d53b17591eb2c2bf8042cd0d1ad0bd9927a0b.png",
      "small": "/ogp/630x630/blogs/qiita/3525f786175acc4c7beb4379055d53b17591eb2c2bf8042cd0d1ad0bd9927a0b.png"
    }
  },
  {
    "name": "2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話",
    "publishedAt": "2016-04-03 22-40-41",
    "title": "非イラストレータが初めてPCでイラストを描いた話",
    "description": "  概要筆者は仕事でPCを用いてプログラムしたりExcel使ったりインターネットしてたりしますが、あまりペイントツールを用いて画像の編集であったり、もしくは新しいデザインを作るとい",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<p>筆者は仕事でPCを用いてプログラムしたりExcel使ったりインターネットしてたりしますが、あまりペイントツールを用いて画像の編集であったり、もしくは新しいデザインを作るということがないのでちょっと勉強がてらに絵を描いてみたという話になります。</p>\n<p>こんなアイコン画像を作ってみた</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/0-md.png\" alt=\"カエル.png\"></p>\n<h1 id=\"使ったソフト\">使ったソフト</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://medibangpaint.com/\">MediBangPaintPro</a>\nメディバンペイントと読みます。\nWindows、Macにも対応しているようです。</p>\n<p>このソフトで絵を描こうとした理由ですが\nこの手のツールの良さをまだ吟味したわけではないので特に理由はありません。\nただMac版のGimpやKritaはバグが多いような気が...</p>\n<p>どのくらい互換性があるか未知ですがメディバンはPhotoShopで作成されるPSDファイルを読み込むことが可能のようです。</p>\n<h1 id=\"機能\">機能</h1>\n<p>上記のアイコン画像を作成した時の機能になります。</p>\n<h2 id=\"レイヤー\">レイヤー</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/1-md.png\" alt=\"スクリーンショット 2016-04-03 22.10.26.png\"></p>\n<p>1枚の画像を作る為にサンドイッチの構造のように絵を重ねて作ることができます。\n上記の画像では背景画像と別の画像を分けて構成しています。\n使用しないレイヤーの時はレイヤー名の左横にある●を押して消すことで非表示できます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/2-md.png\" alt=\"スクリーンショット 2016-04-03 22.15.32.png\"></p>\n<h2 id=\"定規\">定規</h2>\n<p>円形や平行線であったり定規の線からはみ出ないように線を引くことができる機能です。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/3-md.png\" alt=\"スクリーンショット 2016-04-03 22.18.35.png\"></p>\n<p>アイコンの絵はペンタブを使わずに定規の機能で描いた絵です。</p>\n<h2 id=\"切り取り\">切り取り</h2>\n<p>もしレイヤー分けがされていない画像のとき一部だけ取り除きたい場合があるかと思います。\nいろいろな機能を合わせて行う技になりますが、輪郭がしっかりしていれば比較的に簡単に抜き取ることが可能です。\n手順として下記になります。</p>\n<p>1.自動選択ツールを使用します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/4-md.png\" alt=\"スクリーンショット 2016-04-03 22.29.43.png\"></p>\n<p>2.切り抜きたい範囲を選択していきます。</p>\n<p>切り抜きたい箇所が複数ある場合は「Shift」を押しながらクリックすることで選択できる箇所が増えます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/5-md.png\" alt=\"スクリーンショット 2016-04-03 22.31.33.png\"></p>\n<p>3.コピーする\n「Ctrl + C」もしくは「Command + C」</p>\n<p>4.レイヤー上で貼り付ける\n「Ctrl + V」もしくは「Command + V」\nこれで別のレイヤーに切り抜いたものを配置することができます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/6-md.png\" alt=\"スクリーンショット 2016-04-03 22.36.07.png\"></p>\n<h1 id=\"所感・感想\">所感・感想</h1>\n<p>簡単なサイトのデザイン画像とかも定規機能を使えばすぐに作れそう\nこういったツールの使い方とか割と一般の人でも需要ありそう！</p>\n\n</div>",
    "link": "/blogs/qiita/非イラストレータが初めてPCでイラストを描いた話",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/4991a3e11e9580f9a54dc8de28772e0682107063b7add036a4f4fde52ed7da23.png",
      "small": "/ogp/630x630/blogs/qiita/4991a3e11e9580f9a54dc8de28772e0682107063b7add036a4f4fde52ed7da23.png"
    }
  },
  {
    "name": "2016-03-26 16-53-27 Zenmap(nmap)を使ったサーバのポートスキャン",
    "publishedAt": "2016-03-26 16-53-27",
    "title": "Zenmap(nmap)を使ったサーバのポートスキャン",
    "description": "  この記事の内容リモートのサーバで使用されているポートの調査を行うためのメモになります。デフォルトで設定されているポートの設定について代表的なものだとHTTP 80、HTTPS ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容\">この記事の内容</h1>\n<p>リモートのサーバで使用されているポートの調査を行うためのメモになります。</p>\n<p>デフォルトで設定されているポートの設定について代表的なものだと\nHTTP 80、HTTPS 443、SSH 22\nだったりしますが、1つのサーバに複数のHTTPを立てたり、SSHがデフォルトのポートに設定されていないということがあるかと思います。</p>\n<h1 id=\"zenmap\">Zenmap</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nmap.org/zenmap/\">Zenmap</a></p>\n<p>nmapというコマンドの結果をGUIで表示してくるツールです。</p>\n<p>nmapについて概要\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nmap.org/man/jp/\">https://nmap.org/man/jp/</a>より引用</p>\n<blockquote>\n<p>Nmap (“Network Mapper”)は、ネットワーク調査およびセキュリティ監査を行うためのオープンソースのツールである。大規模ネットワークを高速でスキャンするように設計されているが、単一のホストに対してもまったく問題なく機能する。Nmapは生の(raw)IPパケットを用いて、ネットワーク上でどのようなホストか利用可能になっているか、これらのホストが提供しているサービス(アプリケーション名とバージョン)は何か、ホストが実行しているOS(OS名とバージョン)は何か、どのような種類のパケットフィルタ/ファイアウォールが使用されているかなど、その他数多くの特徴を斬新な方法で判別する。Nmapは、セキュリティ監査用に広く利用されているばかりでなく、ネットワーク・インベントリ(資産情報収集)、サービスのアップグレード予定管理、ホストやサービスのアップタイム(利用可能時間)の監視等の日常業務にNmapを役立てているシステム管理者やネットワーク管理者も多い。</p>\n</blockquote>\n<h1 id=\"使い方は簡単\">使い方は簡単</h1>\n<p>Target　に対象のホストを入力して、Profileを「Intense scan, all TCP ports」にしてスキャンを開始を行えば対象のサーバの使用されているポートを調べることができます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-26 16-53-27 Zenmap(nmap)を使ったサーバのポートスキャン/0-md.jpeg\" alt=\"スクリーンショット 2016-03-26 15.45.49.jpg\"></p>\n\n</div>",
    "link": "/blogs/qiita/Zenmap(nmap)を使ったサーバのポートスキャン",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/ca021b67124bdcf7013dd981d073f1e13a64eb8af803f654187296d182189eac.png",
      "small": "/ogp/630x630/blogs/qiita/ca021b67124bdcf7013dd981d073f1e13a64eb8af803f654187296d182189eac.png"
    }
  },
  {
    "name": "2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する",
    "publishedAt": "2016-03-19 21-39-29",
    "title": "H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する",
    "description": "  はじめに個人サイトをやり始めてどういったページにアクセス集中するかなどアクセス状態を可視化できたらいいなと思ったので実践してみたという話です。どういったふうに可視化できたのかK",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"はじめに\">はじめに</h1>\n<p>個人サイトをやり始めてどういったページにアクセス集中するかなど\nアクセス状態を可視化できたらいいなと思ったので実践してみたという話です。</p>\n<h1 id=\"どういったふうに可視化できたのか\">どういったふうに可視化できたのか</h1>\n<p>Kibanaの設定をデフォルトのままという前提で話を進めていきます。</p>\n<h2 id=\"アクセスカウントが「見える」ようになった\">アクセスカウントが「見える」ようになった</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する/0-md.png\" alt=\"スクリーンショット 2016-03-19 20.21.26.png\"></p>\n<p>上記の図はKibanaのSample Dashboardから確認できたものです。\nfluentdの設定でリアルタイムにアクセスログからアクセスカウントが見れるようになりました。\nfluentdの設定によってはSSHしようとしているカウントも取れそうです。</p>\n<h2 id=\"アクセスした時間が可視化された\">アクセスした時間が可視化された</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する/1-md.png\" alt=\"スクリーンショット 2016-03-19 20.30.15.png\"></p>\n<p>こちらはLogstash Dashboardから確認できるものになります。\nViewのIntervalから表示されている日時の領域幅を狭めたり、広くしたりできます。</p>\n<h2 id=\"アクセスしたユーザ情報が可視化された\">アクセスしたユーザ情報が可視化された</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する/2-md.png\" alt=\"スクリーンショット 2016-03-19 20.35.16.png\"></p>\n<p>こちらもLogstash Dashboardから確認できるものになります。\nホスト名であったりユーザエージェントなどがグラフ化します。</p>\n<h1 id=\"使用したソフトウェアと環境構築\">使用したソフトウェアと環境構築</h1>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/products/kibana\">Kibana</a></li>\n</ul>\n<p>JSONデータを解析してグラフを作成するソフトウェア\n使い道がいろいろありそうだ。</p>\n<p>インストール</p>\n<pre><code>$ curl -L -O https://download.elasticsearch.org/kibana/kibana/kibana-3.1.0.tar.gz\n$ tar zxvf kibana-3.1.0.tar.gz\n</code></pre>\n<p>KibanaでElasticsearchの情報を見たいため\n解凍したディレクトリ内にある設定ファイルの変更を行う</p>\n<pre><code class=\"language-config.js\">elasticsearch: &quot;http://localhost:9200&quot;,\n</code></pre>\n<p>KibanaはWebによるGUIなのでWebサーバの起動が必要。\n解凍したディレクトリをDocumentRoot指定してサーバ起動を行うこと。</p>\n<p>Webサーバ(H2O)の設定</p>\n<pre><code class=\"language-kibanahttp.conf\">hosts:\n &quot;example.com&quot;:\n    listen: 10090\n    paths:\n        /:\n         file.dir: /root/kibana-3.1.0\n\naccess-log: /root/kibanaaccess-log\nerror-log: /root/kibanaerror-log\npid-file: /root/kibanapid-file\n</code></pre>\n<p>iptablesのポート指定を忘れずに</p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/products/elasticsearch\">Elasticsearch</a></li>\n</ul>\n<p>RESTful APIを提供してくれるソフトウェア\n今回ならばアクセスログをJSONにしてKibanaで見れるようにする繋ぎ役をしている。\nなお、ElasticsearchはJavaを必要とする。</p>\n<p>インストール\nyumのレポジトリを追加を行う</p>\n<pre><code class=\"language-/etc/yum.repos.d/elasticsearch.repo\">[elasticsearch-1.1]\nname=Elasticsearch repository for 1.1.x packages\nbaseurl=http://packages.elasticsearch.org/elasticsearch/1.1/centos\ngpgcheck=1\ngpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch\nenabled=1\n</code></pre>\n<pre><code>yum install elasticsearch\n</code></pre>\n<p>Elasticsearchの起動</p>\n<pre><code>service elasticsearch start\n</code></pre>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.fluentd.org/\">Fluentd</a></li>\n</ul>\n<p>あらゆるイベント・変更を見て情報を転送するソフトウェア\nログの情報をElasticsearchに反映するために使用している。\nfluentdは様々なプラグインが提供されており gem で取得できる。\ngemを使用するためRubyインストールすることが必須になる。</p>\n<p>インストール</p>\n<pre><code>$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh\n# fluentdのプラグインをインストール\n$ td-agent-gem install fluent-plugin-elasticsearch\n</code></pre>\n<p>インストール後、fluentdの設定ファイルを編集する\n設定ファイルのオプションについては後日記載</p>\n<pre><code class=\"language-/etc/td-agent/td-agent.conf\">&lt;source&gt;\n  type tail    \n  format apache    # H2Oのアクセスログがapacheと似ていたためapacheで設定\n  path /root/access.log    # H2Oで出力されているアクセスログファイル\n  pos_file /var/log/td-agent/access.pos\n  tag h2o.access\n&lt;/source&gt;\n\n&lt;match h2o.access&gt;\n  type elasticsearch\n  host localhost\n  port 9200    # デフォルトではElasticsearchが9200で起動している\n  type_name h2o_access\n  logstash_format true\n&lt;/match&gt;\n</code></pre>\n<p>Fluentd起動</p>\n<pre><code>service td-agent start\n</code></pre>\n<p>もしtd-agent startが失敗する場合は\n/var/log/td-agent/td-agent.log\nを参照すること</p>\n<h1 id=\"参考サイト\">参考サイト</h1>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://j-caw.co.jp/blog/?p=1380\">CentOS 6.5 (Vagrant)に fluentd + elasticsearch + kibana をセットアップする | もふもふ技術部</a></li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/oikyn/items/f3e624b3cfd03b5cdb87\">fluentd × Elasticsearch × kibanaによるアクセスログ解析</a></li>\n</ul>\n\n</div>",
    "link": "/blogs/qiita/H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/3b3fba6c1ebeea821fd3b1d45aa1be8b663538efdab94122eb7e53519e93d4e8.png",
      "small": "/ogp/630x630/blogs/qiita/3b3fba6c1ebeea821fd3b1d45aa1be8b663538efdab94122eb7e53519e93d4e8.png"
    }
  },
  {
    "name": "2016-02-21 17-04-12 Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト",
    "publishedAt": "2016-02-21 17-04-12",
    "title": "Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト",
    "description": "  概要『こういったサイトを作ってみたかったんだよ!』OnsenUIでスマホアプリみたいなサイトを作ってみる よりhttp://qiita.com/igara/items/92d0",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<blockquote>\n<p>『こういったサイトを作ってみたかったんだよ!』\nOnsenUIでスマホアプリみたいなサイトを作ってみる より\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/92d0b58c4df21141429a\">http://qiita.com/igara/items/92d0b58c4df21141429a</a></p>\n</blockquote>\n<p>サイトでもアプリのように動きのあるものを扱っていたとき、\nこれどうやってテストコード化できるのだろうと疑問に思ったため\nやってみたという記事です。</p>\n<p>ソースは下記のレポジトリにあります。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/\">https://github.com/igara/syonet/</a></p>\n<h1 id=\"使ってみたもの\">使ってみたもの</h1>\n<ul>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.protractortest.org/#/\">Protractor</a>\nWebDriverとテストフレームワークを繋げてブラウザベースのテストができるE2Eテストフレームワーク</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mochajs.org/\">mocha</a>\nJavaScriptのユニットテストフレームワークの１つ</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/power-assert-js/power-assert\">power-assert</a>\nt_wadaさん作成のassertライブラリ</p>\n<blockquote>\n<p>テスト書いてないとかお前それ@t_wadaの前でも同じこと言えんの？</p>\n</blockquote>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.typescriptlang.org/\">TypeScript</a>\nAltJS\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/typings/typings\">Typings</a>より<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://definitelytyped.org/\">DefinitelyTyped</a>で管理されている様々な型情報ファイルを使うことでIDEによってはライブラリで扱っているものの入力補完できたりと便利。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://onsen.io/2/\">OnsenUI</a></p>\n</li>\n</ul>\n<p>2.0 Beta版を使用しています。</p>\n<h1 id=\"インストール\">インストール</h1>\n<ul>\n<li>npmパッケージインストール</li>\n</ul>\n<pre><code class=\"language-package.json\">{\n  &quot;version&quot;: &quot;0.0.1&quot;,\n  &quot;private&quot;: true,\n  &quot;devDependencies&quot;: {\n    &quot;angular&quot;: &quot;^1.5.0&quot;,\n    &quot;mocha&quot;: &quot;^2.4.5&quot;,\n    &quot;onsenui&quot;: &quot;^2.0.0-beta&quot;,\n    &quot;power-assert&quot;: &quot;^1.2.0&quot;,\n    &quot;protractor&quot;: &quot;^3.1.1&quot;,\n    &quot;typescript&quot;: &quot;^1.8.0&quot;,\n    &quot;typings&quot;: &quot;^0.6.7&quot;\n  }\n}\n</code></pre>\n<pre><code>npm install\n</code></pre>\n<ul>\n<li>d.tsインストール</li>\n</ul>\n<p>AngularとjQueryで\nvar $: JQueryStatic;の宣言が被ってしまうので\n独自でjQueryのd.tsファイルを加工しています。</p>\n<pre><code class=\"language-typings.json\">{\n  &quot;ambientDependencies&quot;: {\n    &quot;angular&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/angularjs/angular.d.ts#17ef40452039d19e06dc2a3815ea898c505860fa&quot;,\n    &quot;angular-protractor&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/angular-protractor/angular-protractor.d.ts#17fa1e5f269189f7f8e0f53f8c443e6c2eac562c&quot;,\n    &quot;empower&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/empower/empower.d.ts#aeb7701fbef3b7fc7261d67c025c823666ab98ea&quot;,\n    &quot;jquery&quot;: &quot;github:igara/DefinitelyTyped/jquery/jquery.d.ts#144ca38f83058b29f2b7b38c28e931a0139aa022&quot;,\n    &quot;mocha&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/mocha/mocha.d.ts#d6dd320291705694ba8e1a79497a908e9f5e6617&quot;,\n    &quot;node&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/node/node.d.ts#263705d313346e093d95cb62cef6fed848e46978&quot;,\n    &quot;onsenui&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/onsenui/onsenui.d.ts#76352a94c6e4a51e7f382aebaf0b63d9ac06ae12&quot;,\n    &quot;power-assert&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/power-assert/power-assert.d.ts#695da95a2405a9d6aae11944174227e1e7716e37&quot;,\n    &quot;power-assert-formatter&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/power-assert-formatter/power-assert-formatter.d.ts#aeb7701fbef3b7fc7261d67c025c823666ab98ea&quot;,\n    &quot;selenium-webdriver&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/selenium-webdriver/selenium-webdriver.d.ts#a83677ed13add14c2ab06c7325d182d0ba2784ea&quot;\n  }\n}\n</code></pre>\n<pre><code>typings install\n</code></pre>\n<h1 id=\"設定\">設定</h1>\n<ul>\n<li>Protractorの設定</li>\n</ul>\n<p>詳しいexports.configの情報として\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/angular/protractor/blob/master/docs/referenceConf.js\">referenceConf.js</a>に記載されています。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/e2echrome.js\">e2echrome.js</a></p>\n<pre><code class=\"language-e2echrome.js\">exports.config = {\n  seleniumAddress: &#39;http://127.0.0.1:4444/wd/hub&#39;,\n  framework: &#39;mocha&#39;, // mochaを使用する\n  mochaOpts: {        // mochaの設定\n    ui: &#39;bdd&#39;,        // テスト記述方法をビヘイビアで行う。tddも可能\n    reporter: &#39;dot&#39;,  // テスト結果出力方法。詳しくはhttps://mochajs.org/#reporters\n    slow: 3000,\n    enableTimeouts: false     // テスト中にタイムアウトさせるかの設定\n  },\n  specs: [&#39;tests/**/*.js&#39;],    // テスト対象ファイル\n  capabilities: {\n    &#39;browserName&#39;: &#39;chrome&#39;    // 使用ブラウザ\n  },\n  baseUrl: &#39;http://127.0.0.1:8000/&#39;\n};\n</code></pre>\n<h1 id=\"テストコード\">テストコード</h1>\n<h2 id=\"slidingmenuviewの表示・非表示のテスト例\">SlidingMenuViewの表示・非表示のテスト例</h2>\n<p>OnsenUIには画面上を横スワイプしたときに表示できる<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ja.onsen.io/reference/ons-sliding-menu.html\">SlidingMenu</a>というのがあります。\nテストコード上でどうやってスワイプの処理をさせ、表示の確認したかの一例紹介になります。</p>\n<p>ソースは<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/tests/e2e/syonetwork/SideMenuTest.ts\">SideMenuTest.ts</a></p>\n<ul>\n<li>スワイプ処理どうする?</li>\n</ul>\n<p>下記は、スワイプ処理のやり方としてマウスのイベントを用いて再現しようとしています。\n「マウス動かす→マウスクリックを押す→マウスを動かす→マウスクリックを離す」\nといった動きになります。</p>\n<pre><code>browser.actions()\n       .mouseMove(body, {x:browserSize.width / 2, y:browserSize.height / 2})\n       .mouseDown()\n       .mouseMove(body, {x:browserSize.width, y:browserSize.height / 2})\n       .mouseUp()\n       .perform();\n</code></pre>\n<ul>\n<li>SlidingMenuの表示確認どうする?</li>\n</ul>\n<p>SlidingMenuには<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ja.onsen.io/reference/ons-sliding-menu.html#method-isMenuOpened\">isMenuOpened()</a>というJavaScriptの関数を用いることでSlidingMenuの表示確認を行うことができます。</p>\n<p>ブラウザ内のJavaScriptの実行を行った結果を取得するために\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://angular.github.io/protractor/#/api?view=webdriver.WebDriver.prototype.executeAsyncScript\">executeAsyncScript</a>を用いてassertさせるやり方で確認をしています。</p>\n<pre><code>// ブラウザ内のJavaScriptを実行させる\nbrowser.executeAsyncScript(function() {\n    var callback = arguments[arguments.length - 1];\n    callback(menu.isMenuOpened());\n}).then(function(isMenu) {\n    assert.default(\n        isMenu === true,\n        &#39;error:サイドメニューが開かれていない&#39;);\n    // スリープさせる\n    browser.sleep(sleepTime);\n    // スクリーンショットを取る\n    browser.takeScreenshot().then(function(data) {\n        fs.writeFile(\n            &#39;screenshot/syonetwork/OpenedSideMenu.png&#39;,\n            data.replace(/^data:image\\/png;base64,/,&#39;&#39;), \n            &#39;base64&#39;,\n            function(error) {\n                if(error) throw error;\n            }\n        );\n    });\n});\n</code></pre>\n<p>isMenuOpened()で表示確認した後、スクリーンショットを取る処理も入れて見ました。</p>\n<p>menu.isMenuOpened()とありますがこいつは\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/resources/views/root/root_top.blade.php#L16\">root_top.blade.php</a>よりvarの属性が指定されているものになります。\n　<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ja.onsen.io/reference/ons-sliding-menu.html#attributes\">OnsenUIの属性について</a>\nTypeScriptを使っている場合、menuって型なんだっけ?となるので独自の型宣言のファイルを作ってあげてimportさせる必要が有ります。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/tests/e2e/SyonetWork.d.ts\">SyonetWork.d.ts</a></p>\n<h1 id=\"実行\">実行</h1>\n<p>ProtractorはWebDriverによるテストを行います。\nJavaのインストールと下記を実行</p>\n<p>WebDriver起動までにすること</p>\n<pre><code>\nnode_modules/protractor/bin/webdriver-manager update\nnode_modules/protractor/bin/webdriver-manager start \n</code></pre>\n<p>テストの実行</p>\n<pre><code>\nnode_modules/.bin/protractor e2echrome.js\n</code></pre>\n<h1 id=\"参考資料\">参考資料</h1>\n<p>Protractorの小ネタ\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/zoetro/items/6a82e066a8bb147c407a\">http://qiita.com/zoetro/items/6a82e066a8bb147c407a</a>\nAngularJS用テストフレームワーク「Protractor」チュートリアル日本語訳\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/weed/items/30098f7be2f753580f63\">http://qiita.com/weed/items/30098f7be2f753580f63</a>\nProtractor で起動したブラウザで任意の JavaScirpt コードを実行する\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/naoiwata/items/b389c27d7b19b6fa634d\">http://qiita.com/naoiwata/items/b389c27d7b19b6fa634d</a></p>\n\n</div>",
    "link": "/blogs/qiita/Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/3eaebc417773f73ed9242ac627b11100762a3139582bce382c1fa646be58a827.png",
      "small": "/ogp/630x630/blogs/qiita/3eaebc417773f73ed9242ac627b11100762a3139582bce382c1fa646be58a827.png"
    }
  },
  {
    "name": "2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話",
    "publishedAt": "2016-02-11 19-28-09",
    "title": "OWASP ZAPを使用してサイトの脆弱性と闘う話",
    "description": "  概要無料でサイトの脆弱性チェックできるツールのOWASP ZAPを使ってみて脆弱性対応をしてみたというお話である。OWASP ZAPのダウンロードは下記https://gith",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<p>無料でサイトの脆弱性チェックできるツールのOWASP ZAPを使ってみて\n脆弱性対応をしてみたというお話である。</p>\n<p>OWASP ZAPのダウンロードは下記\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/zaproxy/zaproxy/wiki/Downloads\">https://github.com/zaproxy/zaproxy/wiki/Downloads</a></p>\n<h1 id=\"使い方\">使い方</h1>\n<p>ところどころが日本語化されているので比較的に使いやすいかもしれない\nクイックスタートより攻撃対象URLを入力して攻撃！\n対象のサイトがどこかの外部サイトのものやCDNなどを使用されている場合は攻撃する前にURLの指定を外したほうが良い。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/0-md.png\" alt=\"スクリーンショット 2016-02-11 17.06.26.png\"></p>\n<h1 id=\"発生した脆弱性\">発生した脆弱性</h1>\n<h2 id=\"x-frame-optionsヘッダーの欠如\">X-Frame-Optionsヘッダーの欠如</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/1-md.png\" alt=\"スクリーンショット 2016-02-11 17.15.29.png\"></p>\n<p>「クリックジャッキング」攻撃を防止するために下記を追記することで対策できる。\n他のサイトからiframeによるアクセスができないようにするために行う内容である。</p>\n<p>.htaccessなら</p>\n<pre><code>Header set X-FRAME-OPTIONS &quot;DENY&quot;\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.set: &quot;X-Frame-Options: DENY&quot;\n</code></pre>\n<p>PHP側で対応する場合なら</p>\n<pre><code>header(&quot;X-Frame-Options: DENY&quot;);\n</code></pre>\n<h2 id=\"cookie-set-without-httponly-flag\">Cookie set without HttpOnly flag</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/2-md.png\" alt=\"スクリーンショット 2016-02-11 18.15.22.png\"></p>\n<p>CookieのセッションIDをJS経由で取得できてしまう脆弱性があるため\nCookieのセットの設定はHttpOnlyにしよう。</p>\n<p>.htaccessなら</p>\n<pre><code>session.cookie_httponly = On\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.append: &quot;Set-Cookie: HttpOnly&quot;\n</code></pre>\n<p>PHP側で対応する場合なら</p>\n<pre><code>ini_set(&#39;session.cookie_httponly&#39;, 1);\n</code></pre>\n<h2 id=\"cookie-set-without-secure-flag\">Cookie set without secure flag</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/3-md.png\" alt=\"スクリーンショット 2016-02-11 18.15.35.png\"></p>\n<p>secure属性を指定することでHTTPSの通信時のみクッキーを送信するようになるとのこと</p>\n<p>.htaccessなら</p>\n<pre><code>session.cookie_secure = On\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.append: &quot;Set-Cookie: secure&quot;\n</code></pre>\n<p>PHP側で対応する場合なら</p>\n<pre><code>ini_set(&#39;session.cookie_secure&#39;, 1);\n</code></pre>\n<h2 id=\"incomplete-or-no-cache-control-and-pragma-http-header-set\">Incomplete or No Cache-control and Pragma HTTP Header Set</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/4-md.png\" alt=\"スクリーンショット 2016-02-11 18.45.35.png\"></p>\n<p>SSL化されているのにキャッシュが許可されている場合に発生する問題</p>\n<p>.htaccessなら</p>\n<pre><code>Header set Pragma no-cache\nHeader set Cache-Control no-cache, no-store, must-revalidate\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.append: &quot;Cache-Control: no-cache, no-store, must-revalidate&quot;\nheader.set: &quot;Pragma: no-cache&quot;\n</code></pre>\n<p>PHPなら</p>\n<pre><code>header(&quot;Cache-Control: no-cache, no-store, must-revalidate&quot;);\nheader(&quot;Pragma: no-cache&quot;);\n</code></pre>\n<h2 id=\"web-browser-xss-protection-not-enabled\">Web Browser XSS Protection Not Enabled</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/5-md.png\" alt=\"スクリーンショット 2016-02-11 19.21.44.png\"></p>\n<p>クロスサイトスクリプティング防止機能が無効になっていると出てくる問題らしい</p>\n<p>.htaccessなら</p>\n<pre><code>Header always set X-XSS-Protection &quot;1; mode=block&quot;\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.set: &quot;X-XSS-Protection: 1; mode=block&quot;\n</code></pre>\n<p>PHPなら</p>\n<pre><code>header(&quot;X-XSS-Protection: 1; mode=block&quot;);\n</code></pre>\n<h1 id=\"最後に\">最後に</h1>\n<p>あまり脆弱性による問題点とかあげられていないのでその辺の追加編集をしていかないと、、、\nheaderに情報を追加したものが多かったがサーバの設定で追加するべきなのかプログラム側で追加するべきなのかも調べておかないと。</p>\n\n</div>",
    "link": "/blogs/qiita/OWASP ZAPを使用してサイトの脆弱性と闘う話",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/d03dee1e02fb9b92201d0a5c465649e0cdfa71a2577126d98a2538c34e14a595.png",
      "small": "/ogp/630x630/blogs/qiita/d03dee1e02fb9b92201d0a5c465649e0cdfa71a2577126d98a2538c34e14a595.png"
    }
  },
  {
    "name": "2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話",
    "publishedAt": "2016-01-31 18-48-40",
    "title": "PHPプロジェクトでいろいろなCIサービスを使ってみたというお話",
    "description": "  この記事の概要GitHubでコミット＆プッシュしたときに自動でテストを行ったり、PullRequest時では「このコード、コーディング規約違反してるよ！」とコメントしてくれるよ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の概要\">この記事の概要</h1>\n<p>GitHubでコミット＆プッシュしたときに自動でテストを行ったり、\nPullRequest時では「このコード、コーディング規約違反してるよ！」とコメントしてくれるようなサービスの紹介になる。</p>\n<p>PHPプロジェクトについて下記のレポジトリが対象\nURL:<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet\">https://github.com/igara/syonet</a></p>\n<h1 id=\"sideci\">SideCI</h1>\n<p>URL:<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.sideci.com/\">https://www.sideci.com/</a>\nPullRequestを出した時にコミットしたファイルの静的解析を行い、\nコーディング規約違反している対象の行に対してコメントを追加してくれる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/0-md.png\" alt=\"スクリーンショット 2016-01-31 18.11.05.png\">\n上記はnamespaceの指定がなく、規約に反していますというコメントの例である。</p>\n<p>PSRの規約に準じてコメントがされているので\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/FriendsOfPHP/PHP-CS-Fixer\">php-cs-fixer</a>をフォーマッタとして用いれば大抵は修正される。\n（namespaceの違反は修正されないが、）</p>\n<p>コード修正をし、規約どおりになると下記のようにコメントが隠れるようになる。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/1-md.png\" alt=\"スクリーンショット 2016-01-31 18.13.27.png\"></p>\n<p>この時のPullRequestの例として下記になる。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/pull/48\">https://github.com/igara/syonet/pull/48</a></p>\n<p>PHP以外にTypeScriptとかも静的解析を行っていただける。</p>\n<h1 id=\"travisci\">TravisCI</h1>\n<p>URL:<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://travis-ci.org/\">https://travis-ci.org/</a></p>\n<p>レポジトリにプッシュされた後に\nいろいろな言語のバージョンによるビルドを自動的に行ってくれるサービス\n主にPHPUnitの実行とカバレッジの取得用に使っている。</p>\n<p>カバレッジ取得するために\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/satooshi/php-coveralls\">php-coveralls</a>を使用している。</p>\n<p>composerで導入する時は下記を実行する。</p>\n<pre><code>composer require satooshi/php-coveralls --dev\n</code></pre>\n<p>.travis.ymlに行いたいタスクを記載し、レポジトリのルートに置くことで自動でビルドが行われる。</p>\n<pre><code class=\"language-.travis.yml\">\n\nlanguage: php\n\nphp:\n    # 下記はビルド対象のPHPバージョン\n    - 5.6\n    - 7.0\n    - hhvm\n    - nightly\n\nbefore_script:\n    # laravelの環境設定ファイルの作成\n    - cp -p .env.example .env\n    # composerは30日毎にupdateすること責められる...\n    - composer self-update\n    - composer install\n    - php artisan key:generate\n\nscript:\n    # PHPUnitを実行し、ガバレッジを取得する\n    - mkdir -p build/logs\n    - chmod -R 777 build/logs\n    - vendor/bin/phpunit --coverage-clover build/logs/clover.xml\n\nafter_success:\n    # coverallsにカバレッジの反映をさせる\n    - travis_retry php vendor/bin/coveralls -v\n</code></pre>\n<p>TravisCIはcomposerやxdebugが使える模様。</p>\n<p>下記は各PHPのバージョンによるビルドの結果になる。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/2-md.png\" alt=\"スクリーンショット 2016-01-31 18.23.31.png\"></p>\n<p>README.mdにビルドの状態がわかるようにバッチを置くことができる。\n↓こいつ\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://travis-ci.org/igara/syonet\"><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/3-md.svg\" alt=\"Build Status\"></a></p>\n<h1 id=\"coveralls\">Coveralls</h1>\n<p>カバレッジの結果をパーセント表示にしたり、カバレッジを元にPHPUnitのassertの状態を確認できたりできる。</p>\n<p>.coveralls.ymlを設置する必要があるので下記を記載した。</p>\n<pre><code class=\"language-.coveralls.yml\">\ncoverage_clover: build/logs/clover.xml\njson_path: build/logs/coveralls-upload.json\nservice_name: travis-ci\nexclude_no_stmt: true\n</code></pre>\n<p>TravisCIと同様にバッチの設置ができる。\n↓こいつ\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://coveralls.io/github/igara/syonet?branch=master\"><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/4-md.svg\" alt=\"Coverage Status\"></a></p>\n<h1 id=\"参考記事\">参考記事</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/noboru_i/items/23827b655ac854ba04b2\">規約に沿ってないPHPコードを駆逐する</a></p>\n\n</div>",
    "link": "/blogs/qiita/PHPプロジェクトでいろいろなCIサービスを使ってみたというお話",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/9d5615537d3666fd54a7485841414d1656276f4f61419f71fc14bf56a068e737.png",
      "small": "/ogp/630x630/blogs/qiita/9d5615537d3666fd54a7485841414d1656276f4f61419f71fc14bf56a068e737.png"
    }
  },
  {
    "name": "2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる",
    "publishedAt": "2016-01-23 23-50-05",
    "title": "vorlon.jsを使って端末のリモートデバッグしてみる",
    "description": "  vorlon.jsとは公式ページhttp://vorlonjs.com/Microsoft Build 2015より発表されたWebアプリケーション用のリモートデバッガツールW",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"vorlonjsとは\">vorlon.jsとは</h1>\n<ul>\n<li>公式ページ<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://vorlonjs.com/\">http://vorlonjs.com/</a></li>\n</ul>\n<p>Microsoft Build 2015より発表された\nWebアプリケーション用のリモートデバッガツール</p>\n<p>Web上で使えるchrome developer toolsみたいなもの。</p>\n<h2 id=\"インストール\">インストール</h2>\n<p>前提にNodeJSがインストール済みであること。</p>\n<pre><code>\nnpm install --save-dev vorlon\n</code></pre>\n<p>すると\nnode_modulesというディレクトリに「.bin」と「vorlon」というのができる。</p>\n<h2 id=\"設定\">設定</h2>\n<p>この設定はプロキシ経由でデバッグを行いたいときや\nlocalhostではないホストでデバッグの結果を見たいときに\nやっておくと便利な設定。</p>\n<pre><code class=\"language-node_modules/vorlon/Server/config.json\">\n{\n    &quot;baseURL&quot;: &quot;&quot;,\n    &quot;useSSLAzure&quot;:false,\n    &quot;useSSL&quot;: false,\n    &quot;SSLkey&quot;: &quot;../cert/server.key&quot;,\n    &quot;SSLcert&quot;: &quot;../cert/server.crt&quot;,\n    &quot;includeSocketIO&quot;: true,\n    &quot;activateAuth&quot;: false,\n    &quot;username&quot;: &quot;&quot;,\n    &quot;password&quot;: &quot;&quot;,\n    &quot;plugins&quot;: [\n        { &quot;id&quot;: &quot;CONSOLE&quot;, &quot;name&quot;: &quot;Interactive Console&quot;, &quot;panel&quot;: &quot;bottom&quot;, &quot;foldername&quot;: &quot;interactiveConsole&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;DOM&quot;, &quot;name&quot;: &quot;Dom Explorer&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;domExplorer&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;MODERNIZR&quot;, &quot;name&quot;: &quot;Modernizr&quot;, &quot;panel&quot;: &quot;bottom&quot;, &quot;foldername&quot;: &quot;modernizrReport&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;OBJEXPLORER&quot;, &quot;name&quot;: &quot;Obj. Explorer&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;objectExplorer&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;XHRPANEL&quot;, &quot;name&quot;: &quot;XHR&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;xhrPanel&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;NGINSPECTOR&quot;, &quot;name&quot;: &quot;Ng. Inspector&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;ngInspector&quot;, &quot;enabled&quot;: false },\n        { &quot;id&quot;: &quot;NETWORK&quot;, &quot;name&quot;: &quot;Network Monitor&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;networkMonitor&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;RESOURCES&quot;, &quot;name&quot;: &quot;Resources Explorer&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;resourcesExplorer&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;DEVICE&quot;, &quot;name&quot;: &quot;My Device&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;device&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;UNITTEST&quot;, &quot;name&quot;: &quot;Unit Test&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;unitTestRunner&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;BABYLONINSPECTOR&quot;, &quot;name&quot;: &quot;Babylon Inspector&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;babylonInspector&quot;, &quot;enabled&quot;: false },\n        { &quot;id&quot;: &quot;WEBSTANDARDS&quot;, &quot;name&quot;: &quot;Best practices&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;webstandards&quot;, &quot;enabled&quot;: true }\n    ],\n    &quot;port&quot;: 1337,\n    &quot;enableWebproxy&quot; : true,\n    &quot;baseProxyURL&quot;: &quot;&quot;,\n    &quot;proxyPort&quot; : 5050,\n    &quot;proxyEnvPort&quot;: false,\n    &quot;vorlonServerURL&quot;: &quot;http://[ホスト名]:1337&quot;,\n    &quot;vorlonProxyURL&quot;: &quot;http://[ホスト名]:5050&quot;\n}\n</code></pre>\n<h2 id=\"起動\">起動</h2>\n<pre><code>\nnode ./node_modules/.bin/vorlon &amp;\n</code></pre>\n<p>これでデバック用のvorlonサーバが起動する。</p>\n<h2 id=\"使い方\">使い方</h2>\n<p><strong>デバッグ方法は2つある！</strong></p>\n<p>1 . proxyを経由させて行う。</p>\n<p>サーバを起動して下記ページに遷移する。\nhttp://[ホスト名]:1337/httpproxy</p>\n<p>するとこんな感じの画面が出てくる</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/0-md.png\" alt=\"スクリーンショット 2016-01-23 23.02.05.png\"></p>\n<p>入力フォームにデバッグしたいページのURLを入れて\n「Inspect with VORLON.JS」を押すと\nproxy経由で見たデバッグしたい画面と\nchromeで見たことがあるような画面が出てくる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/1-md.png\" alt=\"スクリーンショット 2016-01-23 23.07.03.png\"></p>\n<p>これでデバッグできる状態になる。</p>\n<p>2 . デバッグしたいページにデバックのスクリプトを追記する。</p>\n<pre><code>\n&lt;script src=&quot;http://[ホスト名]:1337/vorlon.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>たまにこの方法の方が効率が良いときがある。\n1に記載した方法は端末によって実行できない場合がある。\n「Inspect with VORLON.JS」を押してもproxy経由の画面が表示されないことがあった。</p>\n<p>上記のスクリプトを埋め込んだ後、\nデバッグしたいページをブラウザに表示させればデバック状態にできる。</p>\n<h2 id=\"どういったことができるのか一例を記載\">どういったことができるのか一例を記載</h2>\n<p>詳しくは公式のプラグインの記載を見ること。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://vorlonjs.com/plugins/\">http://vorlonjs.com/plugins/</a></p>\n<p>参考として事例の記載をしている。\n画像はAndroidエミュレータからデバックを行っている例である。</p>\n<ul>\n<li>レイヤーの確認</li>\n</ul>\n<p>HTMLの書き換えもできる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/2-md.gif\" alt=\"レイヤーの確認\"></p>\n<ul>\n<li>js console</li>\n</ul>\n<p>alert以外にconsole.logも行うことができる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/3-md.gif\" alt=\"js console\"></p>\n<h2 id=\"最後に\">最後に</h2>\n<p>どんなブラウザの環境でもある程度のデバッグができるのはすごく良い。</p>\n<p>safariとchromeの\nWeb Inspectorの記事も書かなければ</p>\n\n</div>",
    "link": "/blogs/qiita/vorlon.jsを使って端末のリモートデバッグしてみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/5aaa6cd71c5a1595312dc3415c6f1d788a208e55f05f4a293ed3f67e906924bf.png",
      "small": "/ogp/630x630/blogs/qiita/5aaa6cd71c5a1595312dc3415c6f1d788a208e55f05f4a293ed3f67e906924bf.png"
    }
  },
  {
    "name": "2015-12-30 17-34-38 [メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）",
    "publishedAt": "2015-12-30 17-34-38",
    "title": "[メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）",
    "description": "  レンタルサーバをお借りしているとたまに意図せずにサーバが落ちてしまうことがあるので再起動した時に自動で独自のサービスを起動させるためのメモchkconfigchkconfigの",
    "body": "<div class=\"markdown-body\">\n  <p>レンタルサーバをお借りしていると\nたまに意図せずにサーバが落ちてしまうことがあるので\n再起動した時に自動で独自のサービスを起動させるためのメモ</p>\n<h1 id=\"chkconfig\">chkconfig</h1>\n<p>chkconfigの設定が必要そう!</p>\n<p>詳しい話は下記リンク参照\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://blog.jicoman.info/2014/04/centos_init_script/\">http://blog.jicoman.info/2014/04/centos_init_script/</a></p>\n<h1 id=\"自動起動するスクリプトを書く\">自動起動するスクリプトを書く</h1>\n<p>テスト的に記載</p>\n<p><strong>本来ならばコマンド失敗時にログを残すなどしないと!</strong></p>\n<pre><code>vi /etc/rc.d/init.d/syonet\n</code></pre>\n<pre><code class=\"language-/etc/rc.d/init.d/syonet\">\n#!/bin/bash\n# chkconfig: 345 99 1\n# description: syonet\n# processname: syonet\n\nstart(){\n    if [ -e /root/.phpenv/versions/7.0.0/sbin/php-fpm ]; then\n        nohup /root/.phpenv/versions/7.0.0/sbin/php-fpm &amp;\n    else\n        echo &quot;/root/.phpenv/versions/7.0.0/sbin/php-fpmがないよ!&quot;\n    fi\n\n    if [ -e /root/http.conf ]; then\n        nohup h2o -c /root/http.conf &amp;\n    else\n        echo &quot;h2oのコンフィグファイル/root/http.confがないよ!&quot;\n    fi\n\n    if [ -e /root/c9sdk/server.js ] &amp;&amp; [ -d /root/slack_rack_php ]; then\n        nohup node /root/c9sdk/server.js -p 8080 -a XXX:XXX -w /root/slack_rack_php/ &amp;\n    else\n        echo &quot;cloud9をcloneした？syonetのcloneは?&quot;\n    fi\n\n    return 0;\n}\nstop(){\n    echo &quot;not stop&quot;\n    return 0\n}\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/5d37c1a277d39f19a51b7da510d3bfc47d112e56edc14074a24858c51abb1c3a.png",
      "small": "/ogp/630x630/blogs/qiita/5d37c1a277d39f19a51b7da510d3bfc47d112e56edc14074a24858c51abb1c3a.png"
    }
  },
  {
    "name": "2015-12-15 01-07-45 [メモ]TypeScriptの設定・用語など",
    "publishedAt": "2015-12-15 01-07-45",
    "title": "[メモ]TypeScriptの設定・用語など",
    "description": "  TypeScriptMicroSoftによって開発されたAltJS。動的型付けの通常のJavaScriptに対し、静的型付けができるES6という立場である。TSDを用いれば既存",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"typescript\">TypeScript</h1>\n<p>MicroSoftによって開発されたAltJS。\n動的型付けの通常のJavaScriptに対し、静的型付けができるES6という立場である。\nTSDを用いれば既存のJavaScriptライブラリに型情報を加えることのでき、jQueryといったライブラリに対しても型情報を提供してくれる。</p>\n<h1 id=\"環境構築\">環境構築</h1>\n<p>前提としてNodeJSがインストールされていること。\n例のごとくlaravelのプロジェクト構成を前提に説明を行う。</p>\n<h2 id=\"npm-install\">npm install</h2>\n<pre><code>\n$ npm install typescript --save-dev\n$ npm install tsd --save-dev\n$ npm install gulp --save-dev\n$ npm install gulp-shell --save-dev\n$ npm install gulp-tsconfig-update --save-dev\n</code></pre>\n<h2 id=\"エディタ\">エディタ</h2>\n<h3 id=\"visual-studio-code\">Visual Studio Code</h3>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-15 01-07-45 [メモ]TypeScriptの設定・用語など/0-md.gif\" alt=\"vsc\"></p>\n<p>個人的にはCodeの方でTypeScript書くことが多いかもしれない\ngif画像の例ではimportされていたファイル名を変更して\nわざとimportのエラーが発生していることを表示している。</p>\n<h3 id=\"atom\">Atom</h3>\n<p>あらゆるスニペッドが揃ってて何かと使用するAtom。ただAtomのプラグインとしてTypeScriptの開発をしている以上、ここはVSCに慣れるようにしよう。</p>\n<p>AtomのAPI仕様変更について過去このようなことがあった\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://flabo.io/code/20150430/01-start-typescript-independently-of-windows/\">http://flabo.io/code/20150430/01-start-typescript-independently-of-windows/</a></p>\n<h3 id=\"公式のplayground\">公式のPlayground</h3>\n<p>遊ぶ分には下記のサイトでも十分</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.typescriptlang.org/Playground\">http://www.typescriptlang.org/Playground</a></p>\n<h1 id=\"設定\">設定</h1>\n<h2 id=\"tscコマンド\">tscコマンド</h2>\n<p>tsconfig.jsonに指定できるものが多くあるためちょくちょく記載する。\nデフォルト値とかおいおい書くこと</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">プロパティ</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">--declaration</td>\n<td align=\"left\">.tsファイルから.d.tsファイルを作成する。</td>\n</tr>\n<tr>\n<td align=\"left\">--help</td>\n<td align=\"left\">コンパイラのヘルプを表示</td>\n</tr>\n<tr>\n<td align=\"left\">--version</td>\n<td align=\"left\">tscのバージョンを表示</td>\n</tr>\n<tr>\n<td align=\"left\">--module</td>\n<td align=\"left\">CommonJSやAMDのモジュールの指定をしてビルドを行える</td>\n</tr>\n<tr>\n<td align=\"left\">--project</td>\n<td align=\"left\">対象のディレクトリを指定</td>\n</tr>\n<tr>\n<td align=\"left\">--target</td>\n<td align=\"left\">ECMAScriptのバージョンを指定</td>\n</tr>\n<tr>\n<td align=\"left\">--watch</td>\n<td align=\"left\">常駐状態になり、projectで変更があったファイルを自動ビルドする</td>\n</tr>\n<tr>\n<td align=\"left\">--charset</td>\n<td align=\"left\">ビルド後の文字コードを指定する</td>\n</tr>\n<tr>\n<td align=\"left\">--diagnostics</td>\n<td align=\"left\">ビルドの結果を表示する</td>\n</tr>\n<tr>\n<td align=\"left\">--emitBOM</td>\n<td align=\"left\">出力ファイルの先頭にUTF- 8バイトオーダーマークを出力する</td>\n</tr>\n<tr>\n<td align=\"left\">--emitDecoratorMetadata[1]</td>\n<td align=\"left\">ソースで装飾された型宣言のメタデータ出力する</td>\n</tr>\n<tr>\n<td align=\"left\">--inlineSourceMap</td>\n<td align=\"left\">別のファイルのソースと合わせて1つのファイルを出力する。</td>\n</tr>\n<tr>\n<td align=\"left\">--inlineSources</td>\n<td align=\"left\">1つのファイル内のmapファイルと一緒にソースを出力する</td>\n</tr>\n<tr>\n<td align=\"left\">--isolatedModules</td>\n<td align=\"left\">無条件に未解決のファイルのインポートする</td>\n</tr>\n<tr>\n<td align=\"left\">--jsx</td>\n<td align=\"left\">JSXのサポート &#39;React&#39; や &#39;Preserve&#39;をサポート</td>\n</tr>\n<tr>\n<td align=\"left\">--listFiles</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--locale</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--mapRoot</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--moduleResolution[1]</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--newLine</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noEmit</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noEmitOnError</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noEmitHelpers</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noImplicitAny</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noLib</td>\n<td align=\"left\">デフォルトではライブラリファイル（ lib.d.ts ）が含まれていない</td>\n</tr>\n<tr>\n<td align=\"left\">--noResolve</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--out</td>\n<td align=\"left\">このオプションの仕様は推奨されていない。代わりに--outfileを使用すること。</td>\n</tr>\n<tr>\n<td align=\"left\">--outDir</td>\n<td align=\"left\">ディレクトリへの出力構造を保つ</td>\n</tr>\n<tr>\n<td align=\"left\">--outFile</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--preserveConstEnums</td>\n<td align=\"left\">生成されたコード内の定数enum宣言を消去させない</td>\n</tr>\n<tr>\n<td align=\"left\">--removeComments</td>\n<td align=\"left\">コンパイル後のソースファイル内の全てのコメントを削除します！ *</td>\n</tr>\n<tr>\n<td align=\"left\">--rootDir</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--sourceMap</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--sourceRoot</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--stripInternal[1]</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--suppressImplicitAnyIndexErrors</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noImplicitAny</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"tsconfigjson\">tsconfig.json</h2>\n<p>tsconfig.jsonとはtscビルドするときの設定ファイル\ntscコマンドのオプションをキーとして値を入れてあげれば tsc と打つだけで好みのビルドがされる。</p>\n<p>一旦下記で作成</p>\n<pre><code class=\"language-tsconfig.json\">\n{\n    &quot;compilerOptions&quot;: {\n        &quot;module&quot;: &quot;commonjs&quot;,\n        &quot;project&quot;: &quot;./&quot;,\n        &quot;removeComments&quot;: true,\n        &quot;noImplicitAny&quot;: true,\n        &quot;noLib&quot; : false,\n        &quot;declaration&quot; : false,\n        &quot;preserveConstEnums&quot;: true,\n        &quot;experimentalDecorators&quot;: true,\n        &quot;emitDecoratorMetadata&quot;: true,\n        &quot;suppressImplicitAnyIndexErrors&quot;: true,\n        &quot;sourceMap&quot;: false,\n        &quot;target&quot;: &quot;ES3&quot;\n    }\n}\n</code></pre>\n<h2 id=\"tsd\">tsd</h2>\n<p>*.d.tsファイルと呼ばれる型定義ファイルを管理するパッケージ\nTypeScriptで他のモジュールをインポート行いたいときに型定義ファイルを用いる</p>\n<pre><code class=\"language-型定義ファイルのインストール\">\n./node_modules/.bin/tsd install jquery --save\n</code></pre>\n<p>インストール後、tsd.jsonで管理されるようになる。</p>\n<pre><code class=\"language-tsd.jsonの例\">\n{\n  &quot;version&quot;: &quot;v4&quot;,\n  &quot;repo&quot;: &quot;borisyankov/DefinitelyTyped&quot;,\n  &quot;ref&quot;: &quot;master&quot;,\n  &quot;path&quot;: &quot;typings&quot;,\n  &quot;bundle&quot;: &quot;typings/tsd.d.ts&quot;,\n  &quot;installed&quot;: {\n    &quot;angularjs/angular.d.ts&quot;: {\n      &quot;commit&quot;: &quot;5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff&quot;\n    },\n    &quot;jquery/jquery.d.ts&quot;: {\n      &quot;commit&quot;: &quot;5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff&quot;\n    },\n    &quot;angular2/angular2.d.ts&quot;: {\n      &quot;commit&quot;: &quot;8ea42cd8bb11863ed6f242d67c502288ebc45a7b&quot;\n    }\n  }\n}\n</code></pre>\n<p>型定義ファイルはtypingsというディレクトリ内に配置される。</p>\n<h2 id=\"gulp-tsconfig-update\">gulp-tsconfig-update</h2>\n<p>tsconfig.jsonに対し、ビルド行いたいtsファイルの追加を行うパッケージ</p>\n<p>下記のページを見てtscとgulp-typescriptやgulp-tscなどのパッケージとの依存をなくすためにtsconfigでビルド対象を管理させるのは良いことだと感じられる。</p>\n<p>gulp.srcのglobからtsconfig.jsonのfilesを更新するプラグインを作った\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/laco0416/items/a51b7534ddc4aec63875\">http://qiita.com/laco0416/items/a51b7534ddc4aec63875</a>\nTypeScript の開発環境構築と周辺ツールの紹介\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://html5experts.jp/vvakame/17004/\">https://html5experts.jp/vvakame/17004/</a></p>\n<p>tsconfigが正常に設定させる利点としてVisual Studio Codeで開発がしやすくなるとのこと</p>\n<h2 id=\"gulpの設定\">gulpの設定</h2>\n<p>TypeScriptのビルドをタスクランさせる設定を記載する。</p>\n<pre><code class=\"language-gulpfile.json\">\nvar gulp = require(&#39;gulp&#39;);\n\ngulp.task(&#39;tsbuild&#39;, function() {\n    var shell = require(&#39;gulp-shell&#39;);\n    // tsファイルのビルド\n    gulp.src(&#39;&#39;).pipe(shell(&#39;./node_modules/.bin/tsc&#39;));\n\n    /* resources/assets/ts/docs/下に存在する、ビルドで作成されたjsファイルを\n       public/js/docs/下にディレクトリ構造ごとコピーする */\n    gulp.src(&#39;resources/assets/ts/docs/**/*.js&#39;)\n        .pipe(gulp.dest(&#39;public/js/docs/&#39;)); \n});\n\ngulp.task(&#39;tsconfig&#39;, function() {\n    var tsConfig = require(&#39;gulp-tsconfig-update&#39;);\n    \n    // ビルド対象のファイルを指定する\n    gulp.src(\n        &#39;resources/assets/ts/**/*.ts&#39;).pipe(tsConfig());\n});\n</code></pre>\n<p>先にtsconfigの更新を行う</p>\n<pre><code>\n$ ./node_modules/.bin/gulp tsconfig\n</code></pre>\n<p>するとtsconfig.jsonが下記のようになる。</p>\n<pre><code class=\"language-tsconfig.json\">\n{\n    &quot;compilerOptions&quot;: {\n        &quot;module&quot;: &quot;commonjs&quot;,\n        &quot;project&quot;: &quot;./&quot;,\n        &quot;removeComments&quot;: true,\n        &quot;noImplicitAny&quot;: true,\n        &quot;noLib&quot; : false,\n        &quot;declaration&quot; : false,\n        &quot;preserveConstEnums&quot;: true,\n        &quot;experimentalDecorators&quot;: true,\n        &quot;emitDecoratorMetadata&quot;: true,\n        &quot;suppressImplicitAnyIndexErrors&quot;: true,\n        &quot;sourceMap&quot;: false,\n        &quot;target&quot;: &quot;ES3&quot;\n    },\n    &quot;files&quot;: [\n        &quot;resources/assets/ts/docs/screen/common/home_component.ts&quot;,\n        &quot;resources/assets/ts/docs/screen/common/tabbar_template.ts&quot;,\n        &quot;resources/assets/ts/docs/screen/common/controller/home_controller.ts&quot;\n    ]\n}\n</code></pre>\n<p>tsファイルのビルド</p>\n<pre><code>\n$ ./node_modules/.bin/gulp tsbuild\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-15 01-07-45 [メモ]TypeScriptの設定・用語など/1-md.png\" alt=\"スクリーンショット 2015-12-18 2.18.24.png\"></p>\n<p>public下にjsが作成された。</p>\n<h1 id=\"typescriptの書き方\">TypeScriptの書き方</h1>\n<p>ES6の書き方がほぼほぼだがまずは書く</p>\n<p>公式でお試しにコードがかけるのがあるので遊んでみよう\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.typescriptlang.org/Playground\">http://www.typescriptlang.org/Playground</a></p>\n<p>開いたときに挨拶するためのクラスがPlayground上に表示されるので既存のコードを元に説明を行う</p>\n<h2 id=\"クラス構文\">クラス構文</h2>\n<p>ES6をばりばり使うなら絶対使いたい構文\nオブジェクト指向な書き方っぽい</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    greet() {\n        return &quot;Hello, &quot; + this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"const\">const</h2>\n<p>var以外の変数の1つとしてconstが追加\nこれを使用することで変数の値が書き換わることのない変数宣言ができる。</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        const hello = &#39;hello&#39;;\n        // 下記のコメントはconstに対して値変更を行おうとしているため使用できない\n        // hello = this.hello + this.greeting;\n        this.hello = hello + this.greeting;\n        return this.hello + this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"let\">let</h2>\n<p>letを使用するとブロックの中と外で同じ変数名でもスコープを分けてくる。\n今まで通り、varを使用することができるのでブロック内で変数を変更するコードはvarで宣言させてあげよう。</p>\n<pre><code>class Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        // ifの外では&#39;hello&#39;として扱う\n        let hello = &#39;hello&#39;;\n        if (true) {\n            // ifの中でのhello変数は&#39;hello2&#39;として扱う\n            let hello = &#39;hello2&#39;;\n            alert(hello);\n        }\n        this.hello = hello + this.greeting;\n        return this.hello;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"アロー\">アロー</h2>\n<p>ES6でもおなじみ\nコールバック・無名関数に値渡して行うやり方をアローで行える。</p>\n<pre><code>\nlet greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\ngreet.forEach(args =&gt; alert(args));\n</code></pre>\n<p>短い（確信）\n今までのjsで書くとこんな感じになる。</p>\n<pre><code>\nvar greet = [&#39;hello&#39;, &#39;bye&#39;];\ngreet.forEach(function (args) {\n    return alert(args);\n});\n</code></pre>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        // 配列の中身はstring\n        let greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\n        // さりげなくアロー使って無名関数の記述を省略させる\n        greet.forEach(args =&gt; alert(args));\n\n        this.greeting = greet + this.greeting;\n        return this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"型宣言\">型宣言</h2>\n<p>ES6とTypeScriptで圧倒的に違う点として型宣言周り</p>\n<h3 id=\"暗黙的な型宣言（型推論）\">暗黙的な型宣言（型推論）</h3>\n<p>下記例では\nlet hello = &#39;hello&#39;;\nとした箇所が暗黙的にstring型扱いされてしまっているためnumberが入らない例</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        let hello = &#39;hello&#39;;\n        /* 暗黙的型宣言を行われているので数値型を入れようとすると\n           エラー出力される */\n        // hello = 1;\n        this.hello = hello + this.greeting;\n        return this.hello;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<p>たまにライブラリの型宣言ファイルのインポートをしたときに変に想定されてない型を用いようとしエラーが出る場合がある。\n解決方法としてこれで良いのか置いといて別の型を扱う場合は\nanyを用いることで回避できる。</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:any = &#39;hello&#39;;\n\n    greet() {\n        let hello:any = &#39;hello&#39;;\n        /* anyとしているため数値型を用いることができる */\n        hello = 1;\n        this.hello = hello + this.greeting;\n        return this.hello;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h3 id=\"保証されている型\">保証されている型</h3>\n<h4 id=\"プリミティブ型\">プリミティブ型</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">型</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">number</td>\n<td align=\"left\">数値を扱う型</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td align=\"left\">ブール値を扱う型</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">文字列値を扱う型</td>\n</tr>\n<tr>\n<td align=\"left\">void</td>\n<td align=\"left\">関数が値を返さないことを表す型</td>\n</tr>\n<tr>\n<td align=\"left\">any</td>\n<td align=\"left\">全ての型の上位にある型</td>\n</tr>\n</tbody></table>\n<h4 id=\"配列\">配列</h4>\n<p>型を宣言して配列を作成すると指定した型以外を用いることができなくできる。\n型推論で数値型、文字列型が混在するときはanyになるが\nあらかじめ入れる物の型が決まってしまっている場合は型を指定してしまった方が良い</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        // 配列の中身はstring\n        let greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\n        // さりげなくアロー使って無名関数の記述を省略させる\n        greet.forEach(args =&gt; alert(args));\n\n        this.greeting = greet + this.greeting;\n        return this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h4 id=\"オプショナル\">オプショナル</h4>\n<p>TypeScriptは宣言と呼び出しに厳しい言語\n関数の宣言に引数がある場合、引数を与えなければならないが\n引数の後ろに * ? * を置くことで引数がなくても扱うことができる</p>\n<p>下記はコンストラクタを無理やりオプショナルにさせた実行例\n基本的にオプショナルを扱うのはやめよう</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message?: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        let greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\n        greet.forEach(args =&gt; alert(args));\n        \n        this.greeting = greet + this.greeting;\n        return this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter();\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]TypeScriptの設定・用語など",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/904978d79171d0fee485e772e01a808e73946e560c60fef9857055f93aff7c9c.png",
      "small": "/ogp/630x630/blogs/qiita/904978d79171d0fee485e772e01a808e73946e560c60fef9857055f93aff7c9c.png"
    }
  },
  {
    "name": "2015-12-05 16-24-40 [メモ]phpenvとphp-buildを用いたPHPバージョンアップ",
    "publishedAt": "2015-12-05 16-24-40",
    "title": "[メモ]phpenvとphp-buildを用いたPHPバージョンアップ",
    "description": "  前もこんな記事書いてました[メモ]GentooにH2O+PHP7.0.0RC4をインストールする。http://qiita.com/igara/items/1b7cd8e714",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"前もこんな記事書いてました\">前もこんな記事書いてました</h1>\n<p>[メモ]GentooにH2O+PHP7.0.0RC4をインストールする。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/1b7cd8e714844440795d\">http://qiita.com/igara/items/1b7cd8e714844440795d</a></p>\n<p>今回はアップデートについて記載</p>\n<h1 id=\"起動中のphp-fpmを停止させる\">起動中のphp-fpmを停止させる</h1>\n<pre><code># php-fpmプロセスを調べる\nps -ef\n\nphp-fpm: master process (/root/.\nnobody   23272 23271  0 16:09 ?        00:00:00 \n↑これがphp-fpmのプロセスで23272がプロセスID\nphp-fpm: pool www\nnobody   23273 23271  0 16:09 ?        00:00:00 php-fpm: pool www\nroot     23274     2  0 16:09 ?        00:00:00 [kworker/0:2]\nroot     23322     2  0 16:14 ?        00:00:00 [kworker/0:0]\n\nkill 23271\n</code></pre>\n<h1 id=\"php-buildを更新する\">php-buildを更新する</h1>\n<p>以前、phpのソースをビルドした場合コンフリクトを発生させるためresetする必要がある。</p>\n<pre><code>\ncd .phpenv/plugins/php-build/\ngit reset --hard\ngit pull\n</code></pre>\n<h1 id=\"php700をビルドする\">php7.0.0をビルドする</h1>\n<pre><code>\nphpenv install 7.0.0\nphpenv global 7.0.0\nphpenv local 7.0.0\nphpenv rehash\n</code></pre>\n<pre><code>\n# 設定ファイルの適応\ncd /root/.phpenv/versions/7.0.0/etc/\ncp php-fpm.conf.default php-fpm.conf\ncd /root/.phpenv/versions/7.0.0/etc/php-fpm.d/\ncp www.conf.default www.conf\n</code></pre>\n<p>#php7.0.0のphp-fpmを起動する</p>\n<pre><code>\n~/.phpenv/versions/7.0.0/sbin/php-fpm &amp;\n</code></pre>\n<h1 id=\"完了\">完了!</h1>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 16-24-40 [メモ]phpenvとphp-buildを用いたPHPバージョンアップ/0-md.png\" alt=\"スクリーンショット 2015-12-05 16.23.34.png\"></p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]phpenvとphp-buildを用いたPHPバージョンアップ",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/df74e0e77f5488349516e53a78e1d9ef68194c74e138e6d65bec71527c4eba41.png",
      "small": "/ogp/630x630/blogs/qiita/df74e0e77f5488349516e53a78e1d9ef68194c74e138e6d65bec71527c4eba41.png"
    }
  },
  {
    "name": "2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる",
    "publishedAt": "2015-12-05 15-01-14",
    "title": "OnsenUIでスマホアプリみたいなサイトを作ってみる",
    "description": "  OnsenUIとはモバイル向けに作られたHTML5フレームワーククラウドIDEのmonacaでも用いられており、Webでもネイティブアプリでも使えるハイブリットなアプリ作りに貢",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"onsenuiとは\">OnsenUIとは</h1>\n<p>モバイル向けに作られたHTML5フレームワーク\nクラウドIDEのmonacaでも用いられており、Webでもネイティブアプリでも使えるハイブリットなアプリ作りに貢献しているようだ。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://docs.monaca.mobi/2.9/ja/onsenui/\">http://docs.monaca.mobi/2.9/ja/onsenui/</a></p>\n<h1 id=\"こういったサイトを作ってみたかったんだよ\">こういったサイトを作ってみたかったんだよ!</h1>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/0-md.gif\" alt=\"タイトルなし.gif\"></p>\n<p>タブバーとスワイプでサイドナビゲーションが表示されるサイト</p>\n<h1 id=\"作成方法など\">作成方法など</h1>\n<p>laravelで作成されたプロジェクトを対象に説明</p>\n<h2 id=\"npm-install\">npm install</h2>\n<p>nodejsインストールされている前提で説明\n下記を実行してライブラリをダウンロード</p>\n<pre><code>\nnpm install gulp --save-dev\nnpm install angular --save-dev\nnpm install onsenui --save-dev\n</code></pre>\n<h2 id=\"gulp-task\">gulp task</h2>\n<pre><code class=\"language-gulpfile.js\">\nvar gulp = require(&#39;gulp&#39;);\n\ngulp.task(&#39;import&#39;, function() {\n\n    // onsenUIをpublic下に設置する。\n    var onsenUIPath = &#39;node_modules/onsenui&#39;;\n    gulp.src(onsenUIPath + &#39;/css/**&#39;)\n        .pipe(gulp.dest(&#39;public/css/lib/onsenui&#39;));\n    gulp.src(onsenUIPath + &#39;/js/**&#39;)\n        .pipe(gulp.dest(&#39;public/js/lib/onsenui&#39;));\n\n    // AngularJSをpublic下に設置する。\n    var angularJSPath = &#39;node_modules/angular&#39;;\n    gulp.src(angularJSPath + &#39;/angular.min.js&#39;)\n        .pipe(gulp.dest(&#39;public/js/lib/angular&#39;));\n    gulp.src(angularJSPath + &#39;/angular-csp.css&#39;)\n        .pipe(gulp.dest(&#39;public/css/lib/angular&#39;));\n\n}\n</code></pre>\n<p>gulpのタスクを実行する。</p>\n<pre><code>\n# プロジェクトのディレクトリ配下にいるときに下記実行\n./node_modules/.bin/gulp import\n</code></pre>\n<p>これでpublic下にcss,jsファイルが移動されるはず。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/1-md.png\" alt=\"スクリーンショット 2015-12-05 14.39.33.png\"></p>\n<h2 id=\"プロジェクトのresources下を編集\">プロジェクトのresources下を編集</h2>\n<p>使うのは\nlaravelでデフォルトで作成されているwelcome.blade.phpと\n新規で作成したwelcome/common/***.brade.php</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/2-md.png\" alt=\"スクリーンショット 2015-12-05 14.09.38.png\"></p>\n<h3 id=\"welcomebladephpの編集\">welcome.blade.phpの編集</h3>\n<pre><code class=\"language-welcome.blade.php\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link href=&quot;../css/lib/onsenui/onsenui.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n    &lt;link href=&quot;../css/lib/onsenui/onsen-css-components-dark-theme.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/lib/systemjs/system.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/lib/angular/angular.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/lib/onsenui/onsenui.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n        ons.bootstrap();\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n@include(&#39;welcome.common.header&#39;)\n@include(&#39;welcome.common.menu&#39;)\n@include(&#39;welcome.common.footer&#39;)\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"ファイルの新規作成\">ファイルの新規作成</h3>\n<h4 id=\"画面下のタブを構成するテンプレートを作成する\">画面下のタブを構成するテンプレートを作成する</h4>\n<pre><code class=\"language-footer.blade.php\">\n&lt;!-- フッター --&gt;\n&lt;ons-template id=&quot;tabbar.html&quot;&gt;\n    &lt;ons-tabbar var=&quot;tabbar&quot;&gt;\n        &lt;ons-tab page=&quot;home.html&quot; label=&quot;Home&quot; icon=&quot;ion-home&quot; active=&quot;true&quot;&gt;&lt;/ons-tab&gt;\n      &lt;ons-tab page=&quot;comments.html&quot; label=&quot;Comments&quot; icon=&quot;ion-chatbox-working&quot;&gt;&lt;/ons-tab&gt;\n      &lt;ons-tab page=&quot;tags.html&quot; label=&quot;Tags&quot; icon=&quot;ion-ios-pricetag&quot;&gt;&lt;/ons-tab&gt;\n      &lt;ons-tab page=&quot;settings.html&quot; label=&quot;Settings&quot; icon=&quot;ion-ios-cog&quot;&gt;\n    &lt;/ons-tab&gt;\n  &lt;/ons-tabbar&gt;\n&lt;/ons-template&gt;\n&lt;!-- /フッター --&gt;\n</code></pre>\n<h4 id=\"各メニューのページ内容を表示するテンプレートを作成する\">各メニューのページ内容を表示するテンプレートを作成する</h4>\n<pre><code class=\"language-menu.blade.php\">\n&lt;ons-sliding-menu var=&quot;menu&quot; menu-page=&quot;menu.html&quot; main-page=&quot;tabbar.html&quot; side=&quot;left&quot; type=&quot;push&quot; max-slide-distance=&quot;200px&quot;&gt;\n&lt;/ons-sliding-menu&gt;\n\n&lt;!-- サイドメニュー --&gt;\n&lt;ons-template id=&quot;menu.html&quot;&gt;\n  &lt;ons-list&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(0), menu.closeMenu()&quot;&gt;\n      Home\n    &lt;/ons-list-item&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(1), menu.closeMenu()&quot;&gt;\n      Comments\n    &lt;/ons-list-item&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(2), menu.closeMenu()&quot;&gt;\n      Tags\n    &lt;/ons-list-item&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(3), menu.closeMenu()&quot;&gt;\n      Settings\n    &lt;/ons-list-item&gt;\n  &lt;/ons-list&gt;\n&lt;/ons-template&gt;\n&lt;!-- /サイドメニュー --&gt;\n\n&lt;!-- メニューのコンテンツ内容 --&gt;\n&lt;ons-template id=&quot;home.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Home\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;comments.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Comments\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;tags.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Tags\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;settings.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Setting\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n&lt;!-- /メニューのコンテンツ内容 --&gt;\n</code></pre>\n<h4 id=\"ヘッダー部\">ヘッダー部</h4>\n<pre><code class=\"language-header.blade.php\">&lt;!-- ヘッダー --&gt;\n&lt;ons-template id=&quot;header.html&quot;&gt;\n    &lt;ons-toolbar&gt;\n        &lt;div class=&quot;left&quot;&gt;\n            &lt;!-- サイドメニューを表示する三表示 --&gt;\n            &lt;ons-toolbar-button ng-click=&quot;menu.toggleMenu()&quot;&gt;\n                &lt;ons-icon icon=&quot;bars&quot;&gt;&lt;/ons-icon&gt;\n            &lt;/ons-toolbar-button&gt;\n        &lt;/div&gt;\n        &lt;!-- タイトル --&gt;\n        &lt;div class=&quot;center&quot;&gt;SyoNet&lt;/div&gt;\n    &lt;/ons-toolbar&gt;\n    &lt;!-- フッターを呼び出す --&gt;\n    &lt;ng-include src=&quot;&#39;tabbar.html&#39;&quot;&gt;&lt;/ng-include&gt;\n&lt;/ons-template&gt;\n&lt;!-- /ヘッダー --&gt;\n</code></pre>\n<p>これでサイドナビゲーションとタブバーの実装ができる</p>\n<h1 id=\"所感\">所感</h1>\n<p>今回はサーバ側で各コンテンツのテンプレートを全て静的に取得したが、\nせっかくAngularJS使っているのならば「ng-include」を用いてボタンタップ時にhtmlの内容を動的に取得しに行くのもいいなと感じた。\n初期で表示する部分はサーバで作成し、タップ後の処理はクライアントに任せてしまうのが良さそう。</p>\n<p>次世代バージョンでOnsenUI2やAngular2とかでているがどちらもalpha版、beta版である。\nOnsenUIの一部コンポーネントはAngularを用いなくても使えるようだがサイドナビゲーションなどはangularを用いらないといけないようである。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://onsen.io/2/reference/javascript.html\">http://onsen.io/2/reference/javascript.html</a></p>\n<p>2015/12/5時点\nOnsenUI2ではまだサイドナビゲーションが使えない模様\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/OnsenUI/OnsenUI/issues/1038\">https://github.com/OnsenUI/OnsenUI/issues/1038</a></p>\n<p>2015/12/25時点\nOnsenUI2でサイドナビゲーションが使えるようになった！</p>\n<h1 id=\"全てhtmlで管理させる\">全てHTMLで管理させる</h1>\n<p>ほぼほぼ上記で書いていたことと同じになるが</p>\n<p>ディレクトリ構造として</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/3-md.png\" alt=\"スクリーンショット 2015-12-06 16.27.21.png\"></p>\n<pre><code class=\"language-public/docs/screen/top/design/design.html\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link href=&quot;../../../../css/lib/onsenui/onsenui.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n        &lt;link href=&quot;../../../../css/lib/onsenui/onsen-css-components-dark-theme.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;../../../../js/lib/systemjs/system.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;../../../../js/lib/angular/angular.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;../../../../js/lib/onsenui/onsenui.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script&gt;\n            ons.bootstrap();\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;ng-include src=&quot;&#39;../../common/design/design_menu.html&#39;&quot;&gt;&lt;/ng-include&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"language-public/docs/screen/common/design/design_footer.html\">\n&lt;!-- フッター --&gt;\n&lt;ons-tabbar var=&quot;tabbar&quot;&gt;\n    &lt;ons-tab page=&quot;home.html&quot; label=&quot;Home&quot; icon=&quot;ion-home&quot; active=&quot;true&quot;&gt;&lt;/ons-tab&gt;\n    &lt;ons-tab page=&quot;comments.html&quot; label=&quot;Comments&quot; icon=&quot;ion-chatbox-working&quot;&gt;&lt;/ons-tab&gt;\n    &lt;ons-tab page=&quot;tags.html&quot; label=&quot;Tags&quot; icon=&quot;ion-ios-pricetag&quot;&gt;&lt;/ons-tab&gt;\n    &lt;ons-tab page=&quot;settings.html&quot; label=&quot;Settings&quot; icon=&quot;ion-ios-cog&quot;&gt;\n    &lt;/ons-tab&gt;\n&lt;/ons-tabbar&gt;\n&lt;!-- /フッター --&gt;\n</code></pre>\n<pre><code class=\"language-public/docs/screen/common/design/design_menu.html\">\n&lt;ons-sliding-menu var=&quot;menu&quot; menu-page=&quot;menu.html&quot; main-page=&quot;../../common/design/design_header.html&quot; side=&quot;left&quot; type=&quot;push&quot; max-slide-distance=&quot;200px&quot;&gt;\n&lt;/ons-sliding-menu&gt;\n\n&lt;!-- サイドメニュー --&gt;\n&lt;ons-template id=&quot;menu.html&quot;&gt;\n    &lt;ons-list&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(0), menu.closeMenu()&quot;&gt;\n            Home\n        &lt;/ons-list-item&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(1), menu.closeMenu()&quot;&gt;\n            Comments\n        &lt;/ons-list-item&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(2), menu.closeMenu()&quot;&gt;\n            Tags\n        &lt;/ons-list-item&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(3), menu.closeMenu()&quot;&gt;\n            Settings\n        &lt;/ons-list-item&gt;\n    &lt;/ons-list&gt;\n&lt;/ons-template&gt;\n&lt;!-- /サイドメニュー --&gt;\n\n&lt;!-- メニューのコンテンツ内容 --&gt;\n&lt;ons-template id=&quot;home.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Home\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;comments.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Comments\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;tags.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Tags\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;settings.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Setting\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n&lt;!-- /メニューのコンテンツ内容 --&gt;\n</code></pre>\n<pre><code class=\"language-public/docs/screen/common/design/design_header.html\">\n&lt;!-- ヘッダー --&gt;\n&lt;ons-toolbar&gt;\n    &lt;div class=&quot;left&quot;&gt;\n        &lt;!-- サイドメニューを表示する三表示 --&gt;\n        &lt;ons-toolbar-button ng-click=&quot;menu.toggleMenu()&quot;&gt;\n            &lt;ons-icon icon=&quot;bars&quot;&gt;&lt;/ons-icon&gt;\n        &lt;/ons-toolbar-button&gt;\n    &lt;/div&gt;\n    &lt;!-- タイトル --&gt;\n    &lt;div class=&quot;center&quot;&gt;SyoNet&lt;/div&gt;\n&lt;/ons-toolbar&gt;\n&lt;!-- /ヘッダー --&gt;\n\n&lt;!-- フッターを呼び出す --&gt;\n&lt;ng-include src=&quot;&#39;../../common/design/design_footer.html&#39;&quot;&gt;&lt;/ng-include&gt;\n</code></pre>\n<p>たまに描画ができないときがある</p>\n\n</div>",
    "link": "/blogs/qiita/OnsenUIでスマホアプリみたいなサイトを作ってみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/52fcc214fbf6ceace41af2b4359cf5a760e560b799531eb5d37ae56ac4abb0e9.png",
      "small": "/ogp/630x630/blogs/qiita/52fcc214fbf6ceace41af2b4359cf5a760e560b799531eb5d37ae56ac4abb0e9.png"
    }
  },
  {
    "name": "2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる",
    "publishedAt": "2015-11-14 18-30-24",
    "title": "[メモ]OpenShiftでRedmineを作成してRedmineと戯れる",
    "description": "  OpenShiftのアカウントを作成する下記サイトから登録https://www.openshift.com/アプリケーション(Redmineのプロジェクト)の追加を行うログイ",
    "body": "<div class=\"markdown-body\">\n  <h3 id=\"openshiftのアカウントを作成する\">OpenShiftのアカウントを作成する</h3>\n<p>下記サイトから登録\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.openshift.com/\">https://www.openshift.com/</a></p>\n<h3 id=\"アプリケーションredmineのプロジェクトの追加を行う\">アプリケーション(Redmineのプロジェクト)の追加を行う</h3>\n<p>ログイン後の下記URLからアプリケーションの追加を行う\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openshift.redhat.com/app/console/applications\">https://openshift.redhat.com/app/console/applications</a></p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/0-md.png\" alt=\"スクリーンショット 2015-11-14 16.43.11.png\"></p>\n<p>Add Application...をクリック</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/1-md.png\" alt=\"スクリーンショット 2015-11-14 16.44.35.png\"></p>\n<p>redmineで検索してみると候補に上がってくる。</p>\n<p>設定画面の説明は割愛\nCreateをクリックするとビルドが始まるのでしばらく待つ。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/2-md.png\" alt=\"スクリーンショット 2015-11-14 16.53.43.png\"></p>\n<p>ビルドが完了後、青色のモザイク部分のリンクをクリックして\nRedmineの画面を開く\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/3-md.png\" alt=\"スクリーンショット 2015-11-14 17.11.09.png\"></p>\n<h3 id=\"redmine-apiと戯れる\">Redmine APIと戯れる</h3>\n<h4 id=\"rest-apiの使用許可\">REST APIの使用許可</h4>\n<p>許可しなくても取得できるものもあるが\n管理-&gt;設定-&gt;認証から\nREST APIの使用を許可する（注意）。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/4-md.png\" alt=\"スクリーンショット 2015-11-14 17.18.01.png\"></p>\n<h4 id=\"apiの一覧\">APIの一覧</h4>\n<p>公式の説明は下記\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.redmine.org/projects/redmine/wiki/Rest_api\">http://www.redmine.org/projects/redmine/wiki/Rest_api</a></p>\n<p>APIが出力されるフォーマットとしてxml,jsonを対応している。</p>\n<h5 id=\"project-プロジェクト-api\">Project プロジェクト API</h5>\n<p>公式\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.redmine.org/projects/redmine/wiki/Rest_Projects\">http://www.redmine.org/projects/redmine/wiki/Rest_Projects</a></p>\n<p>プロジェクトの一覧を取得するとき\nGET\nhttp://{RedmineのURL}/projects.xml</p>\n<p>こんな感じのが取得できる</p>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;projects total_count=&quot;2&quot; offset=&quot;0&quot; limit=&quot;25&quot; type=&quot;array&quot;&gt;\n  &lt;project&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;name&gt;さんぷる&lt;/name&gt;\n    &lt;identifier&gt;sample&lt;/identifier&gt;\n    &lt;description/&gt;\n    &lt;created_on&gt;2015-11-14T08:14:05Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T08:14:05Z&lt;/updated_on&gt;\n  &lt;/project&gt;\n  &lt;project&gt;\n    &lt;id&gt;2&lt;/id&gt;\n    &lt;name&gt;サンプルだ&lt;/name&gt;\n    &lt;identifier&gt;sampleda&lt;/identifier&gt;\n    &lt;description/&gt;\n    &lt;created_on&gt;2015-11-14T09:48:02Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T09:48:02Z&lt;/updated_on&gt;\n  &lt;/project&gt;\n&lt;/projects&gt;\n\n</code></pre>\n<p>IDかidentifilterからプロジェクトを取得するとき\nGET\nhttp://{RedmineのURL}/projects/{idかidentifilter}.xml\n出力される内容はプロジェクトの一覧取得するのに対して絞り込んで\n出力されるような結果になる。</p>\n<h5 id=\"time-entries-工数-api\">Time Entries 工数 API</h5>\n<p>公式の説明は下記\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.redmine.org/projects/redmine/wiki/Rest_TimeEntries\">http://www.redmine.org/projects/redmine/wiki/Rest_TimeEntries</a></p>\n<p>積まれていった工数時間を取得するとき\nGET\nhttp://{RedmineのURL}/time_entries.xml</p>\n<p>デロデロ出る</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;time_entries total_count=&quot;2&quot; offset=&quot;0&quot; limit=&quot;25&quot; type=&quot;array&quot;&gt;\n  &lt;time_entry&gt;\n    &lt;id&gt;2&lt;/id&gt;\n    &lt;project id=&quot;2&quot; name=&quot;サンプルだ&quot;/&gt;\n    &lt;issue id=&quot;3&quot;/&gt;\n    &lt;user id=&quot;3&quot; name=&quot;igara&quot;/&gt;\n    &lt;activity id=&quot;2&quot; name=&quot;さんぷる&quot;/&gt;\n    &lt;hours&gt;8.0&lt;/hours&gt;\n    &lt;comments&gt;\n    &lt;/comments&gt;\n    &lt;spent_on&gt;2015-11-14&lt;/spent_on&gt;\n    &lt;created_on&gt;2015-11-14T10:02:50Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T10:02:50Z&lt;/updated_on&gt;\n  &lt;/time_entry&gt;\n  &lt;time_entry&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;project id=&quot;1&quot; name=&quot;さんぷる&quot;/&gt;\n    &lt;issue id=&quot;1&quot;/&gt;\n    &lt;user id=&quot;1&quot; name=&quot;Redmine Admin&quot;/&gt;\n    &lt;activity id=&quot;2&quot; name=&quot;さんぷる&quot;/&gt;\n    &lt;hours&gt;2.5&lt;/hours&gt;\n    &lt;comments&gt;\n    &lt;/comments&gt;\n    &lt;spent_on&gt;2015-11-14&lt;/spent_on&gt;\n    &lt;created_on&gt;2015-11-14T09:38:19Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T09:38:19Z&lt;/updated_on&gt;\n  &lt;/time_entry&gt;\n&lt;/time_entries&gt;\n</code></pre>\n<h3 id=\"redmineのプラグインを追加する\">Redmineのプラグインを追加する</h3>\n<h4 id=\"ssh接続する\">SSH接続する</h4>\n<p>下記を参照にアプリケーションのサーバにSSHできるようにする。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developers.openshift.com/en/managing-remote-connection.html\">https://developers.openshift.com/en/managing-remote-connection.html</a></p>\n<h4 id=\"worktime\">WorkTime</h4>\n<pre><code>\ncd ~/app-root/repo/plugins\nwget https://bitbucket.org/tkusukawa/redmine_work_time/downloads/redmine_work_time-0.3.1.zip\nunzip redmine_work_time-0.3.1.zip\ncd ~/app-root/repo/\nrake redmine:plugins:migrate RAILS_ENV=production\n</code></pre>\n<p>OpenShiftのアプリケーション画面から再起動をかける\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/5-md.png\" alt=\"スクリーンショット 2015-11-14 18.26.11.png\"></p>\n<p>これでRedmineの画面右上から工数を確認できるようになる\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/6-md.png\" alt=\"スクリーンショット 2015-11-14 18.28.58.png\"></p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]OpenShiftでRedmineを作成してRedmineと戯れる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/4511618d15c3e174c7794a520661f89005322ef9bebcfc5b5e1cbbf83164104f.png",
      "small": "/ogp/630x630/blogs/qiita/4511618d15c3e174c7794a520661f89005322ef9bebcfc5b5e1cbbf83164104f.png"
    }
  },
  {
    "name": "2015-11-12 00-44-09 [メモ]Djangoのプロジェクト作成と用語",
    "publishedAt": "2015-11-12 00-44-09",
    "title": "[メモ]Djangoのプロジェクト作成と用語",
    "description": "  MTV型フレームワークModel 　　データのまとまりTemplete 画面表示する雛形View 　　 画面遷移先の制御http://djangoproject.jp/doc/",
    "body": "<div class=\"markdown-body\">\n  <h2 id=\"mtv型フレームワーク\">MTV型フレームワーク</h2>\n<p>Model 　　データのまとまり\nTemplete 画面表示する雛形\nView 　　 画面遷移先の制御</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://djangoproject.jp/doc/ja/1.0/faq/general.html\">http://djangoproject.jp/doc/ja/1.0/faq/general.html</a></p>\n<h2 id=\"環境構築\">環境構築</h2>\n<h4 id=\"pythonのパッケージソフトウェア管理ツールをインストール\">Pythonのパッケージソフトウェア管理ツールをインストール</h4>\n<pre><code>sudo easy_install pip\n</code></pre>\n<h4 id=\"djangoのインストール\">Djangoのインストール</h4>\n<pre><code>sudo pip install django\n</code></pre>\n<h2 id=\"プロジェクトの作成\">プロジェクトの作成</h2>\n<pre><code>django-admin.py startproject プロジェクト名\n</code></pre>\n<p>下記の様な物が作成される\nプロジェクト名\n├── manage.py\n├── プロジェクト名\n│   ├── <strong>init</strong>.py\n│   ├── settings.py\n│   ├── urls.py\n│   ├── wsgi.py</p>\n<h2 id=\"マイグレーションの利用に関して\">マイグレーションの利用に関して</h2>\n<pre><code>python manage.py startapp アプリケーション名\n</code></pre>\n<p>下記の様なのが構成される\n├── アプリケーション名\n│   ├── <strong>init</strong>.py\n│   ├── admin.py // DBをいじるための管理画面に必要な物\n│   ├── models.py // DB Model\n│   ├── tests.py\n│   └── views.py</p>\n<p>Modelを作成する\nadminの設定を行う</p>\n<pre><code>python manage.py makemigrations アプリケーション名\n</code></pre>\n<p>アプリケーションにモデルを基にmigrationsの追加構成される\n├── アプリケーション名\n│   ├── <strong>init</strong>.py\n│   ├── admin.py\n│   ├── migrations // DBの定義構成するためのファイルがある\n│   │   ├── 0001_initial.py\n│   │   └── <strong>init</strong>.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py</p>\n<pre><code>python manage.py syncdb\n</code></pre>\n<p>DB定義更新的な物</p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]Djangoのプロジェクト作成と用語",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/3305f5b07f510f33fa5ee8cd7d71389ecb09c0e5c2fda6fa41cfda3d4cdae6ba.png",
      "small": "/ogp/630x630/blogs/qiita/3305f5b07f510f33fa5ee8cd7d71389ecb09c0e5c2fda6fa41cfda3d4cdae6ba.png"
    }
  },
  {
    "name": "2015-11-08 15-44-21 [メモ]WebKitをWatchする",
    "publishedAt": "2015-11-08 15-44-21",
    "title": "[メモ]WebKitをWatchする",
    "description": "  最新のブラウザ事情を知るためのメモWebKitプロジェクトのML登録様々なMLがあるためその説明を行う。公式の説明として下記リンクになる。http://www.webkit.o",
    "body": "<div class=\"markdown-body\">\n  <p>最新のブラウザ事情を知るためのメモ</p>\n<h2 id=\"webkitプロジェクトのml登録\">WebKitプロジェクトのML登録</h2>\n<p>様々なMLがあるためその説明を行う。\n公式の説明として下記リンクになる。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.webkit.org/contact.html\">http://www.webkit.org/contact.html</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#119;&#x65;&#x62;&#107;&#x69;&#x74;&#45;&#100;&#x65;&#x76;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#101;&#x62;&#x6b;&#105;&#x74;&#x2e;&#x6f;&#x72;&#x67;\">&#119;&#x65;&#x62;&#107;&#x69;&#x74;&#45;&#100;&#x65;&#x76;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#101;&#x62;&#x6b;&#105;&#x74;&#x2e;&#x6f;&#x72;&#x67;</a>\n開発者用ML</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#119;&#101;&#x62;&#x6b;&#x69;&#x74;&#x2d;&#x68;&#101;&#x6c;&#x70;&#x40;&#108;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#98;&#x6b;&#x69;&#x74;&#x2e;&#x6f;&#114;&#103;\">&#119;&#101;&#x62;&#x6b;&#x69;&#x74;&#x2d;&#x68;&#101;&#x6c;&#x70;&#x40;&#108;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#98;&#x6b;&#x69;&#x74;&#x2e;&#x6f;&#114;&#103;</a>\nWebKitのAPIや構築する方法などを質問するためのML</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#119;&#101;&#x62;&#x6b;&#105;&#116;&#x2d;&#117;&#110;&#97;&#x73;&#x73;&#x69;&#103;&#x6e;&#x65;&#100;&#x40;&#108;&#x69;&#x73;&#116;&#x73;&#46;&#119;&#101;&#x62;&#107;&#x69;&#116;&#46;&#111;&#x72;&#103;\">&#119;&#101;&#x62;&#x6b;&#105;&#116;&#x2d;&#117;&#110;&#97;&#x73;&#x73;&#x69;&#103;&#x6e;&#x65;&#100;&#x40;&#108;&#x69;&#x73;&#116;&#x73;&#46;&#119;&#101;&#x62;&#107;&#x69;&#116;&#46;&#111;&#x72;&#103;</a>\nBugzilaに起票された新しいバグの通知がされるML</p>\n<p>﻿﻿<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#x77;&#x65;&#x62;&#107;&#x69;&#116;&#45;&#114;&#101;&#x76;&#x69;&#101;&#x77;&#x73;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#x62;&#x6b;&#x69;&#116;&#46;&#x6f;&#x72;&#103;\">&#x77;&#x65;&#x62;&#107;&#x69;&#116;&#45;&#114;&#101;&#x76;&#x69;&#101;&#x77;&#x73;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#x62;&#x6b;&#x69;&#116;&#46;&#x6f;&#x72;&#103;</a>\nBugzilaに起票されているレビュー待ちのものが通知されるML</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#x77;&#101;&#x62;&#107;&#x69;&#116;&#45;&#x63;&#104;&#x61;&#x6e;&#103;&#101;&#x73;&#64;&#x6c;&#105;&#115;&#x74;&#x73;&#x2e;&#119;&#x65;&#98;&#107;&#105;&#116;&#46;&#111;&#x72;&#x67;\">&#x77;&#101;&#x62;&#107;&#x69;&#116;&#45;&#x63;&#104;&#x61;&#x6e;&#103;&#101;&#x73;&#64;&#x6c;&#105;&#115;&#x74;&#x73;&#x2e;&#119;&#x65;&#98;&#107;&#105;&#116;&#46;&#111;&#x72;&#x67;</a>\nコミットされた変更点を通知するML</p>\n<p>MLの登録は下記で行える。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.webkit.org/contact.html\">http://www.webkit.org/contact.html</a></p>\n<h2 id=\"公式ページについて\">公式ページについて</h2>\n<h3 id=\"今後の状態確認\">今後の状態確認</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/status.html\">https://www.webkit.org/status.html</a>\n今後の対応であったり、対応が完了されているか確認することができる。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://planet.webkit.org/\">http://planet.webkit.org/</a>\n現状動いている仕様の確認ができる。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/coding/coding-style.html\">https://www.webkit.org/coding/coding-style.html</a>\nWebKitのコーディング規約</p>\n<h2 id=\"bugzila\">Bugzila</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bugs.webkit.org/\">https://bugs.webkit.org/</a>\nアカウントはNew Accountより登録できる。</p>\n<p>登録しなくてもBrowseより起票されているものを見ることができる。\nNew Bugsと書かれているのを開くと新しいバグの内容を確認できる。</p>\n<h2 id=\"webkit-のソース\">WebKit のソース</h2>\n<p>公式\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/building/checkout.html\">https://www.webkit.org/building/checkout.html</a>\nより\nミラーとしてGitHubにも公開されている。</p>\n<p>ソースチェックアウト後のビルドは下記参照\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/building/build.html\">https://www.webkit.org/building/build.html</a></p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]WebKitをWatchする",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/e9251be01d51e4501d7aa8d092b2556e0a8806661af5de4cc0e8e6ae295a0d8d.png",
      "small": "/ogp/630x630/blogs/qiita/e9251be01d51e4501d7aa8d092b2556e0a8806661af5de4cc0e8e6ae295a0d8d.png"
    }
  },
  {
    "name": "2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて",
    "publishedAt": "2015-10-25 16-05-14",
    "title": "StoryBoardを生かしたアプリ作りについて",
    "description": "  概要StoryBoardを用いることで画面遷移がコードで実装しなくても楽に行うことができるようになったが、StoryBoardを一部分割したい、1つのStoryBoardで多数",
    "body": "<div class=\"markdown-body\">\n  <h4 id=\"概要\">概要</h4>\n<p>StoryBoardを用いることで画面遷移がコードで実装しなくても楽に行うことができるようになったが、\nStoryBoardを一部分割したい、1つのStoryBoardで多数のViewControllerを用いて処理の分割したい\nといった内容について投稿してみる。</p>\n<h4 id=\"container-view-controller\">Container View Controller</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/0-md.png\" alt=\"スクリーンショット 2015-10-25 15.45.02.png\"></p>\n<p>iOS5から使えるようになった機能\nStoryBoard上のViewControllerに子のViewControllerを配置することができる。\nよくやることとして\nUITableViewの処理をUITableViewControllerのサブクラスに置いてあげて、\nStroyBoard上のUITableViewControllerのクラスをサブクラス指定してあげて、\nContainerViewControllerにSegueさせるということをやっている。\nTabelViewの中身が静的な物であればStoryBoard上に直接書くというのも考えてもいいと思う。\nViewControllerの肥大化を防ぐことにも繋がるのではなかろうか。</p>\n<p>この時のクラス構成としてはこうなった。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/1-md.png\" alt=\"スクリーンショット 2015-10-25 15.49.11.png\">\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/2-md.png\" alt=\"スクリーンショット 2015-10-25 15.49.43.png\"></p>\n<h4 id=\"storyboard-reference\">StoryBoard Reference</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/3-md.png\" alt=\"スクリーンショット 2015-10-25 16.02.38.png\"></p>\n<p>この機能はXcode7から用いることができるようになった機能\nStoryBoardの特徴として\n1つのStoryBoardで画面構成を作成することができるが\n多人数の開発だと競合を多発させる場面が出るだろう。\nできるだけ競合を防ぐためにもStoryBoardは細かく作っていきたい。\n個人的には1つのStoryBoardで1つだけの画面を作っていきたい派である。\nちょっと前ではStoryBoardを分割するためにコード上でStoryBoard上のViewControllerを呼び出してpushさせるということをやっていたがそれをInterfaceBuilder上でできるのはすごい。</p>\n<p>上の図ではChannelListと記載されたセルをタップした時に\n別のStroyBoardを呼ぶようになっている。</p>\n\n</div>",
    "link": "/blogs/qiita/StoryBoardを生かしたアプリ作りについて",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/154dec5e62825b4a2434bdde2462b1d3f18362f097a7d9682fbdb767e4a354f5.png",
      "small": "/ogp/630x630/blogs/qiita/154dec5e62825b4a2434bdde2462b1d3f18362f097a7d9682fbdb767e4a354f5.png"
    }
  },
  {
    "name": "2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる",
    "publishedAt": "2015-10-24 15-35-32",
    "title": "[メモ]H2OでHTTP／2を使ってみる",
    "description": "  前提H2Oインストール済みであることhttp://qiita.com/igara/items/1b7cd8e714844440795dopensslをインストール済みであること",
    "body": "<div class=\"markdown-body\">\n  <h3 id=\"前提\">前提</h3>\n<p>H2Oインストール済みであること\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/1b7cd8e714844440795d\">http://qiita.com/igara/items/1b7cd8e714844440795d</a></p>\n<p>opensslをインストール済みであること</p>\n<h3 id=\"オレオレ認証書を作成する\">オレオレ認証書を作成する</h3>\n<pre><code>\n$ openssl genrsa 2048 &gt; server.key\n$ openssl req -new -key server.key &gt; server.csr\n$ openssl x509 -days 3650 -req -signkey server.key &lt; server.csr &gt; server.crt\n</code></pre>\n<p>設定はお好きに</p>\n<h3 id=\"h2oのコンフィグを作成\">H2Oのコンフィグを作成</h3>\n<p>http通信用に作成</p>\n<pre><code class=\"language-h2o.conf\">\nhosts:\n &quot;example.com&quot;:\n    listen:\n     port: 8000\n    paths:\n        /:\n         file.dir: /home/vagrant/web/slack_rack_php/public\n         redirect:\n           url: /index.php/\n           internal: YES\n           status: 307\n\nfile.custom-handler:\n extension: .php\n fastcgi.connect:\n  host: 127.0.0.1\n  port: 9000\n  type: tcp\n\naccess-log: /home/vagrant/access-log\nerror-log: /home/vagrant/error-log\npid-file: /home/vagrant/pid-file\n</code></pre>\n<p>リバースプロキシとSSLの設定されたコンフィグ</p>\n<pre><code class=\"language-proxy.conf\">\nlisten:\n port: 8080\n ssl:\n  certificate-file: /home/vagrant/server.crt\n  key-file: /home/vagrant/server.key\nhosts:\n  default:\n    paths:\n      /:\n        proxy.reverse.url: http://127.0.0.1:8000/\n\naccess-log: /home/vagrant/accessre-log\nerror-log: /home/vagrant/errorre-log\npid-file: /home/vagrant/pidre-file\n</code></pre>\n<h3 id=\"h2oの起動\">H2Oの起動</h3>\n<pre><code>\nsudo h2o -m daemon -c h2o.conf\nsudo h2o -m daemon -c proxy.conf\n</code></pre>\n<h3 id=\"http1とhttp2の比較\">HTTP/1とHTTP/2の比較</h3>\n<p>画像をいっぱい読み込むページを作成してみてちょっと比較を行ってみた。</p>\n<p>こんなの</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる/0-md.png\" alt=\"スクリーンショット 2015-10-24 15.23.23.png\"></p>\n<p>Chromeのプラグインで「HTTP/2 and SPDY indicator」もしくは\nfirefoxだと「SPDY indicator」というのを入れると\nURLの隣に青いイナズマが表示され、\nHTTP/2を用いられているサイトだとわかる。</p>\n<h4 id=\"http1\">HTTP/1</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる/1-md.png\" alt=\"スクリーンショット 2015-10-24 15.30.11.png\"></p>\n<h4 id=\"http2\">HTTP/2</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる/2-md.png\" alt=\"スクリーンショット 2015-10-24 15.32.30.png\"></p>\n<p>HTTP/2は並列的に画像のダウンロードされているんですね。</p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]H2OでHTTP／2を使ってみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/88d87b7ec1e0d3477e6d3aa4b719c9aecdb3bfb98e86f72690c0a9fc966994ae.png",
      "small": "/ogp/630x630/blogs/qiita/88d87b7ec1e0d3477e6d3aa4b719c9aecdb3bfb98e86f72690c0a9fc966994ae.png"
    }
  },
  {
    "name": "2015-10-24 14-03-35 [メモ]node.jsでライブラリのバージョン管理する",
    "publishedAt": "2015-10-24 14-03-35",
    "title": "[メモ]node.jsでライブラリのバージョン管理する",
    "description": "  package.jsonにて外部ライブラリを管理するmacを使っている場合にちょっとハマったので記載下記で終わりっと思っていたら...brew install npmnpm i",
    "body": "<div class=\"markdown-body\">\n  <h3 id=\"packagejsonにて外部ライブラリを管理する\">package.jsonにて外部ライブラリを管理する</h3>\n<p>macを使っている場合にちょっとハマったので記載</p>\n<p>下記で終わりっと思っていたら...</p>\n<pre><code>brew install npm\nnpm install\n</code></pre>\n<p>なんかこんなのでてくる</p>\n<pre><code>module.js:333\n    throw err;\n          ^\nError: Cannot find module &#39;child-process-close&#39;\n    at Function.Module._resolveFilename (module.js:331:15)\n    at Function.Module._load (module.js:273:25)\n    at Module.require (module.js:357:17)\n    at require (module.js:373:17)\n    at /usr/local/lib/node_modules/npm/lib/npm.js:15:1\n    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/npm.js:520:3)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:349:32)\n    at Function.Module._load (module.js:305:12)\n</code></pre>\n<h3 id=\"解決方法\">解決方法</h3>\n<p>毎度のことだがぐぐってみる\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://spot-bill.com/wordpress/?p=92\">http://spot-bill.com/wordpress/?p=92</a></p>\n<pre><code>wget http://npmjs.org/install.sh\nsudo sh ./install.sh\n</code></pre>\n<p>で解決</p>\n<h3 id=\"おすすめの解決方法\">おすすめの解決方法</h3>\n<p>brewからではなくnodebrewを用いてnodejsをインストールする。</p>\n<pre><code>\n$ curl -L git.io/nodebrew | perl - setup\n</code></pre>\n<pre><code class=\"language-.bashrc\">\nexport PATH=$HOME/.nodebrew/current/bin:$PATH\n</code></pre>\n<pre><code>\n$ source .bashrc\n$ nodebrew install v4.2.1\n$ nodebrew use v4.2.1\n$ node -v\n  v4.2.1\n</code></pre>\n<h3 id=\"laravelのpackagejsonにライブラリを追加する\">laravelのpackage.jsonにライブラリを追加する</h3>\n<p>こっからが本題。</p>\n<p>ライブラリをダウンロードしてプロジェクトに追加するのも良いが\nせっかくlaravelのプロジェクトを作成した時にpackage.jsonというので\nバージョン管理がされているのでこれを使おう。</p>\n<p>laravelプロジェクト作成当時に記載されていたpackage.json</p>\n<pre><code class=\"language-package.json\">\n{\n  &quot;private&quot;: true,\n  &quot;devDependencies&quot;: {\n    &quot;gulp&quot;: &quot;^3.8.8&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;laravel-elixir&quot;: &quot;^3.0.0&quot;,\n    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;\n  }\n}\n</code></pre>\n<p>このまま</p>\n<pre><code>\nnpm install\n</code></pre>\n<p>でpackage.jsonのライブラリが追加されるわけだが\n仮に新しいバージョンのライブラリを入れたい時は</p>\n<pre><code>\nnpm install --save-dev laravel-elixir\n</code></pre>\n<p>とすることで新しいバージョンの情報がpackage.jsonに更新される。</p>\n<h3 id=\"個人的に使いたい物を入れてみる\">個人的に使いたい物を入れてみる</h3>\n<pre><code>\nnpm install --save-dev angular2\nnpm install --save-dev mocha\nnpm install --save-dev phantomjs\n</code></pre>\n<p>結果として今使おうとしているライブラリの一覧ができた。</p>\n<pre><code class=\"language-package.json\">\n{\n  &quot;private&quot;: true,\n  &quot;devDependencies&quot;: {\n    &quot;angular2&quot;: &quot;^2.0.0-alpha.45&quot;,\n    &quot;gulp&quot;: &quot;^3.8.8&quot;,\n    &quot;mocha&quot;: &quot;^2.3.3&quot;,\n    &quot;phantomjs&quot;: &quot;^1.9.18&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;laravel-elixir&quot;: &quot;^3.0.0&quot;,\n    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;\n  }\n}\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]node.jsでライブラリのバージョン管理する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/0d822419e2d7df6c804e7f29d691f491d2a46041870bd38e454b4d24c3efff10.png",
      "small": "/ogp/630x630/blogs/qiita/0d822419e2d7df6c804e7f29d691f491d2a46041870bd38e454b4d24c3efff10.png"
    }
  },
  {
    "name": "2015-10-17 09-18-17 [メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる",
    "publishedAt": "2015-10-17 09-18-17",
    "title": "[メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる",
    "description": "  前回使ったVMhttp://qiita.com/igara/items/1b7cd8e714844440795dVirtualBoxのメニューよりデバイス-&gt;共有フォルダ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"前回使ったvm\">前回使ったVM</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/1b7cd8e714844440795d\">http://qiita.com/igara/items/1b7cd8e714844440795d</a></p>\n<p>VirtualBoxのメニューより\nデバイス-&gt;共有フォルダー設定</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-17 09-18-17 [メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる/0-md.png\" alt=\"スクリーンショット 2015-10-17 9.13.03.png\">\n実際存在する共有したいフォルダを選択</p>\n<h1 id=\"マウント\">マウント</h1>\n<p>GentooのVMを起動する</p>\n<pre><code># マウント対象の共有のフォルダがあるか見る\n$ ls /media\n  sf_slack_rack_web\n# マウント\n$ sudo mount -t vboxsf slack_rack_web /home/vagrant/web\n# ゲストでwebフォルダを事前に作成する必要がある\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/c0babeffa81c4299e81936b7caeac2222954cf779ba6e5b90beb6c9f3946697d.png",
      "small": "/ogp/630x630/blogs/qiita/c0babeffa81c4299e81936b7caeac2222954cf779ba6e5b90beb6c9f3946697d.png"
    }
  },
  {
    "name": "2015-10-11 20-22-16 [メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。",
    "publishedAt": "2015-10-11 20-22-16",
    "title": "[メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。",
    "description": "  GentooをVMから起動する。下記からVMを作成する。http://qiita.com/igara/items/989ea37805f0db85b2f2VMのネットワークをブ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"gentooをvmから起動する。\">GentooをVMから起動する。</h1>\n<p>下記からVMを作成する。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/989ea37805f0db85b2f2\">http://qiita.com/igara/items/989ea37805f0db85b2f2</a></p>\n<p>VMのネットワークをブリッジにして実行</p>\n<h1 id=\"h2oをインストールする前の準備\">H2Oをインストールする前の準備</h1>\n<p>Gentooにsshで接続したら下記コマンドたちを実行する。</p>\n<h2 id=\"gitをインストール\">Gitをインストール</h2>\n<pre><code>$ sudo emerge git\n</code></pre>\n<h2 id=\"libyamlをインストール\">libyamlをインストール</h2>\n<pre><code>$ sudo emerge libyaml\n</code></pre>\n<h1 id=\"h2oのインストール\">H2Oのインストール</h1>\n<p>下記を参考\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://h2o.examp1e.net/install.html\">https://h2o.examp1e.net/install.html</a></p>\n<pre><code># H2Oをダウンロード\n$ wget https://github.com/h2o/h2o/archive/v1.5.0.tar.gz\n# 解凍\n$ tar zxf v1.5.0.tar.gz\n\n# 解凍して作成したディレクトリに移動する\n$ cd h2o-1.5.0/\n# -DWITH_BUNDLED_SSLフラグというのがあるのだそうだ\n$ cmake -DWITH_BUNDLED_SSL=on .\n\n# build\n$ cmake .\n$ make h2o\n$ sudo make install\n</code></pre>\n<h1 id=\"h2oの設定ファイル作成\">H2Oの設定ファイル作成</h1>\n<pre><code class=\"language-h2o.conf\">user: vagrant\n\nlisten: 80\n\nhosts:\n &quot;example.com&quot;:\n   paths:\n    /:\n     file.dir: /home/vagrant/public_html\n\nfile.custom-handler:\n extension: .php\n fastcgi.connect:\n  host: 127.0.0.1\n  port: 9000\n  type: tcp\n\naccess-log: /home/vagrant/access-log\nerror-log: /home/vagrant/error-log\npid-file: /home/vagrant/pid-file\n</code></pre>\n<h1 id=\"public_htmlの作成とindexhtmlの作成\">public_htmlの作成とindex.htmlの作成</h1>\n<pre><code># public_htmlというディレクトリを作成する\n$ mkdir /home/vagrant/public_html\n</code></pre>\n<p>public_htmlにindex.htmlとindex.phpを作成する</p>\n<pre><code class=\"language-index.html\">Hello H2O!\n</code></pre>\n<pre><code class=\"language-index.php\">&lt;?PHP\n    phpinfo();\n</code></pre>\n<h1 id=\"h2oの起動と終了\">H2Oの起動と終了</h1>\n<pre><code># 起動\n$ sudo h2o -m daemon -c h2o.conf\n# 終了\n$ sudo kill -TERM `cat /home/vagrant/pid-file`\n</code></pre>\n<h1 id=\"phpを使えるようにする\">PHPを使えるようにする</h1>\n<h2 id=\"phpenvのインストール\">phpenvのインストール</h2>\n<p>これは\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.sus-happy.net/201506/h2o_php7/#php7-boot\">https://blog.sus-happy.net/201506/h2o_php7/#php7-boot</a>\nを参照に</p>\n<pre><code>$ git clone https://github.com/CHH/phpenv.git\n$ cd phpenv/bin/\n$ sh phpenv-install.sh\n</code></pre>\n<pre><code class=\"language-~/.bashrc\">export PATH=&quot;/home/vagrant/.phpenv/bin:$PATH&quot;\neval &quot;$(phpenv init -)&quot;\n</code></pre>\n<pre><code>$ source ~/.bashrc\n</code></pre>\n<h2 id=\"php-buildのインストール\">php-buildのインストール</h2>\n<p>これも\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.sus-happy.net/201506/h2o_php7/#php7-boot\">https://blog.sus-happy.net/201506/h2o_php7/#php7-boot</a>\nを参照に</p>\n<pre><code>$ git clone https://github.com/CHH/php-build.git\n$ cd php-build/\n$ sudo sh install.sh\n</code></pre>\n<h2 id=\"php7インストール\">PHP7インストール</h2>\n<pre><code>$ php-build --definitions\n5.2.17\n↑\n省略\n↓\n5.6.14\n5.6snapshot\n7.0.0alpha1\n7.0.0alpha2\n7.0.0beta1\n7.0.0beta2\n7.0.0beta3\n7.0.0RC1\n7.0.0RC2\n7.0.0RC3\n7.0.0RC4\n7.0snapshot\nmaster\n</code></pre>\n<p>PHPに必要なライブラリを入れる</p>\n<pre><code># libjpegをインストール\n$ wget http://www.ijg.org/files/jpegsrc.v9a.tar.gz\n$ tar xzf jpegsrc.v9a.tar.gz\n$ ./configure --enable-shared\n$ make\n$ make install\n\n# libpngをインストール\n$ wget http://prdownloads.sourceforge.net/libpng/libpng-1.6.18.tar.gz\n$ tar xzf libpng-1.6.18.tar.gz\n$ cd libpng-1.6.18\n$ ./configure --enable-shared\n$ make\n$ sudo make install\n\n$ cd\n\n# まだ足りないのがあるかも\nUSE=&quot;tidy&quot; emerge php\nUSE=&quot;fpm&quot; emerge php\n</code></pre>\n<p>7.0.0RC4をビルド</p>\n<pre><code>$ sudo php-build 7.0.0RC4 ~/.phpenv/versions/7.0.0RC4\n</code></pre>\n<p>インストールしたことがあるPHPバージョン確認</p>\n<pre><code>$ phpenv versions\n$ php-fpm -v\n# 現在のバージョンを確認する\n</code></pre>\n<p>PHPバージョンを切り替える</p>\n<pre><code>$ phpenv global 7.0.0RC4\n$ php-fpm -v\n# 現在のバージョンを確認する\n</code></pre>\n<p>PHP Config</p>\n<pre><code># php-fpm.confを更新\n$ cp ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.conf.default ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.conf\n# php-fpm.d/www.confも更新\ncp ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.d/www.conf.default ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.d/www.conf \n\n# php-fpmを実行\n~/.phpenv/versions/7.0.0RC4/sbin/php-fpm &amp;\n# エラーが出なければ問題無し\n</code></pre>\n<p>H2Oを起動してindex.htmlとindex.phpを見てみる</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-11 20-22-16 [メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。/0-md.png\" alt=\"スクリーンショット 2015-10-12 23.01.28.png\"></p>\n<h1 id=\"laravelのプロジェクトを作成する\">laravelのプロジェクトを作成する</h1>\n<pre><code># composerのインストール\n$ curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n$ composer global require &quot;laravel/installer=~1.1&quot;\n$ laravel new slack_rack_php\n</code></pre>\n<p>h2oのpathsをlaravelのpublicフォルダに変更させる</p>\n<pre><code class=\"language-h2o.conf\">user: vagrant\n\nlisten: 80\n\nhosts:\n &quot;example.com&quot;:\n   paths:\n    /:\n     file.dir: /home/vagrant/slack_rack_php/public\n\nfile.custom-handler:\n extension: .php\n fastcgi.connect:\n  host: 127.0.0.1\n  port: 9000\n  type: tcp\n\naccess-log: /home/vagrant/access-log\nerror-log: /home/vagrant/error-log\npid-file: /home/vagrant/pid-file\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/b6a30bbaa3454cbbecfb7b38ab373430f04e39cd251d05e599845b451f2931df.png",
      "small": "/ogp/630x630/blogs/qiita/b6a30bbaa3454cbbecfb7b38ab373430f04e39cd251d05e599845b451f2931df.png"
    }
  },
  {
    "name": "2015-10-11 18-51-31 [メモ]Vagrantを使ってVMを起動する",
    "publishedAt": "2015-10-11 18-51-31",
    "title": "[メモ]Vagrantを使ってVMを起動する",
    "description": "  VagrantからVMを立ち上げてsshするとこまでまとめる。まず使いたいboxを探してくるvagrant boxはサイトで公開されているものがあるためそちらを利用する。今回は",
    "body": "<div class=\"markdown-body\">\n  <p>VagrantからVMを立ち上げてsshするとこまでまとめる。</p>\n<h1 id=\"まず使いたいboxを探してくる\">まず使いたいboxを探してくる</h1>\n<p>vagrant boxはサイトで公開されているものがあるためそちらを利用する。\n今回はGentooを利用する。</p>\n<pre><code>$ vagrant box add gentoo_amd64 https://dl.dropboxusercontent.com/u/632007/gentoo-systemd-amd64-virtualbox-2015-02-22.box\n</code></pre>\n<p>この時、gentoo_amd64と入力したがこれは自分のローカルで使うboxの名前になる。</p>\n<h1 id=\"vagrantfileの作成\">Vagrantfileの作成</h1>\n<p>VMの設定をVagrantfileに記載することでvagrant up後に設定が反映される。\n※vagrant up後については後記\nVagrantfileを作成したいディレクトリで</p>\n<pre><code>$ vagrant init gentoo_amd64\n</code></pre>\n<p>これでVagrantfileが作成される。</p>\n<h1 id=\"vagrant-up\">vagrant up</h1>\n<pre><code>$ vagrant up\n</code></pre>\n<p>これでいったんはVMが起動される。</p>\n<h1 id=\"vmにsshする\">VMにsshする</h1>\n<pre><code>$ vagrant ssh\n</code></pre>\n<p>便利そうなことを書き足す形式でこの投稿を更新しよう</p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]Vagrantを使ってVMを起動する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/cdc7f3f7830e2080eb386c6247d5b8ac4838567a38ca87bdf98488c970ff69a3.png",
      "small": "/ogp/630x630/blogs/qiita/cdc7f3f7830e2080eb386c6247d5b8ac4838567a38ca87bdf98488c970ff69a3.png"
    }
  }
]