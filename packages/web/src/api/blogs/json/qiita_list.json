[
  {
    "name": "2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう",
    "publishedAt": "2020-08-09 14-55-24",
    "title": "Google Apps Scriptで音声認識の議事録アプリを作ろう",
    "description": "  この記事は喋ったことを文字で確認できるようなものなにかないか探していてGoogle Docsの音声入力というものがあることを知ったわけですが(GIFアニメ)音声入力中に他のアプ",
    "body": "<div class=\"markdown-body\">\n  <h2 id=\"この記事は\">この記事は</h2>\n<p>喋ったことを文字で確認できるようなものなにかないか探していてGoogle Docsの音声入力というものがあることを知ったわけですが</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/0-md.gif\" alt=\"docs.gif\">\n(GIFアニメ)</p>\n<p>音声入力中に他のアプリをクリックしてしまうと自動で終了されてしまいます。</p>\n<p>なんとかならんものかと考えたところ、ChromeのSpeech Recognition APIとGASのWebアプリケーションを使えば解決できたので解説していこうといった内容です。</p>\n<h2 id=\"どのようなものが仕上がったのか\">どのようなものが仕上がったのか</h2>\n<p>↓の画像は動画のリンクになっております。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/watch?v=yeq7vMeb7sA\"><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/1-md.png\" alt=\"youtube\"></a></p>\n<p>↓のリンクはソースコードです。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs\">https://github.com/igara/speech-to-docs</a></p>\n<h2 id=\"使い方\">使い方</h2>\n<h3 id=\"docsとgasのwebアプリの作成\">DocsとGASのWebアプリの作成</h3>\n<p>NodeJS v12.14.0使っていましたがたぶんよほど古くなければ他のバージョンでも大丈夫かと思います。\nコマンドを羅列すると</p>\n<pre><code>git clone https://github.com/igara/speech-to-docs\ncd speech-to-docs\nnpm install\n\n# Googleの認証を行う\nnpx clasp login\n\n# exampleという名前のDocsに紐づくGASプロジェクトを同時に作成する\nnpm run new name=example\n\n# TypeScriptで記載されたコードをGAS用にビルド\nnpm run build\n\n# ビルド済みのコードをGASプロジェクトに転送する\nnpx clasp push\n</code></pre>\n<p>ここまでの作業が完了したらDocsから\nメニュー -&gt; ツール -&gt; スクリプトエディタ</p>\n<p>スクリプトエディタ上で\nメニュー -&gt; 公開 -&gt; ウェブアプリケーションとして導入...</p>\n<p>を選択し、作成しようとすると認証確認が出ると思うので認証させれば完成です。\nウェブアプリケーションとして導入にあるURLが開ければ完了です。</p>\n<h3 id=\"gasのwebアプリ\">GASのWebアプリ</h3>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/2-md.gif\" alt=\"webapp.gif\">\n(GIFアニメ)</p>\n<p>背景色変更や文字の大きさの変更が可能だったりするので配信する人とかはここを変えてOBSのクロマキー処理とかも使ったりしたらいい感じになるんじゃないでしょうか。</p>\n<img width=\"436\" alt=\"マイク.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-08-09 14-55-24 Google Apps Scriptで音声認識の議事録アプリを作ろう/0-img-tag.png\">\n\n<p>マイクの設定は各自使用しているものに適応してください。</p>\n<h2 id=\"コード説明\">コード説明</h2>\n<h3 id=\"srcgas\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/tree/master/src/gas\">src/gas</a></h3>\n<p>  GASのスクリプトエディタに反映するコードを記載しています。</p>\n<h4 id=\"appsscriptjson\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/appsscript.json\">appsscript.json</a></h4>\n<pre><code>  &quot;executionApi&quot;: {\n    &quot;access&quot;: &quot;ANYONE&quot;\n  },\n</code></pre>\n<p>の箇所はclaspのデバッグの都合でANYONEにしています。\n今回の記事にはデバッグの仕方を記載しませんがやってみる場合はこちらの記事を参考にすると良いかもしれません。主にCloud Consoleでの設定がつむポイント\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://qiita.com/abetomo/items/59379e26679e342ef6e3\">clasp run できないとき。2018-09-25</a></p>\n<pre><code>  &quot;webapp&quot;: {\n    &quot;access&quot;: &quot;MYSELF&quot;,\n    &quot;executeAs&quot;: &quot;USER_DEPLOYING&quot;\n  },\n</code></pre>\n<p>&quot;access&quot;: &quot;MYSELF&quot;はWebアプリケーションを使用できる人を自分だけにするために設定しています。\n&quot;executeAs&quot;: &quot;USER_DEPLOYING&quot;はnpx clasp deployでもWebアプリケーションの更新ができるようなので設定しています。\nただし初回の時はスクリプトエディタ上で承認しないと反映されないようです。\nDocsのアクセス権限はデフォルト自分のみになっているので後でブラウザからDocsはURLわかる人には閲覧できるように設定するとリアルタイムで議事録の記載がされているのがDocs経由でみれるとかできます。</p>\n<h4 id=\"indexhtml\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html\">index.html</a></h4>\n<p>GASのWebアプリケーションを構成するHTMLです。</p>\n<pre><code>   &lt;?!= HtmlService.createHtmlOutputFromFile(&quot;css&quot;).getContent(); ?&gt;\n   &lt;?!= HtmlService.createHtmlOutputFromFile(&quot;js&quot;).getContent(); ?&gt;\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html#L5-L6\">https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html#L5-L6</a></p>\n<p>外部のファイルを呼び出しを上記で行っている点以外は標準なHTMLかと思います。</p>\n<h4 id=\"csshtml\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/css.html\">css.html</a></h4>\n<p>HTMLファイルですがGASのWebアプリケーションを構成するCSSです。</p>\n<p>VSCodeでもstyleタグの補完が効いてくれていたので特に困ることがなかったです。</p>\n<h4 id=\"jshtml\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html\">js.html</a></h4>\n<p>HTMLファイルですがGASのWebアプリケーションを構成するJavaScriptです。</p>\n<p>このファイルもTypeScript化しようかと思いましたが既にGASの関数定義でWebpack等使っているのもあり、Webアプリケーション上ではHTMLファイルじゃないと外部読み込みできないというのもあって普通にJavaScriptで書くようにしました。</p>\n<pre><code>google.script.run.setText(logText);\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html#L33\">https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html#L33</a></p>\n<p>というのがありますがWebアプリケーション側のJavaScriptでgoogle.script.run.xxxのような記載をするとGASの関数が起動可能みたいです。</p>\n<h4 id=\"do_getts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/do_get.ts\">do_get.ts</a></h4>\n<p>WebアプリケーションのURLを開いた時に<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/index.html\">index.html</a>を開く処理を記載しています。</p>\n<h4 id=\"do_postts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/do_post.ts\">do_post.ts</a></h4>\n<p>POSTで音声認識とは別でDocsにテキスト反映できるかテスト用に作成しただけのものです。</p>\n<h4 id=\"set_textts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/set_text.ts\">set_text.ts</a></h4>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/gas/js.html\">js.html</a>で使われているSpeech Recognition APIの結果をこのGAS関数を使ってDocsに文字起こしをしています。</p>\n<h3 id=\"srctasks\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/tree/master/src/tasks\">src/tasks</a></h3>\n<p>CLIで実行するツールなどを扱っています。</p>\n<h4 id=\"create_clasp_jsonts\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speech-to-docs/blob/master/src/tasks/create_clasp_json.ts\">create_clasp_json.ts</a></h4>\n<pre><code># exampleという名前のDocsに紐づくGASプロジェクトを同時に作成する\nnpm run new name=example\n</code></pre>\n<p>を実行した時に使用していたスクリプトです。\nnameの指定からDocsとGASプロジェクトが作成されるような処理を記載しています。</p>\n<h2 id=\"最後に\">最後に</h2>\n<p>配信を文字に起こして振り返りがしやすくなる利点ってありそうだけど、音声認識がまだそこまで精密でもないから実施していないのかわかんないですが、この記事をきっかけになにか発展があれば幸いです。</p>\n\n</div>",
    "link": "/blogs/qiita/Google Apps Scriptで音声認識の議事録アプリを作ろう",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/Google Apps Scriptで音声認識の議事録アプリを作ろう.png",
      "small": "/ogp/630x630/blogs/qiita/Google Apps Scriptで音声認識の議事録アプリを作ろう.png"
    }
  },
  {
    "name": "2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する",
    "publishedAt": "2020-04-07 18-42-03",
    "title": "puppeteer経由でインストール済みのアプリケーションを操作する",
    "description": "  最初にこの記事でやろうとしたことを思ったきっかけとして最近声をかけられるということが少なくなったのでせめてSlackとかのチャットで文字だけでなく声を発してくれるようなのが欲し",
    "body": "<div class=\"markdown-body\">\n  <h2 id=\"最初に\">最初に</h2>\n<p>この記事でやろうとしたことを思ったきっかけとして\n最近声をかけられるということが少なくなったのでせめてSlackとかのチャットで文字だけでなく声を発してくれるようなのが欲しいと思ったのがはじまりでした。</p>\n<p>（このままだと聞き取り能力下がるんじゃないかというの危険視してる。テレビ電話使えよというのはありますが会話としての相手がいないとね...</p>\n<p>いろいろ試行錯誤した結果、Electronで作られたアプリとか既にChromeで使用しているアプリに対して「こんな操作方法ある？」というやり方ができてしまったので記事にしました。</p>\n<h2 id=\"対象のアプリ\">対象のアプリ</h2>\n<p>実際に試験的に外部のアプリを操作しているアプリです。\nmacOSでのみ使用できます。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/releases/tag/experimental-1\">https://github.com/igara/speeche/releases/tag/experimental-1</a>\nもしかするとソース上で指定しているアプリのパスの違いによって起動できない人もいるかもしれません。</p>\n<p>下記は実際に操作している対象のアプリです。</p>\n<ul>\n<li>Chrome<ul>\n<li>Twitter</li>\n<li>Facebook</li>\n</ul>\n</li>\n<li>Electron<ul>\n<li>Slack</li>\n<li>Discord</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"chrome\">Chrome</h3>\n<p>コードとして下記の箇所になります\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L20-L46\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L20-L46</a></p>\n<pre><code class=\"language-ts\">const createChromeBrowser = async () =&gt; {\n  try {\n    const chromeBrowser = await puppeteer.launch({\n      executablePath: &quot;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&quot;,\n      // userDataDir: path.resolve(path.join(process.env.HOME || &quot;&quot;, &quot;Library/Application Support/Google/Chrome&quot;)),\n      headless: false,\n    });\n\n    const twitterCookies = chromeCookies.cookies(&quot;twitter.com&quot;);\n    const twitterPage = await chromeBrowser.newPage();\n    for (const cookie of twitterCookies) {\n      await twitterPage.setCookie(cookie);\n    }\n    await twitterPage.goto(&quot;https://twitter.com/home&quot;);\n    await twitterPage.addStyleTag({ content: `* {background: red;}` });\n\n    const facebookCookies = chromeCookies.cookies(&quot;facebook.com&quot;);\n    const facebookPage = await chromeBrowser.newPage();\n    for (const cookie of facebookCookies) {\n      await facebookPage.setCookie(cookie);\n    }\n    await facebookPage.goto(&quot;https://www.facebook.com&quot;);\n    await facebookPage.addStyleTag({ content: `* {background: red;}` });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n<p><code>executablePath</code>には実際に使用しているChromeのアプリ内の実行ファイルを指定しています。\n<code>userDataDir</code>がコメントされていますがこれ使用できればChromeでログインしているユーザの状態でpuppeteerの操作ができそうですが**UnhandledPromiseRejectionWarning: Error: Failed to launch chrome!**という実行エラーが出てしまったのでコメントにしています。</p>\n<h3 id=\"twitter\">Twitter</h3>\n<p>該当箇所こちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L28-L34\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L28-L34</a></p>\n<pre><code class=\"language-ts\">const twitterCookies = chromeCookies.cookies(&quot;twitter.com&quot;);\nconst twitterPage = await chromeBrowser.newPage();\nfor (const cookie of twitterCookies) {\n  await twitterPage.setCookie(cookie);\n}\nawait twitterPage.goto(&quot;https://twitter.com/home&quot;);\nawait twitterPage.addStyleTag({ content: `* {background: red;}` });\n</code></pre>\n<p>行っていることとしてtwitterのドメインで取得できるCookieを設定してTwitterのページを開き、CSSの追加をしているという処理をしています。\nCookieの取得についてですが下記のツールから取得したものを使用しています。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/chrome-cookies\">https://github.com/igara/chrome-cookies</a></p>\n<p>これを実行すると下記のような画面が表示されるようになります。</p>\n<img width=\"730\" alt=\"スクリーンショット 2020-04-07 17.55.55.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/0-img-tag.png\">\n\n<p>タイムラインの箇所はCookieではない別のストレージの情報から取得するようになっているようなので中途半端なログインな状態で表示されます。\n（タイムラインの箇所とるためにCookie同様にLocal Strage取得用CLI作ろうとしたのですがLevelDBから取れたLocal Strageの値が暗号化されててうまく複合化できずにめげました。</p>\n<h3 id=\"facebook\">Facebook</h3>\n<p>該当箇所こちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L36-L42\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L36-L42</a></p>\n<pre><code class=\"language-ts\">const facebookCookies = chromeCookies.cookies(&quot;facebook.com&quot;);\nconst facebookPage = await chromeBrowser.newPage();\nfor (const cookie of facebookCookies) {\n  await facebookPage.setCookie(cookie);\n}\nawait facebookPage.goto(&quot;https://www.facebook.com&quot;);\nawait facebookPage.addStyleTag({ content: `* {background: red;}` });\n</code></pre>\n<p>Twitterとやっていることは同様ですがこちらは他のユーザの投稿内容を取得することが可能みたいです。</p>\n<img width=\"808\" alt=\"スクリーンショット 2020-04-07 18.02.21.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/1-img-tag.png\">\n\n\n<h2 id=\"electron\">Electron</h2>\n<p>ElectronのアプリはChromeとは異なり何故か<code>userDataDir</code>でユーザの状態を保ったまま開くことが可能みたいです。\n「そのパスでいけちゃうもんなの？」という感じが否めなかったです。</p>\n<h3 id=\"slack\">Slack</h3>\n<p>該当箇所はこちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L48-L64\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L48-L64</a></p>\n<pre><code class=\"language-ts\">const createSlackBrowser = async () =&gt; {\n  try {\n    const slackBrowser = await puppeteer.launch({\n      executablePath: &quot;/Applications/Slack.app/Contents/MacOS/Slack&quot;,\n      userDataDir: path.resolve(path.join(process.env.HOME || &quot;&quot;, &quot;Library/Application Support/Slack&quot;)),\n      headless: false,\n    });\n    const pages = await slackBrowser.pages();\n\n    pages.forEach(async page =&gt; {\n      await page.waitFor(1000);\n      await page.addStyleTag({ content: `* {background: red;}` });\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n<img width=\"800\" alt=\"スクリーンショット 2020-04-07 18.21.52.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/2-img-tag.png\">\n\n\n<h3 id=\"discord\">Discord</h3>\n<p>該当箇所はこちら\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L66-L82\">https://github.com/igara/speeche/blob/26ce768c357eb1ee61f497507f5f06b2445fae14/src/index.ts#L66-L82</a></p>\n<pre><code class=\"language-ts\">const createDiscordBrowser = async () =&gt; {\n  try {\n    const discordBrowser = await puppeteer.launch({\n      executablePath: &quot;/Applications/Discord.app/Contents/MacOS/discord&quot;,\n      userDataDir: path.resolve(path.join(process.env.HOME || &quot;&quot;, &quot;Library/Application Support/Discord&quot;)),\n      headless: false,\n    });\n    const pages = await discordBrowser.pages();\n\n    pages.forEach(async page =&gt; {\n      await page.waitFor(1000);\n      await page.addStyleTag({ content: `* {background: red;}` });\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n</code></pre>\n<p>DiscordはSlackと異なって</p>\n<img width=\"288\" alt=\"スクリーンショット 2020-04-07 18.27.38.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/3-img-tag.png\">\n\n<p>一瞬DOMのかけらのようなものが表示されて</p>\n<img width=\"1267\" alt=\"スクリーンショット 2020-04-07 18.31.08.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2020-04-07 18-42-03 puppeteer経由でインストール済みのアプリケーションを操作する/4-img-tag.png\">\n\n<p>いつものような画面が表示されているので遅延的に複数のpageを扱うようにしているみたいです。</p>\n<h2 id=\"最後に\">最後に</h2>\n<p>今回は<code>page.addStyleTag</code>によるスタイル変更しか実施していないですが\npuppeteerには<code>page.evaluate</code>というアプリケーション内でJavaScriptを実行できるものがあったりするのでより高度な操作を要求する場合はpuppeteerのドキュメントを見るとよりいろんなことできそうと妄想を膨らますことができるんじゃないかと思います。</p>\n\n</div>",
    "link": "/blogs/qiita/puppeteer経由でインストール済みのアプリケーションを操作する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/puppeteer経由でインストール済みのアプリケーションを操作する.png",
      "small": "/ogp/630x630/blogs/qiita/puppeteer経由でインストール済みのアプリケーションを操作する.png"
    }
  },
  {
    "name": "2018-10-21 00-01-38 RailsプロジェクトをVSCodeからデバックできるようにする",
    "publishedAt": "2018-10-21 00-01-38",
    "title": "RailsプロジェクトをVSCodeからデバックできるようにする",
    "description": "  この記事はVSCodeとgemのruby-debug-ide・debaseを用いてデバックできましたといった記事は多いのですがリモートデバッガーを利用する場合、環境周りなどその",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事は\">この記事は</h1>\n<p>VSCodeとgemのruby-debug-ide・debaseを用いてデバックできましたといった記事は多いのですがリモートデバッガーを利用する場合、環境周りなどその節々でなかなか実行できないというのが経験上多かったので参考程度にみていただければいいなぁと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2018-10-21 00-01-38 RailsプロジェクトをVSCodeからデバックできるようにする/0-md.gif\" alt=\"ezgif-1-d3ba8c59123c.gif\"></p>\n<h1 id=\"プロジェクト\">プロジェクト</h1>\n<ul>\n<li>Rails: 5.2.1</li>\n<li>Ruby: 2.5.3</li>\n<li>VSCode: 1.28.2</li>\n<li>VSCode Extension Ruby(rebornix.ruby): 0.20.0</li>\n<li>gem ruby-debug-ide: 0.6.1</li>\n<li>gem debase: 0.2.2</li>\n</ul>\n<h2 id=\"ソースコード\">ソースコード</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample\">https://github.com/igara/debug_sample</a></p>\n<p>MacOSから直接Rails起動した時と\nDockerから起動した時のデバックを検証したソースになります。</p>\n<h3 id=\"プロジェクト構成\">プロジェクト構成</h3>\n<img width=\"597\" alt=\"スクリーンショット 2018-10-20 22.46.50.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2018-10-21 00-01-38 RailsプロジェクトをVSCodeからデバックできるようにする/0-img-tag.png\">\n\n<p>後々DBなどのミドルウェアや別のアプリケーションの追加しやすいようにRails用のディレクトリを切って構成しました。</p>\n<h3 id=\"vscodeのデバック設定launchjson\">VSCodeのデバック設定(launch.json)</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/.vscode/launch.json\">.vscode/launch.json</a></p>\n<pre><code>{\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        {\n            &quot;name&quot;: &quot;Local - Listen for rdebug-ide&quot;,\n            &quot;type&quot;: &quot;Ruby&quot;,\n            &quot;request&quot;: &quot;attach&quot;,\n            &quot;cwd&quot;: &quot;${workspaceRoot}/rails&quot;,\n            &quot;remoteHost&quot;: &quot;0.0.0.0&quot;,\n            &quot;remotePort&quot;: &quot;1234&quot;,\n            &quot;remoteWorkspaceRoot&quot;: &quot;${workspaceRoot}/rails&quot;,\n            &quot;useBundler&quot;: true\n        },\n        {\n            &quot;name&quot;: &quot;Local Docker - Listen for rdebug-ide&quot;,\n            &quot;type&quot;: &quot;Ruby&quot;,\n            &quot;request&quot;: &quot;attach&quot;,\n            &quot;cwd&quot;: &quot;${workspaceRoot}/rails&quot;,\n            &quot;remoteHost&quot;: &quot;0.0.0.0&quot;,\n            &quot;remotePort&quot;: &quot;1234&quot;,\n            &quot;remoteWorkspaceRoot&quot;: &quot;/rails&quot;,\n            &quot;useBundler&quot;: true\n        }\n    ]\n}\n</code></pre>\n<ul>\n<li>Local - Listen for rdebug-ide<br>こちらはDockerを使用しないで直接Railsを起動した時の設定です。<br>一旦、下記のようにrailsディレクトリに移動してからbundle installを行いデバック用のrails起動コマンドを実行し、VSCodeのデバックを実行することができます。</li>\n</ul>\n<pre><code>$ cd rails\n$ bundle install --path vendor/bundle\n$ bundle exec rdebug-ide --host 0.0.0.0 --port 1234 --dispatcher-port 26162 -- bin/rails s\n</code></pre>\n<ul>\n<li>Local Docker - Listen for rdebug-ide<br>こちらはDockerを使用したRailsデバックの設定になります。<br>remoteWorkspaceRootがコンテナ先のディレクトリ階層になります。<br>下記はデバック用に作成したDockerを起動するコマンドで起動後VSCodeのデバックが可能になります。</li>\n</ul>\n<pre><code>$ docker-compose -f docker-compose.debug.yml up\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/docker-compose.debug.yml\">docker-compose.debug.yml</a>と<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/docker-compose.yml\">docker-compose.yml</a>の2つのファイルがありますが違いとして\nRails起動しようとするコマンドにrdebug-ideがあるかないかの違いと\nデバックで使用するポートを開けてるかの違いしかありません。</p>\n<h3 id=\"ruby-253-rails-521のデバックではまったところ\">Ruby 2.5.3 Rails 5.2.1のデバックではまったところ</h3>\n<p>下記のURLに現象と解決方法が書いてあったのですが</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://superuser.com/questions/1359747/is-it-possible-to-get-visual-studio-code-ide-debugging-of-apps-on-rails-5-2-to-w\">https://superuser.com/questions/1359747/is-it-possible-to-get-visual-studio-code-ide-debugging-of-apps-on-rails-5-2-to-w</a></p>\n<p>あまり解説を見てもちょっと理解しきれていないのですが\nRuby 2.5系のtrace命令を削除することによる5～10%の高速化の対応と\ngemのbootsnapによるRails起動時の最適化によるもので\nデバックがうまくいかないみたいなのがあるようです。</p>\n<p>一旦は<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/debug_sample/blob/master/rails/config/boot.rb\">rails/config/boot.rb</a>を</p>\n<pre><code>ENV[&#39;BUNDLE_GEMFILE&#39;] ||= File.expand_path(&#39;../Gemfile&#39;, __dir__)\n\nrequire &#39;bundler/setup&#39; # Set up gems listed in the Gemfile.\n# require &#39;bootsnap/setup&#39; # Speed up boot time by caching expensive operations.\nunless ( ((&#39;2.5.0&#39;..&#39;2.5.3&#39;).include? RUBY_VERSION) &amp;&amp; defined?(Debugger) )\n  # see: https://superuser.com/questions/1359747/is-it-possible-to-get-visual-studio-code-ide-debugging-of-apps-on-rails-5-2-to-w\n  require &#39;bootsnap/setup&#39; # Speed up boot time by caching expensive operations.\nend\n</code></pre>\n<p>みたいにデバック時はbootsnapを使用しないようにしてデバックできるようにしています。</p>\n\n</div>",
    "link": "/blogs/qiita/RailsプロジェクトをVSCodeからデバックできるようにする",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/RailsプロジェクトをVSCodeからデバックできるようにする.png",
      "small": "/ogp/630x630/blogs/qiita/RailsプロジェクトをVSCodeからデバックできるようにする.png"
    }
  },
  {
    "name": "2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法",
    "publishedAt": "2017-12-11 19-06-17",
    "title": "Headless Chromeを使用した画像収集方法",
    "description": "  はじめに &amp; モチベーションまわりこの記事では更読みがあるような一覧画面での画像収集方法について一部記載します。更読みがある一覧画面とは言わずもがなという感じもしますが",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"はじめに--モチベーションまわり\">はじめに &amp; モチベーションまわり</h1>\n<p>この記事では\n<strong>更読みがあるような一覧画面での画像収集方法</strong>\nについて一部記載します。</p>\n<p>更読みがある一覧画面とは言わずもがなという感じもしますが</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法/0-md.gif\" alt=\"1.gif\"></p>\n<p>なんかボタンを押したらさらに情報が出てきたり、</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法/1-md.gif\" alt=\"2.gif\"></p>\n<p>画面の一番下に行ったらさらに画像が読み込まれるような画面です。</p>\n<p>動機としては最近やっぱり独自でデータを所有していること前提でビジネス動いてるなというのあり、\n最低限のデータ収集方法を身に付けたいというのがありました。</p>\n<p>その中でデータ収集の中で画像を集めることというのが\n今の僕の趣味に一番マッチしてたのでやってみたという話です。</p>\n<h2 id=\"なぜheadless-chromeを使った画像収集を行おうとしたのか\">なぜHeadless Chromeを使った画像収集を行おうとしたのか</h2>\n<p>理由は多々あって</p>\n<ul>\n<li><p>最近はSPA(シングルページアプリケーション)なページが多い為、\nどうしてもブラウザの機能使ったデータ取得がしたかった。</p>\n</li>\n<li><p>某SNSでAPIによる画像URL取得できるが、\n某他サイトではAPIがオープン公開されてない or\n<del>APIの仕様を調べるのが面倒</del>\nなのでブラウザに見えるありのままの一覧情報を<del>こそっと</del>\nごそっと持ってきたかったから。</p>\n</li>\n</ul>\n<h2 id=\"結果的にできたもの\">結果的にできたもの</h2>\n<p><strong>即席で画像を集めたかったのでコードの内容は煩雑です。お許しください。</strong></p>\n<p>使い方としてこちらのREADME参照\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki\">https://github.com/igara/image_shiki</a></p>\n<p>puppeteerを使用した例\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/a115335016cd3d301daf1e959ed4fa3d0bbe976d/puppeteer.js\">https://github.com/igara/image_shiki/blob/a115335016cd3d301daf1e959ed4fa3d0bbe976d/puppeteer.js</a></p>\n<p>chrome-launcherとchrome-remote-interfaceを使用した例\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/aa8b39d0a74ee10e780cd8b40a3e82cb0b1abdf5/chrome_launcher.js\">https://github.com/igara/image_shiki/blob/aa8b39d0a74ee10e780cd8b40a3e82cb0b1abdf5/chrome_launcher.js</a></p>\n<p>最初はchrome-launcherとchrome-remote-interfaceを使って画像取得ツール作成してましたが、\nとある噂でpuppeteerの方が楽という強い言葉を聞き、puppeteerも使用してみました。</p>\n<p><strong>本記事の内容もpuppeteerを中心に寄せて記載します。</strong></p>\n<p>比較してみて一部の <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/\">Chrome DevTools Protocol</a> による機能の関数化がpuppeteerではされていなかったりしますが下記のコードで使用することができます。</p>\n<pre><code>page._client.send(&#39;使用したいChrome DevTools Protocolメソッド名&#39;, {パラメータ});\n</code></pre>\n<p>puppeteerで関数化されていないChrome DevTools ProtocolというのはだいたいがEXPERIMENTAL（試験的な）と記載されているものが多いです。</p>\n<p>後記で出てくる<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>もEXPERIMENTALなものの１つです。</p>\n<h1 id=\"僕のheadless-chromeを用いた画像収集方法\">僕のHeadless Chromeを用いた画像収集方法</h1>\n<p>大雑把に手順を公開すると</p>\n<ol>\n<li>Headless Chromeでみている画面を<br>コードでスクロール or 「もっと見る」リンクを押下して追加の画像を読み込む</li>\n<li>Chrome DevTools Protocolの１つである<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>を使用して<br>画像のリソースを取得する</li>\n<li>画像を保存する</li>\n</ol>\n<p>な手順で画像を集めました。</p>\n<p><strong>先にこの収集方法の欠点をいうと</strong></p>\n<ul>\n<li>Web画面のデザイン変更を行われると大量の画像取得できなくなる</li>\n<li>Chrome起動やっぱりメモリいっぱい取られる</li>\n</ul>\n<p>などなどありますが、\n上記の手順についてさらに詳しく説明していきたいと思います。</p>\n<h2 id=\"1-headless-chromeでみている画面をコードでスクロール-or-「もっと見る」リンクを押下して追加の画像を読み込む\">1. Headless Chromeでみている画面をコードでスクロール or 「もっと見る」リンクを押下して追加の画像を読み込む</h2>\n<h3 id=\"スクロール方法\">スクロール方法</h3>\n<p>puppeteerによるHeadless Chromeのスクロール方法についてのコード部分\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L85-L93\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L85-L93</a></p>\n<p>ここで注意することはスクロールの処理が非同期的なものなので\nawait / async ちゃんとしてないと\n無駄にスクロールしてるけど画像あまり拾えてないとなってしまいます。</p>\n<h3 id=\"「もっと見る」リンクの押下方法\">「もっと見る」リンクの押下方法</h3>\n<p>puppeteerによるHeadless Chromeのリンク押下方法についてのコード部分\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L80-L81\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L80-L81</a></p>\n<p>こちらのボタンの指定は <code>page.$</code> を使用しましたが <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.mozilla.org/ja/docs/Web/API/Document/querySelector\">document.querySelector</a> のようなHTMLのセレクタ・クラスなどの指定からHTMLElementを指定することができます。</p>\n<h2 id=\"2-chrome-devtools-protocolの１つであるpagegetresourcetreeを使用して画像のリソースを取得する\">2. Chrome DevTools Protocolの１つである<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>を使用して画像のリソースを取得する</h2>\n<p>先ほどから<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-getResourceTree\">Page.getResourceTree</a>という単語だけ先行して出てきていますが\nこいつは何なのかというとChromeの開発ツールのNetworkタブで表示されるリソースを取得することができます。</p>\n<p>どうゆうことかというと</p>\n<img width=\"1290\" alt=\"スクリーンショット 2017-12-11 17.21.23.png\" src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-12-11 19-06-17 Headless Chromeを使用した画像収集方法/0-img-tag.png\">\n\n<p>赤枠の箇所の情報を全て取得できるわけです。\n当然不要なリソースも存在するかと思いますので任意で取り除いたりすると良いかと思います。</p>\n<p>コードとしてこちらになります。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L112-L114\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L112-L114</a></p>\n<h2 id=\"3-画像を保存する\">3. 画像を保存する</h2>\n<p>Page.getResourceTreeで画像のURLを取得できるわけですが\n(http|https)〜〜〜から始まるURLのパターンと\ndata:image〜〜〜から始まるパターンがありますので\nそれぞれのパターンでの画像データ取得について説明します。</p>\n<p>ソース上では趣味上の理由により謎のjpgに変換する処理がありますが\n気にしないでください。</p>\n<h3 id=\"httphttps〜〜〜から始まるurlのパターン\">(http|https)〜〜〜から始まるURLのパターン</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L130-L132\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L130-L132</a></p>\n<p>レスポンスからバイナリデータを引っ張ってくる処理を行なっています。</p>\n<h3 id=\"dataimage〜〜〜から始まるパターン\">data:image〜〜〜から始まるパターン</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L127-L128\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L127-L128</a></p>\n<p>base64エンコード文字列の部分だけを持ってきて再度バイナリにする処置を行なっています。</p>\n<h3 id=\"あとは取得したバイナリデータをファイル書き込みするだけ\">あとは取得したバイナリデータをファイル書き込みするだけ</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L143-L143\">https://github.com/igara/image_shiki/blob/1396197fa28d9657869df1945dba6cfdc38ca65c/puppeteer.js#L143-L143</a></p>\n<p>すみません。ファイル名適当すぎました。</p>\n<p>以上で僕の画像収集方法についての説明になります。</p>\n<h1 id=\"さいごに--やってみた感想\">さいごに &amp; やってみた感想</h1>\n<p>アドベントカレンダーやらなきゃという圧に屈して記載したのですが\nなかなかこの話題は記載していて罪悪感があるというのか...\nただ遊びのための技術を得る楽しさがありました。</p>\n<p>後日のアドベントカレンダーも楽しみですね!</p>\n\n</div>",
    "link": "/blogs/qiita/Headless Chromeを使用した画像収集方法",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/Headless Chromeを使用した画像収集方法.png",
      "small": "/ogp/630x630/blogs/qiita/Headless Chromeを使用した画像収集方法.png"
    }
  },
  {
    "name": "2017-09-02 14-00-57 取得したドメインでメールサーバ構築",
    "publishedAt": "2017-09-02 14-00-57",
    "title": "取得したドメインでメールサーバ構築",
    "description": "  内容何番煎じかになるがお名前.comで入手したドメインを個人で作成したメールサーバに結びつけるためのメモ追加でGmail・スマホアプリにも受信する設定を記載モチベーションメール",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>何番煎じかになるが\nお名前.comで入手したドメインを個人で作成したメールサーバに結びつけるためのメモ\n追加でGmail・スマホアプリにも受信する設定を記載</p>\n<h1 id=\"モチベーション\">モチベーション</h1>\n<p>メールでやりとりすること実際そんなにないが\n開発とかでSNSアカウントをすぐに作りたいとき用にあれば良いかという程度のモチベーション\n後に後付け理由を記載している</p>\n<h2 id=\"個人のメールアドレスを得たい\">個人のメールアドレスを得たい</h2>\n<p>つい最近キャリアから格安スマホの会社に乗り換えた際に今まで使用していたメールアドレスを失効した。\n乗り換え先の会社のドメインによるメールアドレス追加オプションというのもあったが\n自分のドメイン所有してたのでどうせなら自分のドメインのメールアドレス作っちゃおうかという気持ちになった。</p>\n<h2 id=\"pcでもスマホでも容易に同じメールアドレスでやりとりしたい\">PCでもスマホでも容易に同じメールアドレスでやりとりしたい</h2>\n<p>そうそうないがMNPで機種乗り換えした時、\nメールアドレス変わったので〜〜〜というやりとりが不毛に思えてきた。\n携帯なくした時でもPCから連絡できる手段得たいというのもある。</p>\n<h1 id=\"ざっくりとしたネットワーク図\">ざっくりとしたネットワーク図</h1>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-09-02 14-00-57 取得したドメインでメールサーバ構築/0-md.png\" alt=\"syonet_network.png\"></p>\n<p>Webサーバとは分離してメールサーバを作成している\nメールサーバ上では受信のPOPと送信のSMTPの両方を起動させている</p>\n<h1 id=\"ざっくりとした構築参考\">ざっくりとした構築参考</h1>\n<p>下記のリンクを順番に実行していく</p>\n<p>メールサーバー構築(Postfix+Dovecot)\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://centossrv.com/postfix.shtml\">https://centossrv.com/postfix.shtml</a></p>\n<p>メールサーバー間通信内容暗号化(Postfix+Dovecot+OpenSSL)\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://centossrv.com/postfix-tls.shtml\">https://centossrv.com/postfix-tls.shtml</a></p>\n\n</div>",
    "link": "/blogs/qiita/取得したドメインでメールサーバ構築",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/取得したドメインでメールサーバ構築.png",
      "small": "/ogp/630x630/blogs/qiita/取得したドメインでメールサーバ構築.png"
    }
  },
  {
    "name": "2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -",
    "publishedAt": "2017-01-14 17-36-17",
    "title": "RoBoHoN開発Tip - ADB認識するまで -",
    "description": "  この記事ではRoBoHoN開発をmacで行った時に公式で公開されているサンプルコードをビルドして実行するまでの手順について記載する準備物Android Studio 2.1.1",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事では\">この記事では</h1>\n<p>RoBoHoN開発をmacで行った時に公式で公開されているサンプルコードをビルドして実行するまでの手順について記載する</p>\n<h1 id=\"準備物\">準備物</h1>\n<p>Android Studio 2.1.1\nADB DebugできるUSB mini端子\n※macですのでADB Driverのインストールは不要</p>\n<h1 id=\"robohonをusb経由でアプリインストールできるようにする\">RoBoHoNをUSB経由でアプリインストールできるようにする</h1>\n<p>よくあるAndroidのデバッグモード切り替えの方法と同じだった  </p>\n<ol>\n<li>ロボホンの背中から「設定」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/0-md.jpeg\" alt=\"IMG_1217.JPG\"></li>\n<li>「端末情報」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/1-md.jpeg\" alt=\"IMG_1218.JPG\"></li>\n<li>「ビルド番号」を複数回押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/2-md.jpeg\" alt=\"IMG_1219.JPG\">\nこの時点でRoBoHoNは開発モードになります<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/3-md.jpeg\" alt=\"IMG_1220.JPG\"></li>\n<li>「設定」画面から「その他」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/4-md.jpeg\" alt=\"IMG_1221.JPG\"></li>\n<li>「開発者向けオプション」を押す<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/5-md.jpeg\" alt=\"IMG_1222.JPG\"></li>\n<li>「On」にする<br><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/6-md.jpeg\" alt=\"IMG_1223.JPG\"></li>\n<li>「USBデバッグ」をチェックする\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2017-01-14 17-36-17 RoBoHoN開発Tip - ADB認識するまで -/7-md.jpeg\" alt=\"IMG_1224.JPG\"></li>\n</ol>\n<p>この手順でADBデバイスとして認識されるようになり、Android Studioから自作アプリインストールができるようになる\n次回はアプリ作成</p>\n\n</div>",
    "link": "/blogs/qiita/RoBoHoN開発Tip - ADB認識するまで -",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/RoBoHoN開発Tip - ADB認識するまで -.png",
      "small": "/ogp/630x630/blogs/qiita/RoBoHoN開発Tip - ADB認識するまで -.png"
    }
  },
  {
    "name": "2016-09-22 22-01-36 Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ",
    "publishedAt": "2016-09-22 22-01-36",
    "title": "Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ",
    "description": "  この記事の内容について前回UnityでSwiftで書いたiOSのネイティブコードを使う方法について記載しました。UnityのネイティブコードをSwiftで書こうとした時にはまっ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容について\">この記事の内容について</h1>\n<p>前回UnityでSwiftで書いたiOSのネイティブコードを使う方法について記載しました。</p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/68b4d3efd53c118339b3\">UnityのネイティブコードをSwiftで書こうとした時にはまったこと</a></li>\n</ul>\n<p>（実際やってみるとUnityでビルドする度にXcode上の設定が戻ってしまって辛い問題が...）</p>\n<p>その後Androidのネイティブコードも書いてみてiOSとAndroidのプロジェクト構成に違いが出たなぁということでメモ書きです。</p>\n<h1 id=\"対象のプロジェクトの簡単な説明\">対象のプロジェクトの簡単な説明</h1>\n<ul>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55\">Bariiiii</a>\nAssets、ProjectSettingsは\nUnityプロジェクトで使用されるものです。</p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin\">CreateBariiiiiAndroidNativePlugin</a><br>  このプロジェクトはAndroid Studioで作成されており、<br>  このプロジェクトでビルドで作成されたjarファイルやaarファイルをGradlew経由で<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/Android\">/Assets/Plugins/Android</a>にimportさせます。</li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiIOSNativePlugin\">CreateBariiiiiIOSNativePlugin</a><br>  このプロジェクトはXcodeで作成されますが、<br>  対象のネイティブコードはUnity管理のディレクトリ<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii\">/Assets/Plugins/iOS/</a>に直接配置します。この構成を実現させるにはXcodeプロジェクト上のファイルと実ファイルの参照がちゃんとリンクさせる必要があります。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"補足：そもそもunityによるiosとandroidのビルドの違い\">補足：そもそもUnityによるiOSとAndroidのビルドの違い</h2>\n<ul>\n<li><p>iOS\n一旦Xcodeのプロジェクトが作成されて\nXcode経由でiOS端末にアプリインストールします。</p>\n</li>\n<li><p>Android\nUnityの設定でAndroid SDKのパス設定が正常ならば\nUnityのビルドで直接Android端末にアプリインストールします。</p>\n</li>\n</ul>\n<h1 id=\"androidのプロジェクト\">Androidのプロジェクト</h1>\n<h2 id=\"ネイティブコードの配置先\">ネイティブコードの配置先</h2>\n<p>Layout XML、コードなどはよくあるAndroidプロジェクトの配置と同じです。</p>\n<h2 id=\"androidmanifestxml\">AndroidManifest.xml</h2>\n<p>使用したいAndroidプロジェクトのActivityや必要な権限（permission）はUnityプロジェクト側のAndroidManifest.xmlに記載します。\n理由としてはUnityビルド中に他のaarファイルの中にあるAndroidManifest.xmlがマージを行いコンフリクトを起こす原因になるからです。</p>\n<ul>\n<li>Androidプロジェクト側<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/src/main/AndroidManifest.xml\">AndroidManifest.xml</a></li>\n</ul>\n<pre><code class=\"language-/CreateBariiiiiAndroidNativePlugin/app/src/main/AndroidManifest.xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;work.syonet.bariiiii&quot;&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>\n<ul>\n<li>Unityプロジェクト側<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/Android/AndroidManifest.xml\">AndroidManifest.xml</a></li>\n</ul>\n<pre><code class=\"language-/Assets/Plugins/Android/AndroidManifest.xml\">&lt;manifest\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;uses-sdk android:minSdkVersion=&quot;14&quot; android:targetSdkVersion=&quot;23&quot; /&gt;\n    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera&quot;/&gt;\n    &lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n    &lt;application\n        android:theme=&quot;@style/UnityThemeSelector&quot;\n        android:icon=&quot;@drawable/app_icon&quot;\n        android:label=&quot;@string/app_name&quot;&gt;\n        &lt;activity\n            android:name=&quot;com.unity3d.player.UnityPlayerNativeActivity&quot;\n            android:configChanges=&quot;fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen&quot;&gt;\n            &lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;unity&quot; /&gt;\n            &lt;meta-data android:name=&quot;unityplayer.ForwardNativeEventsToDalvik&quot; android:value=&quot;true&quot; /&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity android:name=&quot;work.syonet.bariiiii.BarcodeScanAndroidActivity&quot;\n            android:label=&quot;@string/app_name&quot;\n            android:configChanges=&quot;keyboard|keyboardHidden|orientation&quot;\n            android:exported=&quot;true&quot;\n            android:permission=&quot;android.permission.INTERNET&quot;&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>\n<h2 id=\"buildgradle\">build.gradle</h2>\n<ul>\n<li>Androidプロジェクト直下のbuild.gradle<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/build.gradle\">build.gradle</a></li>\n</ul>\n<pre><code class=\"language-/CreateBariiiiiAndroidNativePlugin/build.gradle\">// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = &#39;1.0.3&#39;\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;com.android.tools.build:gradle:2.1.0&#39;\n        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;\n        classpath &quot;org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version&quot;\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n</code></pre>\n<p>ちょっとkotlin使いたかったのでその設定ぐらいしかしていません  </p>\n<ul>\n<li>Androidプロジェクト直下のapp/build.gradle<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/build.gradle\">build.gradle</a></li>\n</ul>\n<pre><code class=\"language-/CreateBariiiiiAndroidNativePlugin/app/build.gradle\">apply plugin: &#39;com.android.library&#39;\napply plugin: &#39;kotlin-android&#39;\napply plugin: &#39;kotlin-android-extensions&#39;\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion &quot;24.0.2&quot;\n\n    defaultConfig {\n        minSdkVersion 14\n        targetSdkVersion 23\n        versionCode 1\n        versionName &quot;1.0&quot;\n        multiDexEnabled true\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n        }\n    }\n    sourceSets {\n        main.java.srcDirs += &#39;src/main/kotlin&#39;\n    }\n}\n\n// UnityのAndroidプラグインフォルダに移動させる\ntask copyLibs &lt;&lt; {\n    configurations.compile.each { lib -&gt;\n        if (lib.path.startsWith(&quot;${projectDir}/libs&quot;)) {\n            // libs内のものはコピー対象外\n            return\n        }\n        copy {\n            from lib.path\n            into &#39;../../Assets/Plugins/Android&#39;\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)\n    testCompile &#39;junit:junit:4.12&#39;\n    compile &quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;\n    compile &#39;com.google.android.gms:play-services-vision:9.4.0&#39;\n    // Unityのプラグイン一覧には含めない\n    provided files(&#39;/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Development/Classes/classes.jar&#39;)\n}\n\n// このプロジェクトをaar化させる\ntask exportAar(type: Copy, dependsOn: assembleRelease) {\n    from(&#39;build/outputs/aar/&#39;)\n    into(&#39;../../Assets/Plugins/Android/&#39;)\n    include(&#39;app-release.aar&#39;)\n    rename(&#39;app-release.aar&#39;, &#39;bariiiii.aar&#39;)\n}\n\n\nandroid.libraryVariants.all { variant -&gt;\n    variant.outputs.each { output -&gt;\n        output.packageLibrary.exclude(&#39;libs/classes.jar&#39;)\n    }\n}\n</code></pre>\n<p>このbuild.gradleファイルで注目する点として  </p>\n<ul>\n<li>apply plugin: &#39;com.android.library&#39;<br>com.android.applicationから変更</li>\n<li>task copyLibs<br>Google Play ServicesなどAndroidプロジェクトで使用していた<br>ライブラリをUnity管理下にするためのバッチ</li>\n<li>task exportAar<br>今回作成したAndroidプロジェクトをaarファイル化しUnity管理下にするバッチ<br>aarファイル化させた理由としてはAndroidプロジェクト内にあるLayout XMLやstring.xmlなどもまとめてくれるからです。</li>\n<li>provided files(&#39;/Applications/Unity/〜〜〜〜<br>Androidプロジェクト内のコードでUnityで提供されているUnitySendMessageを使用したかったからです。<br>使用していた箇所として<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/src/main/java/work/syonet/bariiiii/BarcodeCameraFragment.kt\">これ</a>になります。<br>provided filesを入れないとtask copyLibsを実行した時にUnityのクラスファイルを二重に入れることになり、ビルドが通らなくなります。</li>\n</ul>\n<h3 id=\"ビルド実行\">ビルド実行</h3>\n<pre><code>gradlew app:copyLibs &amp;&amp; gradlew app:exportAar\n</code></pre>\n<h2 id=\"androidバージョンの指定の統一\">Androidバージョンの指定の統一</h2>\n<p>build.gradlewやAndroidManifest.xml、UnityEditor上で指定されているminSdkVersionやtargetSdkVersionはバラツキがないように設定</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-09-22 22-01-36 Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ/0-md.png\" alt=\"スクリーンショット 2016-09-22 21.02.59.png\"></p>\n<h2 id=\"cからandroidプロジェクトのコードを動かすようにする\">C#からAndroidプロジェクトのコードを動かすようにする</h2>\n<p>ここのやり方は公式や他のQiitaの記事でも書いてあったりしますので詳しい説明は割愛します。\nActivityLauncher.javaというkotlinじゃなくてJavaのファイルにした理由ですが特にありません。\n強いて理由とすればC#とJavaって書き方似てるなぁという愉悦に浸るぐらいの程度のものです。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Screen/BarcodeScanScreen/Component/CameraRawImageComponent.cs\">CameraRawImageComponent.cs</a></p>\n<pre><code class=\"language-CameraRawImageComponent.cs\">AndroidJavaClass unityPlayer = new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;); \n        AndroidJavaObject currentUnityActivity = unityPlayer.GetStatic&lt;AndroidJavaObject&gt;(&quot;currentActivity&quot;); \n\n        AndroidJavaClass plugin = new AndroidJavaClass(&quot;work.syonet.bariiiii.ActivityLauncher&quot;); \n        plugin.CallStatic(&quot;launchActivity&quot;, &quot;work.syonet.bariiiii.BarcodeScanAndroidActivity&quot;, currentUnityActivity );\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/CreateBariiiiiAndroidNativePlugin/app/src/main/java/work/syonet/bariiiii/ActivityLauncher.java\">ActivityLauncher.java</a></p>\n<pre><code class=\"language-ActivityLauncher.java\">package work.syonet.bariiiii;\n\nimport android.app.Activity;\nimport android.content.Intent;\n\n/**\n * C#のコードからAndroidのアクティビティにつなげるクラス\n */\npublic class ActivityLauncher {\n\n    /**\n     * AndroidのアクティビティにIntentを発行する\n     * @param type 起動したいアクティビティ\n     * @param m_activity Unity自身のアクティビティ\n     */\n    public static void launchActivity(String type, final Activity m_activity) {\n        Intent i = new Intent();\n        i.setAction(Intent.ACTION_MAIN);\n        i.setClassName(m_activity, type);\n\n        // 画面遷移を行う\n        m_activity.startActivity(i);\n    }\n}\n</code></pre>\n<h1 id=\"iosのプロジェクト\">iOSのプロジェクト</h1>\n<h2 id=\"ネイティブコードの配置先-1\">ネイティブコードの配置先</h2>\n<p>この記事の冒頭にもありましたが/Assets/Plugins/iOS/下に配置します。</p>\n<blockquote>\n<p>このプロジェクトはXcodeで作成されますが、<br>対象のネイティブコードはUnity管理のディレクトリ<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii\">/Assets/Plugins/iOS/</a>に直接配置します。この構成を実現させるにはXcodeプロジェクト上のファイルと実ファイルの参照がちゃんとリンクさせる必要があります。</p>\n</blockquote>\n<p>iOSにもLayoutを構成するxibファイルやstoryboardなどInterface Builderで作成したもの達がありますがUnity上でも呼び出すことが可能で特別なIBの設定なども必要ありません。</p>\n<h3 id=\"実ファイルとxcodeプロジェクトをリンクさせる方法\">実ファイルとXcodeプロジェクトをリンクさせる方法</h3>\n<p>まず/Assets/Plugins/iOS/下に空のクラスファイルを作成します。\nあとはFinderからファイルをXcode上にドラッグアンドドロップしましょう。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-09-22 22-01-36 Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ/1-md.png\" alt=\"スクリーンショット 2016-09-22 21.20.35.png\"></p>\n<p>これでリンクされるようになります。</p>\n<h2 id=\"cからiosプロジェクトのコードを動かすようにする\">C#からiOSプロジェクトのコードを動かすようにする</h2>\n<p>ここのやり方もAndroid同様に公式や他のQiitaの記事でも書いてあったりしますので詳しい説明は割愛です。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.cs\">BarcodeScanIOS.cs</a></p>\n<pre><code class=\"language-/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.cs\">    [DllImport(&quot;__Internal&quot;)]\n    private static extern void barcordScanInit_ ();\n\n    public static void barcordScanInit () {\n        if (Application.platform != RuntimePlatform.OSXEditor) {\n            barcordScanInit_ ();\n        }\n    }\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/blob/f25487a98531cd2eb27a294ab928a1976d933a55/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.mm\">BarcodeScanIOS.mm</a></p>\n<pre><code class=\"language-/Assets/Plugins/iOS/Bariiiii/BarcodeScanIOS/BarcodeScanIOS.mm\">#pragma mark called by C#\n/**\n * MARK:Unity上で扱うViewController\n */\nextern UIViewController *UnityGetGLViewController();\n\nextern &quot;C&quot; {\n    void barcordScanInit_();\n}\n\n/**\n * MARK:C#からBarcodeIOSのクラスを呼び出す\n */\nvoid barcordScanInit_() {\n\n    UINib *nib = [UINib nibWithNibName:@&quot;BarcodeScanIOSScreen&quot; bundle:nil];\n    BarcodeScanIOS *barcode = [[nib instantiateWithOwner:nil options:nil] objectAtIndex:0];\n    [UnityGetGLViewController() presentViewController:barcode animated:YES completion:nil];\n}\n</code></pre>\n<h1 id=\"今後（今\">今後（今</h1>\n<p>Unityプロジェクトとネイティブコードプロジェクトのビルドを楽にできるようなツールを作成中\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/Bariiiii/tree/master/BuildTool\">https://github.com/igara/Bariiiii/tree/master/BuildTool</a>\nもっとiOSのビルドが楽になるようなものを作っていきたいです。</p>\n<h1 id=\"参考リンク\">参考リンク</h1>\n<ul>\n<li>公式<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.unity3d.com/ja/current/Manual/PluginsForAndroid.html\">Unity - マニュアル_ Android 用のプラグインをビルド</a></li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.unity3d.com/ja/current/Manual/PluginsForIOS.html\">Unity - マニュアル_ iOS 用のプラグインをビルド</a></li>\n</ul>\n</li>\n<li>UnityとAndroidネイティブの連携：UnityからネイティブのActivityを呼び出す[part1] _ 未知の路<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://redfreshet.com/2015/08/24/unity_android_link_3/\">http://redfreshet.com/2015/08/24/unity_android_link_3/</a></li>\n<li>【Unity】こんなAndroidネイティブプラグインをつくっちゃいけない！【特に広告SDK】 - Qiita<br><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/RyotaMurohoshi/items/3b95daeb8eaa6b487a20\">http://qiita.com/RyotaMurohoshi/items/3b95daeb8eaa6b487a20</a></li>\n</ul>\n\n</div>",
    "link": "/blogs/qiita/Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ.png",
      "small": "/ogp/630x630/blogs/qiita/Unity上で扱うネイティブコードのプロジェクト管理・ビルドとかのメモ.png"
    }
  },
  {
    "name": "2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと",
    "publishedAt": "2016-07-02 16-23-38",
    "title": "UnityのネイティブコードをSwiftで書こうとした時にはまったこと",
    "description": "  内容Unityで一部の処理をiOSのネイティブコードで書きたい時があるかと思います。尚且つiOSであるならばSwiftで書きたいということもあるかと思います。その時に実際にやっ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>Unityで一部の処理をiOSのネイティブコードで書きたい時があるかと思います。\n尚且つiOSであるならばSwiftで書きたいということもあるかと思います。\nその時に実際にやってみてはまったことを書き残します。</p>\n<p>私の場合はUnityアプリケーション上で動くWebカメラではなく、iOSのAVFoundationライブラリ使ってカメラモジュールを動かしバーコードの読み取りを行いたいという時にここの箇所をSwiftで書ければなぁ...ということがありました。</p>\n<h1 id=\"ネイティブコードを書いてみて呼び出してみよう！\">ネイティブコードを書いてみて呼び出してみよう！</h1>\n<h2 id=\"サンプルコード\">サンプルコード</h2>\n<p>先にC#上で外部のファイルを呼び出す処理について記載します。\nC#には<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://msdn.microsoft.com/ja-jp/library/aa288468(v=vs.71).aspx\">DllImport属性</a>を指定することで外部のdllを読み込むことができ、\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://msdn.microsoft.com/ja-jp/library/e59b22c5.aspx\">extern修飾子</a>というのでネイティブコード上のメソッドや変数を指定します。</p>\n<p>下記はネイティブコードを呼び出すためにC#で記載したクラスファイルです。</p>\n<pre><code class=\"language-HogeClass.cs\">using UnityEngine;\nusing System.Runtime.InteropServices;\n\npublic class HogeClass {\n    [DllImport(&quot;__Internal&quot;)]    // Unityで提供されているネイティブプラグイン\n    private static extern void hogeMethod_ ();    // ネイティブコード上のメソッド\n\n    public static void hogeMethod () {\n        if (Application.platform != RuntimePlatform.OSXEditor) {\n            hogeMethod_ ();    // ネイティブコード上のメソッドを呼び出す\n        }\n    }\n}\n</code></pre>\n<p>ただしC#から直接Swiftのコードを読み込むことができないため\nObjective-Cで記載したコードを経由してSwiftのコードを読みに行きましょう。</p>\n<pre><code class=\"language-HogeClass.mm\">#import &lt;UIKit/UIKit.h&gt;\n#import &lt;[Unityのプロジェクト名]-Swift.h&gt;\n\nextern &quot;C&quot;{\n    void hogeMethod_() {\n         [HogeClass hogeMethod];    // Swiftのメソッドを呼び出す\n    }\n}\n</code></pre>\n<p>ここの</p>\n<pre><code>#import &lt;[Unityのプロジェクト名]-Swift.h&gt;\n</code></pre>\n<p>ですが\nObjective-C Generated Interface Header Name\nに記載されているのを指定してあげてください。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと/0-md.png\" alt=\"スクリーンショット 2016-07-02 15.13.12.png\"></p>\n<p>[Unityのプロジェクト名]-Swift.hの生成方法ですが\n下記にまとめて記載します。（今回一番はまったところです。）</p>\n<p>いよいよSwiftのコードの記載です。</p>\n<pre><code class=\"language-HogeClass.swift\">import UIKit\n\npublic class HogeClass: NSObject {\n    public class func hogeMethod() {\n        print(&quot;hoge&quot;)    // Xcodeのコンソール上にhogeと表示させる\n    }\n}\n</code></pre>\n<p>これでSwiftのコードを読み込むためのコーディング完了です。</p>\n<h2 id=\"unityのプロジェクト名-swifthの生成方法\">[Unityのプロジェクト名]-Swift.hの生成方法</h2>\n<p>Embedded Content Contains Swift Code　というとこをYesにすることでSwiftのコードがヘッダファイルとして生成されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと/1-md.png\" alt=\"スクリーンショット 2016-07-02 16.11.18.png\"></p>\n<p>あとObjective-CからSwiftを呼びだそうとすると</p>\n<pre><code>dyld: Library not loaded: @rpath/libswiftCore.dylib\nReferenced from: /private/var/mobile/Containers/Bundle/Application/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/App-Name.app/App-Name\nReason: image not found\n</code></pre>\n<p>というエラーが出てきてしまいます。\nこれの解決方法としてRunpath Search Pathに@executable_path/Frameworksを追加してあげることでUnity上でObjective-Cを経由しながらSwiftの処理を動かすことができるようになります。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-07-02 16-23-38 UnityのネイティブコードをSwiftで書こうとした時にはまったこと/2-md.png\" alt=\"スクリーンショット 2016-07-02 16.22.18.png\"></p>\n<h1 id=\"参考リンク\">参考リンク</h1>\n<p>KAKELOG / Unity iOS のネイティブプラグインを Swift で書いた\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://blog.kakeragames.com/2016/05/07/unity-swift.html\">http://blog.kakeragames.com/2016/05/07/unity-swift.html</a>\nObjective-cからSwiftを呼び出す方法\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/syou007/items/b0c54d795d63fb84de72\">http://qiita.com/syou007/items/b0c54d795d63fb84de72</a>\nUnityのスクリプトからのiOSのネイティブプラグインとのやりとり\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/tyfkda/items/dc5da219d22cc55de301\">http://qiita.com/tyfkda/items/dc5da219d22cc55de301</a>\nSwiftで書かれたiOSアプリを実機デバッグ実行時に「image not found」エラーとなる場合の対処\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://raimon49.github.io/2016/03/20/error-at-swift-app-with-ios-device.html\">http://raimon49.github.io/2016/03/20/error-at-swift-app-with-ios-device.html</a>\nテラシュールブログ / \nUnityのC#からネイティブプラグインを経由せずObjective-Cのコードを呼び出す\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://tsubakit1.hateblo.jp/entry/2014/08/14/022012\">http://tsubakit1.hateblo.jp/entry/2014/08/14/022012</a></p>\n\n</div>",
    "link": "/blogs/qiita/UnityのネイティブコードをSwiftで書こうとした時にはまったこと",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/UnityのネイティブコードをSwiftで書こうとした時にはまったこと.png",
      "small": "/ogp/630x630/blogs/qiita/UnityのネイティブコードをSwiftで書こうとした時にはまったこと.png"
    }
  },
  {
    "name": "2016-06-04 00-08-50 Webの入力作業を楽したい",
    "publishedAt": "2016-06-04 00-08-50",
    "title": "Webの入力作業を楽したい",
    "description": "  内容「おまえは今まで作ったアカウント数をおぼえているのか？」仕事でログイン・サインイン機能の改修があり、新規アカウントによるテストというのが何回も行わないといけなかったというこ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p><strong>「おまえは今まで作ったアカウント数をおぼえているのか？」</strong></p>\n<p>仕事でログイン・サインイン機能の改修があり、\n新規アカウントによるテストというのが何回も行わないといけなかったということがありました。\n新規アカウント作るにも電話番号であったり氏名など、入力項目が多くて辛い...\n少しでも楽したい...ということでちょっとしたツールを作ってみたという話</p>\n<p>テスト用の環境とかちゃんと整備しようよ...って気にもなりますが...</p>\n<p>即席で入力が楽になるというやり方の紹介になります。\n今回はこの画面からQiitaのキーワード検索を行ってみる例をやってみます。</p>\n<p>2016/06/04追記\n@tenkoma@github さんの紹介でFirefoxのアドオン、Selenium IDEというキーワードをいただいたので試してみましたが、\n結論を言いますとSelenium IDEで自動入力するのが楽でした。\n理由としては自動で行いたいことを人間の操作から自動で登録できたからです。\nSelenium IDEについて下記に追記を致しました。</p>\n<p>JavaScriptを用いてやるか、Seleniumで自動でやるかどっちがいいの？という話についてです。\nJavaScriptの実装過程でここを動かせばこのスクリプトを動かしたいとか\nデバッグを交えてやりたい時にJavaScriptによる半自動なやり方は有効だと思います。</p>\n<p>Selenium IDEを使ってアカウントの作成を行った方が早かった...。</p>\n<h1 id=\"何はともあれ開発ツールだ（javascript編）\">何はともあれ開発ツールだ（JavaScript編）</h1>\n<p>画面上部の虫眼鏡周りのHTML要素を見てみましょう。</p>\n<h2 id=\"虫眼鏡をクリック\">虫眼鏡をクリック</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/0-md.png\" alt=\"スクリーンショット 2016-06-03 23.24.49.png\"></p>\n<p>するとaタグや子の要素でiタグとかあります。\nこのあたりをクリックすれば検索入力のフォームが出てくるので\nこの中で比較的にJavaScriptでiタグのclassからHTMLの要素取得してイベント発火してみましょう。\nclassは複数のHTMLの要素に指定できるためプラスでどこの部分のclassを指定するのかを教えるために[0]も追記します。\nそれとクリックイベントを追記すれば検索フォームが出てきます。</p>\n<p>コードとして下記になります。</p>\n<p>虫眼鏡クリックの処理</p>\n<pre><code>document.getElementsByClassName(&#39;fa fa-search&#39;)[0].click();\n</code></pre>\n<p>これを開発ツールのコンソール部分に入れて実行すればフォームが出てきました。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/1-md.png\" alt=\"スクリーンショット 2016-06-03 23.41.21.png\"></p>\n<h2 id=\"文字の入力\">文字の入力</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/2-md.png\" alt=\"スクリーンショット 2016-06-03 23.46.43.png\"></p>\n<p>入力箇所のところはidの指定がされているのでidの指定から入力部に値を入れてみましょう。</p>\n<p>入力箇所の文字入力</p>\n<pre><code>document.getElementById(&#39;q&#39;).value = &#39;JavaScript&#39;;\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/3-md.png\" alt=\"スクリーンショット 2016-06-03 23.53.15.png\"></p>\n<p>文字が入りましたね！</p>\n<h2 id=\"「search」をクリック\">「Search」をクリック</h2>\n<p>説明は虫眼鏡クリックだいたい同じですので省略。</p>\n<p>「Search」をクリックする処理</p>\n<pre><code>document.getElementsByClassName(&#39;btn btn-default btn-sm&#39;)[0].click();\n</code></pre>\n<p>検索が実行されましたね！</p>\n<h2 id=\"ブックマークレットを作る\">ブックマークレットを作る</h2>\n<p>先ほど作成していったJavaScriptをブックマーク化します。\nその時に登録するURLの部分を下記のようにして登録を行います。</p>\n<pre><code>javascript:document.getElementsByClassName(&#39;fa fa-search&#39;)[0].click();document.getElementById(&#39;q&#39;).value = &#39;JavaScript&#39;;document.getElementsByClassName(&#39;btn btn-default btn-sm&#39;)[0].click();\n</code></pre>\n<p>あとはブックマーク一覧からこの作成されたものをクリックするだけで\nQiitaのページの要素やイベントを使って検索を半自動で行えるようになります。</p>\n<h1 id=\"selenium-ide\">Selenium IDE</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://addons.mozilla.org/ja/firefox/addon/selenium-ide/\">https://addons.mozilla.org/ja/firefox/addon/selenium-ide/</a></p>\n<p>FirefoxのアドオンとしてSelenium IDEがあります。\nSelenium自体は他のブラウザにもWebDriverというのをインストールしてあげれば使用することができますが、\n今回はこのアドオン利用してやった方がアカウント作成するまでにかかる時間が少なかったため、\nアドオンの紹介だけします。</p>\n<h2 id=\"まずはfirefoxとアドオンをインストール\">まずはFirefoxとアドオンをインストール</h2>\n<p>表題通りです。</p>\n<h2 id=\"selenium-ideを使う\">Selenium IDEを使う</h2>\n<p>メニューバーから「ツール」→「Selenium IDE」を選択。\nこんな今感じのが出てくるかと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/4-md.png\" alt=\"スクリーンショット 2016-06-04 16.59.02.png\"></p>\n<p>URLのとこに対象のURLを入れます。</p>\n<p>そしたら下記の画像の「ここをクリック」を押してみましょう。\nこれでFirefox上のユーザの操作を記憶できるようになります。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/5-md.png\" alt=\"スクリーンショット 2016-06-04 7.04.44.png\"></p>\n<p>操作を行いSelenium上で扱うコマンドを自動で作成されたら、<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-06-04 00-08-50 Webの入力作業を楽したい/6-md.png\" alt=\"スクリーンショット 2016-06-04 17.03.59.png\">を押せば自動に入力などの操作が行われます。</p>\n\n</div>",
    "link": "/blogs/qiita/Webの入力作業を楽したい",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/Webの入力作業を楽したい.png",
      "small": "/ogp/630x630/blogs/qiita/Webの入力作業を楽したい.png"
    }
  },
  {
    "name": "2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング",
    "publishedAt": "2016-05-21 11-33-16",
    "title": "MacでUnityのAndroidビルドのセッティング",
    "description": "  概要今後UnityでAndroid・iOSアプリ両方を作っていきたいということがあり、いざやってみようとしたらUnity以外に必要なものがあったためメモとして記載する。なお対象",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<p>今後UnityでAndroid・iOSアプリ両方を作っていきたいということがあり、\nいざやってみようとしたらUnity以外に必要なものがあったため\nメモとして記載する。\nなお対象のプロジェクトはデフォルトで用意されているStandardプロジェクトで行う。</p>\n<h1 id=\"必要なもの\">必要なもの</h1>\n<p>Unityはインストールされている前提で記載します。\nAndroidのビルドに必要なものになります。</p>\n<p>下記のものがインストールされたらUnityのメニューバーより\n「 Unity → Preferences 」 External Tools を選択してパスの設定を行います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/0-md.png\" alt=\"スクリーンショット 2016-05-21 11.12.19.png\"></p>\n<h2 id=\"android-sdk\">Android　SDK</h2>\n<p>Unityの公式で記載されている内容としては下記になります。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://docs.unity3d.com/ja/current/Manual/android-sdksetup.html\">http://docs.unity3d.com/ja/current/Manual/android-sdksetup.html</a></p>\n<p>Android Studioをインストールされていて既にAndroid　SDKが存在するとき\n/Users/[ユーザ名]/Library/Android/sdk/\nここにAndroid　SDKが設置されます。</p>\n<h2 id=\"jdk\">JDK</h2>\n<p>既存でjdkがインストールされているときは下記のパスになります。\n/Library/Java/JavaVirtualMachines/jdk1.7.X_XX.jdk/Contents/Home</p>\n<h1 id=\"ビルドの実行\">ビルドの実行</h1>\n<p>Androidのエミュレータとして<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.genymotion.com/\">Genymotion</a>というのがありますがこちらのエミュレータはAndroid SDKからのエミュレータ起動より早いためこちらを事前に起動しておくと良いかもしれません。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.genymotion.com/\">https://www.genymotion.com/</a></p>\n<p>Unityのメニューバーより\n「 File → Build Settings 」\nPlatformからAndroidを選択し、「Build &amp; RUN」を行うとビルドが開始されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/1-md.png\" alt=\"スクリーンショット 2016-05-21 11.29.54.png\"></p>\n<p>しばらくするとGenymotionで起動したエミュレータ上にアプリケーションが起動されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/2-md.png\" alt=\"スクリーンショット 2016-05-21 11.31.39.png\"></p>\n<h1 id=\"新規のプロジェクトからandroidアプリを起動しよう\">新規のプロジェクトからAndroidアプリを起動しよう</h1>\n<p>Unityによる画面作成は「canvas」から行います。\nHierarchy ウィンドウから「Create　→ UI」より「canvas」を選択して画面を作成します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-05-21 11-33-16 MacでUnityのAndroidビルドのセッティング/3-md.png\" alt=\"スクリーンショット 2016-05-21 19.09.47.png\"></p>\n<p>それからそのあと「Command + S」で保存を行い、「Build &amp; RUN」でUnityのロゴが表示されるかと思われます。</p>\n<p>次回画面の作りについて記載したいと思います。</p>\n\n</div>",
    "link": "/blogs/qiita/MacでUnityのAndroidビルドのセッティング",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/MacでUnityのAndroidビルドのセッティング.png",
      "small": "/ogp/630x630/blogs/qiita/MacでUnityのAndroidビルドのセッティング.png"
    }
  },
  {
    "name": "2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える",
    "publishedAt": "2016-04-23 15-43-33",
    "title": "グラフィックツールで作成したSVGにアニメーションを付け加える",
    "description": "  内容CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）http://qiita.com/igara/items/918c6237d0cf8fbc0c1d非イラ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/918c6237d0cf8fbc0c1d\">http://qiita.com/igara/items/918c6237d0cf8fbc0c1d</a></p>\n<blockquote>\n<p>非イラストレータが初めてPCでイラストを描いた話\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/3a8dfad331652b632eff\">http://qiita.com/igara/items/3a8dfad331652b632eff</a></p>\n<blockquote>\n<p>新しいデザインを作るということがないのでちょっと勉強がてらに絵を描いてみたという話になります。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>前回描いた絵からの教訓で簡単なイラストだったら画像を使わずにCSSで表示可能なのでは？と思った為実践してみたというお話になります。</p>\n</blockquote>\n<p>前回はCSSを用いて絵を描いてましたが、図形の角度をコードで変更したりと計算が辛かった為、\nグラフィックツールでGUI的に編集できたら便利そう！というのと\n尚且つアニメーション追加できたら面白そう！\nと思ったので試しにやってみたという内容になります。</p>\n<h1 id=\"svgとは\">SVGとは</h1>\n<p>SVG：Scalable Vector Graphics</p>\n<p>JPGやPNGと呼ばれる画像はビットマップデータというものでデータの実態はバイナリです。\nそれに対しSVGはベクターデータと呼ばれるものでデータの実態はXMLで構成されているものになります。\nなのでちょっとしたデザインの修正をソース修正で行うことが可能です。</p>\n<p>この二つにはそれぞれ得意・不得意としているものがあります。\n参考リンク：「ビットマップデータ」と「ベクターデータ」の違い\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://webgaku.hateblo.jp/entry/20120408/1333859650\">http://webgaku.hateblo.jp/entry/20120408/1333859650</a></p>\n<p>近年、SVGはブラウザでもサポートされるようになった為、\nできればデザインはSVGで構築したいなと思いました。</p>\n<p>こちらは現在のSVG対応のブラウザバージョン状況です。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://caniuse.com/#feat=svg-img\">http://caniuse.com/#feat=svg-img</a></p>\n<h1 id=\"inkscape\">Inkscape</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://inkscape.org/\">Inkscape</a></p>\n<p>SVGを作成するために使用したソフトウェア\nMacやWindows、Linuxにマルチプラットフォームで対応されている。\n（Macは別途XQuartzをインストールする必要がある）\nInkscape以外のソフトウェアですとAdobe IllustratorとかSketchなどでも作成可能です。\n何気にLibreOfficeのDrawでも作成は可能のようです。</p>\n<p>筆者はMacによるInkscapeの使用となります。\nMacですとコピーや貼り付けを普段はCommandキーを押して行っているかと思いますがControlキーでコピー貼り付けを行うなど操作点でWindowsに近いものがあるように感じました。</p>\n<h2 id=\"とりあえずxmlエディターを開こう\">とりあえずXMLエディターを開こう!</h2>\n<p>前述でも記載しましたがSVGはXMLで構成されていますので\nInkscapeを開いたときは\nメニューバーより 「編集」→「XMLエディター」を選択しましょう。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/0-md.png\" alt=\"スクリーンショット 2016-04-17 20.04.48.png\"></p>\n<p>すると画面の右側にこんなものが出てくるかと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/1-md.png\" alt=\"スクリーンショット 2016-04-17 20.08.51.png\"></p>\n<p>height 297mmやwidth 210mmとありますがここを編集することで左に表示されている枠の大きさを変更することが可能です。</p>\n<h2 id=\"文字を入れてみる\">文字を入れてみる</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/2-md.png\" alt=\"スクリーンショット 2016-04-17 20.12.18.png\"></p>\n<p>左のツールバーに「テキストツール」があるのでこちらを選択して文字を入れたい箇所へクリックすることで文字の追加が行えます。</p>\n<p>文字の追加を行うとXMLの方にも自動で追加されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/3-md.png\" alt=\"スクリーンショット 2016-04-17 20.14.35.png\"></p>\n<p>上の画像は追加した文字のXMLの内容ですが文字の色やサイズの指定方法が「style」に記載されています。\nstyleの内容ですがこちらはCSSによるものです。\n文字を移動したい時、文字の大きさを変えたい時はXMLの変更からも行えますが、ツールバーの「選択ツール」（マウスマーク）でマウスによるデザインの変更が行えます。</p>\n<h2 id=\"xmlの記述を削除する\">XMLの記述を削除する</h2>\n<p>SVGでアニメーションさせる方法として3つあります。</p>\n<ul>\n<li>CSS（このやり方は<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/918c6237d0cf8fbc0c1d\">前回</a>やったものになるかと思います。）</li>\n<li>SVGのanimationタグ→こちらは一部ブラウザでは非推奨となっております。<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ssvvgg.net/post/127068682345/2015%E5%B9%B408%E6%9C%8819%E6%97%A5%E3%81%AEsvg\">http://ssvvgg.net/post/127068682345/2015%E5%B9%B408%E6%9C%8819%E6%97%A5%E3%81%AEsvg</a></li>\n<li>JavaScript</li>\n</ul>\n<p>今回もCSSを用いてアニメーションの追加を行ってみましょう。</p>\n<p>せっかくInkspaceを使っていたところですが適当なテキストエディタで開きます。\nテキストエディタでSVGを開くと下記のようなXMLが表示されるかと思います。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-23 15-43-33 グラフィックツールで作成したSVGにアニメーションを付け加える/4-md.png\" alt=\"スクリーンショット 2016-04-18 13.09.59.png\"></p>\n<p>SVGはHTMLに直書きすることでも動作するので\nSVGのソースの最上部に記載されている下記の記述を削除します。</p>\n<p>こちらは削除を行っても再度Inkspaceを使ったデザインの修正可能です。</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;\n&lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt;\n</code></pre>\n<p>削除した理由としてですが\nこのSVGファイルをHTMLのモジュールとして読み込んであげて後でCSSのアニメーション追加を行っていこうという方針にしました。（もっと良い方法がありそう...）</p>\n<h2 id=\"アニメーションの追加\">アニメーションの追加</h2>\n<p>作成したSVG中の要素は自動でidの指定がされているかと思います。\n（textXXXXとかpathYYYYとか）\nこちらのidに対してCSS3のアニメーション指定することで動かすことが可能になります。\nもちろんidの名前を変更することも可能です。</p>\n<p>CSS3のアニメーションについては下記のサイトを参考にしました。</p>\n<p>animation－CSS3リファレンス\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.htmq.com/css3/animation.shtml\">http://www.htmq.com/css3/animation.shtml</a>\ncss3のanimationを使ってみたら予想以上に簡単だった！\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://sterfield.co.jp/designer/css3%E3%81%AEanimation%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%89%E4%BA%88%E6%83%B3%E4%BB%A5%E4%B8%8A%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%A0%E3%81%A3%E3%81%9F%EF%BC%81/\">http://sterfield.co.jp/designer/css3%E3%81%AEanimation%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%89%E4%BA%88%E6%83%B3%E4%BB%A5%E4%B8%8A%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%A0%E3%81%A3%E3%81%9F%EF%BC%81/</a></p>\n<h1 id=\"所感・感想・まとめ\">所感・感想・まとめ</h1>\n<p>基本SVGファイルはInkspaceでいじる（HTMLに書き起こす作業についてWebPackがうまく解決してくれました）、アニメーション処理はCSSファイルで追加すると処理の分割ができました。</p>\n<p>アニメーションの箇所は結局また独自のCSSアニメーションの追加を行っていた為、次はライブラリを使って豪華なアニメーションを追加していきたいなと思います。</p>\n<h1 id=\"参考ページ\">参考ページ</h1>\n<p>滑らかで美しい表現ができる！SVGアニメーションを使ってみよう\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.codecamp.jp/svg_animation_intro\">https://blog.codecamp.jp/svg_animation_intro</a>\nWEBデザイナーのはじめての「SVG」\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://webkikaku.co.jp/blog/webdesign/svg_for_webdesigner/\">https://webkikaku.co.jp/blog/webdesign/svg_for_webdesigner/</a></p>\n\n</div>",
    "link": "/blogs/qiita/グラフィックツールで作成したSVGにアニメーションを付け加える",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/グラフィックツールで作成したSVGにアニメーションを付け加える.png",
      "small": "/ogp/630x630/blogs/qiita/グラフィックツールで作成したSVGにアニメーションを付け加える.png"
    }
  },
  {
    "name": "2016-04-11 17-58-27 閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード",
    "publishedAt": "2016-04-11 17-58-27",
    "title": "閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード",
    "description": "  この記事の内容ServiceWorker・Cache APIとはServiceWorkerとCache APIを使ってオフラインでも動くWebアプリを作るhttp://qiit",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容\">この記事の内容</h1>\n<ul>\n<li>ServiceWorker・Cache APIとは</li>\n</ul>\n<p>ServiceWorkerとCache APIを使ってオフラインでも動くWebアプリを作る\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/horo/items/175c8fd7513138308930\">http://qiita.com/horo/items/175c8fd7513138308930</a></p>\n<p>JavaScriptの処理で自在にキャッシュ削除とかが行えたら良いなということでメモとして記載します。</p>\n<h1 id=\"コード\">コード</h1>\n<p>下記をブラウザの開発ツールのコンソールより実行することで\nServiceWorkerの登録削除とCache APIのキャッシュを全て削除されます。</p>\n<pre><code class=\"language-JavaScript\">navigator.serviceWorker.getRegistrations().then(function(registrations) {\n    // 登録されているworkerを全て削除する\n    for(let registration of registrations) {\n        registration.unregister();\n    }\n});\ncaches.keys().then(function(keys) {\n    var promises = [];\n    // キャッシュストレージを全て削除する\n    keys.forEach(function(cacheName) {\n        if (cacheName) {\n            promises.push(caches.delete(cacheName));\n        }\n    });\n});\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード.png",
      "small": "/ogp/630x630/blogs/qiita/閲覧しているサイトのServiceWorkerの登録削除とCache APIのキャッシュを全て削除するJSコード.png"
    }
  },
  {
    "name": "2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）",
    "publishedAt": "2016-04-07 18-15-40",
    "title": "CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）",
    "description": "  内容非イラストレータが初めてPCでイラストを描いた話http://qiita.com/igara/items/3a8dfad331652b632eff新しいデザインを作るという",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"内容\">内容</h1>\n<p>非イラストレータが初めてPCでイラストを描いた話\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/3a8dfad331652b632eff\">http://qiita.com/igara/items/3a8dfad331652b632eff</a></p>\n<blockquote>\n<p>新しいデザインを作るということがないのでちょっと勉強がてらに絵を描いてみたという話になります。</p>\n</blockquote>\n<p>前回描いた絵からの教訓で簡単なイラストだったら画像を使わずにCSSで表示可能なのでは？と思った為実践してみたというお話になります。</p>\n<p>記事の前半ではCSSの内容について、後半ではPostCSSの導入について記載させていただきます。</p>\n<h1 id=\"絵\">絵</h1>\n<p>こんなものができあがってしまった</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）/0-md.gif\" alt=\"カエルの絵\"></p>\n<p>実物として下記のリンクにあります。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://syonet.work/documents/styleguide/resources-assets-styleguide-css-symbol-myicon-icon-garasyo.html\">https://syonet.work/documents/styleguide/resources-assets-styleguide-css-symbol-myicon-icon-garasyo.html</a></p>\n<h1 id=\"絵の一部をパーツに置き換えて考える\">絵の一部をパーツに置き換えて考える</h1>\n<p>下記の画像のようにパーツを構成します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）/1-md.png\" alt=\"スクリーンショット 2016-04-07 17.40.10.png\"></p>\n<p>それぞれの図形は複雑ではないです。</p>\n<h1 id=\"コード内容\">コード内容</h1>\n<p>パーツ化したものをHTML、CSS化にしてみた内容になります。\n背景の赤い部分など実際は黄色い背景より大きいのですが、\n\b\b<code>overflow: hidden;</code>を用いてはみ出ないようにしていたり、\n三角形を作成するために<code>border</code>を用いたり無茶苦茶なことをやっていますが完成したものとして下記のものになります。</p>\n<h2 id=\"html\">HTML</h2>\n<pre><code class=\"language-HTML\">&lt;div class=&quot;myIconImage&quot;&gt;\n  &lt;div class=&quot;myIconImage-background-topTriangle&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-background-midddleTriangle&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-background-rightTriangle&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-head&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-lefteye&quot;&gt;\n    &lt;div class=&quot;myIconImage-character-lefteye-line&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-righteye&quot;&gt;\n    &lt;div class=&quot;myIconImage-character-righteye-line&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-leftnose&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-rightnose&quot;&gt;&lt;/div&gt;\n  &lt;div class=&quot;myIconImage-character-body&quot;&gt;\n    &lt;div class=&quot;myIconImage-character-body-mouth&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2 id=\"css\">CSS</h2>\n<pre><code class=\"language-CSS\">:root{\n  --ratio: 3;\n  --route2: 1.41421356237;\n}\n.myIconImage {\n  width: calc(100px * var(--ratio));\n  height: calc(100px * var(--ratio));\n  background-color: yellow;\n  position: relative;\n  overflow: hidden;\n}\n.myIconImage-background-topTriangle {\n  border-right: calc(100px * var(--ratio)) solid transparent;\n  border-bottom: calc(25px * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--ratio)) solid red;\n  position: absolute;\n}\n.myIconImage-background-midddleTriangle {\n  margin-top: calc(-25px * var(--ratio));\n  margin-left: calc(-100px * var(--route2) * var(--ratio) + 100px * var(--ratio));\n  border-top: calc(25px * var(--ratio)) solid transparent;\n  border-bottom: calc(25px * var(--ratio)) solid transparent;\n  border-right: calc(100px * var(--route2) * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--route2) * var(--ratio)) solid red;\n  transform: rotate(-45deg);\n  position: absolute;\n}\n.myIconImage-background-rightTriangle {\n  margin-top: calc(-25px / 2 * var(--ratio));\n  margin-left: calc(-25px / 2 * var(--ratio));\n  border-top: calc(25px * var(--ratio)) solid transparent;\n  border-right: calc(100px * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--ratio)) solid red;\n  transform: rotate(-90deg);\n  position: absolute;\n}\n.myIconImage-background-rightTriangle {\n  margin-top: calc(-25px / 2 * var(--ratio));\n  margin-left: calc(-25px / 2 * var(--ratio));\n  border-top: calc(25px * var(--ratio)) solid transparent;\n  border-right: calc(100px * var(--ratio)) solid transparent;\n  border-left: calc(100px * var(--ratio)) solid red;\n  transform: rotate(-90deg);\n  position: absolute;\n}\n.myIconImage-character-head {\n    margin-top: calc(25px * var(--ratio));\n    margin-left: calc(-25px * var(--ratio));\n    height: calc(100px * var(--ratio));\n    width: calc(100px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: lime;\n    position: absolute;\n}\n.myIconImage-character-lefteye {\n    margin-top: calc(18px * var(--ratio));\n    margin-left: calc(15px * var(--ratio));\n    height: calc(15px * var(--ratio));\n    width: calc(23px * var(--ratio));\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(5deg);\n    overflow: hidden;\n}\n.myIconImage-character-lefteye-line {\n    margin-top: calc(6px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(25px * var(--ratio));\n    background: black;\n    position: absolute;\n    transform: rotate(-4deg);\n}\n.myIconImage-character-righteye {\n    margin-top: calc(50px * var(--ratio));\n    margin-left: calc(60px * var(--ratio));\n    height: calc(15px * var(--ratio));\n    width: calc(23px * var(--ratio));\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(65deg);\n    overflow: hidden;\n}\n.myIconImage-character-righteye-line {\n    margin-top: calc(7px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(25px * var(--ratio));\n    background: black;\n    position: absolute;\n    transform: rotate(4deg);\n}\n.myIconImage-character-leftnose {\n    margin-top: calc(50px * var(--ratio));\n    margin-left: calc(35px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(2px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n.myIconImage-character-rightnose {\n    margin-top: calc(60px * var(--ratio));\n    margin-left: calc(45px * var(--ratio));\n    height: calc(2px * var(--ratio));\n    width: calc(2px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n.myIconImage-character-body {\n    margin-top: calc(50px * var(--ratio));\n    margin-left: calc(-40px * var(--ratio));\n    height: calc(90px * var(--ratio));\n    width: calc(90px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: white;\n    position: absolute;\n    overflow: hidden;\n}\n.myIconImage-character-body-mouth {\n    height: calc(50px * var(--ratio));\n    width: calc(50px * var(--ratio));\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * var(--ratio)) solid black;\n    background: red;\n    position: absolute;\n    transform: rotate(180deg);\n    animation-name: mouth-animation;\n    animation-duration: 7s;\n    animation-timing-function: ease;\n    animation-iteration-count: infinite;\n}\n@keyframes mouth-animation {\n  0% {\n    margin-top: calc(-20px * var(--ratio));\n    margin-left: calc(50px * var(--ratio));\n  }\n  50% {\n    margin-top: calc(-100px * var(--ratio));\n    margin-left: calc(100px * var(--ratio));\n  }\n  100% {\n    margin-top: calc(-20px * var(--ratio));\n    margin-left: calc(50px * var(--ratio));\n  }\n}\n</code></pre>\n<h1 id=\"postcssを導入\">PostCSSを導入</h1>\n<p>Sassを使ったことがありませんが先にPostCSSを入門してみました。</p>\n<h2 id=\"postcssについて\">PostCSSについて</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://postcss.org/\">PostCSS</a></p>\n<p>Sassと同様にトランスパイルが必要なAltCSS\nプラグインが充実しており、必要に応じたトランスパイルの方法が行える。\nビルドの速度が速いらしい</p>\n<h2 id=\"使用したプラグインについて\">使用したプラグインについて</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a></p>\n<p>コンパイルする前のソースを元にprefixを自動作成してくれるもの</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-07 18-15-40 CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）/2-md.png\" alt=\"スクリーンショット 2016-04-07 18.00.41.png\"></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/jonathantneal/precss\">PreCSS</a></p>\n<p>PostCSSを使いながらSass記法が使えるもの\n今回はroute2やraito（比率）の変数の使用に用いた</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://cssnano.co/\">cssnano</a></p>\n<p>トランスパイル後のCSSをminify化してくれる</p>\n<h2 id=\"postcssを使用したコード\">PostCSSを使用したコード</h2>\n<p>上記のコードとさほど違いはありません...\n変更点として、変数がCSSのカスタムプロパティからSassの変数に変更しています。</p>\n<pre><code class=\"language-sass\">/* 100px * 100pxのアイコンを表示する為の比率 */\n$ratio: 3;\n/* ルート2の数値 */\n$route2: 1.41421356237;\n\n/* アイコンを表示する領域 */\n.myIconImage {\n  width: calc(100px * $ratio);\n  height: calc(100px * $ratio);\n  background-color: yellow;\n  position: relative;\n  overflow: hidden;\n}\n/* 上部に表示している赤い三角形 */\n.myIconImage-background-topTriangle {\n  border-right: calc(100px * $ratio) solid transparent;\n  border-bottom: calc(25px * $ratio) solid transparent;\n  border-left: calc(100px * $ratio) solid red;\n  position: absolute;\n}\n/* 真ん中に表示している赤い三角形 */\n.myIconImage-background-midddleTriangle {\n  margin-top: calc(-25px * $ratio);\n  margin-left: calc(-100px * $route2 * $ratio + 100px * $ratio);\n  border-top: calc(25px * $ratio) solid transparent;\n  border-bottom: calc(25px * $ratio) solid transparent;\n  border-right: calc(100px * $route2 * $ratio) solid transparent;\n  border-left: calc(100px * $route2 * $ratio) solid red;\n  transform: rotate(-45deg);\n  position: absolute;\n}\n/* 右端に表示している赤い三角形 */\n.myIconImage-background-rightTriangle {\n  margin-top: calc(-25px / 2 * $ratio);\n  margin-left: calc(-25px / 2 * $ratio);\n  border-top: calc(25px * $ratio) solid transparent;\n  border-right: calc(100px * $ratio) solid transparent;\n  border-left: calc(100px * $ratio) solid red;\n  transform: rotate(-90deg);\n  position: absolute;\n}\n/* カエルの頭部分 */\n.myIconImage-character-head {\n    margin-top: calc(25px * $ratio);\n    margin-left: calc(-25px * $ratio);\n    height: calc(100px * $ratio);\n    width: calc(100px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * $ratio) solid black;\n    background: lime;\n    position: absolute;\n}\n/* アイコンの左側に表示している目 */\n.myIconImage-character-lefteye {\n    margin-top: calc(18px * $ratio);\n    margin-left: calc(15px * $ratio);\n    height: calc(15px * $ratio);\n    width: calc(23px * $ratio);\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * $ratio) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(5deg);\n    overflow: hidden;\n}\n/* アイコンの左側に表示している目の線 */\n.myIconImage-character-lefteye-line {\n    margin-top: calc(6px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(25px * $ratio);\n    background: black;\n    position: absolute;\n    transform: rotate(-4deg);\n}\n/* アイコンの右側に表示している目 */\n.myIconImage-character-righteye {\n    margin-top: calc(50px * $ratio);\n    margin-left: calc(60px * $ratio);\n    height: calc(15px * $ratio);\n    width: calc(23px * $ratio);\n    border-radius: 50%;\n    -moz-border-radius: 50%;\n    -webkit-border-radius: 50%;\n    border: calc(2px * $ratio) solid black;\n    background: white;\n    position: absolute;\n    transform: rotate(65deg);\n    overflow: hidden;\n}\n/* アイコンの右側に表示している目の線 */\n.myIconImage-character-righteye-line {\n    margin-top: calc(7px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(25px * $ratio);\n    background: black;\n    position: absolute;\n    transform: rotate(4deg);\n}\n/* アイコンの左側に表示している鼻 */\n.myIconImage-character-leftnose {\n    margin-top: calc(50px * $ratio);\n    margin-left: calc(35px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(2px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n/* アイコンの右側に表示している鼻 */\n.myIconImage-character-rightnose {\n    margin-top: calc(60px * $ratio);\n    margin-left: calc(45px * $ratio);\n    height: calc(2px * $ratio);\n    width: calc(2px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    background: black;\n    position: absolute;\n}\n/* カエルの胴体 */\n.myIconImage-character-body {\n    margin-top: calc(50px * $ratio);\n    margin-left: calc(-40px * $ratio);\n    height: calc(90px * $ratio);\n    width: calc(90px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * $ratio) solid black;\n    background: white;\n    position: absolute;\n    overflow: hidden;\n}\n/* カエルの口 */\n.myIconImage-character-body-mouth {\n    height: calc(50px * $ratio);\n    width: calc(50px * $ratio);\n    border-radius: 100%;\n    -moz-border-radius: 100%;\n    -webkit-border-radius: 100%;\n    border: calc(2px * $ratio) solid black;\n    background: red;\n    position: absolute;\n    transform: rotate(180deg);\n    animation-name: mouth-animation;\n    animation-duration: 7s;\n    animation-timing-function: ease;\n    animation-iteration-count: infinite;\n}\n/* 口のアニメーション */\n@keyframes mouth-animation {\n  0% {\n    margin-top: calc(-20px * $ratio);\n    margin-left: calc(50px * $ratio);\n  }\n  50% {\n    margin-top: calc(-100px * $ratio);\n    margin-left: calc(100px * $ratio);\n  }\n  100% {\n    margin-top: calc(-20px * $ratio);\n    margin-left: calc(50px * $ratio);\n  }\n}\n</code></pre>\n<h1 id=\"参考ページ\">参考ページ</h1>\n<p>なぜCSSのborderで三角形ができるのか、実際にコードを書いて調べてみた\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://liginc.co.jp/web/html-css/html/164641\">http://liginc.co.jp/web/html-css/html/164641</a>\n次世代CSS登場！PostCSSの簡単な使い方\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://designup.jp/postcss-how-to-use-438/\">http://designup.jp/postcss-how-to-use-438/</a>\nPostCSSとcssnextで最新CSS仕様を先取り！\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://html5experts.jp/t32k/17235/\">https://html5experts.jp/t32k/17235/</a></p>\n\n</div>",
    "link": "/blogs/qiita/CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）.png",
      "small": "/ogp/630x630/blogs/qiita/CSSで動くイラストを描いてみた（おまけでPostCSS導入のお話）.png"
    }
  },
  {
    "name": "2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話",
    "publishedAt": "2016-04-03 22-40-41",
    "title": "非イラストレータが初めてPCでイラストを描いた話",
    "description": "  概要筆者は仕事でPCを用いてプログラムしたりExcel使ったりインターネットしてたりしますが、あまりペイントツールを用いて画像の編集であったり、もしくは新しいデザインを作るとい",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<p>筆者は仕事でPCを用いてプログラムしたりExcel使ったりインターネットしてたりしますが、あまりペイントツールを用いて画像の編集であったり、もしくは新しいデザインを作るということがないのでちょっと勉強がてらに絵を描いてみたという話になります。</p>\n<p>こんなアイコン画像を作ってみた</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/0-md.png\" alt=\"カエル.png\"></p>\n<h1 id=\"使ったソフト\">使ったソフト</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://medibangpaint.com/\">MediBangPaintPro</a>\nメディバンペイントと読みます。\nWindows、Macにも対応しているようです。</p>\n<p>このソフトで絵を描こうとした理由ですが\nこの手のツールの良さをまだ吟味したわけではないので特に理由はありません。\nただMac版のGimpやKritaはバグが多いような気が...</p>\n<p>どのくらい互換性があるか未知ですがメディバンはPhotoShopで作成されるPSDファイルを読み込むことが可能のようです。</p>\n<h1 id=\"機能\">機能</h1>\n<p>上記のアイコン画像を作成した時の機能になります。</p>\n<h2 id=\"レイヤー\">レイヤー</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/1-md.png\" alt=\"スクリーンショット 2016-04-03 22.10.26.png\"></p>\n<p>1枚の画像を作る為にサンドイッチの構造のように絵を重ねて作ることができます。\n上記の画像では背景画像と別の画像を分けて構成しています。\n使用しないレイヤーの時はレイヤー名の左横にある●を押して消すことで非表示できます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/2-md.png\" alt=\"スクリーンショット 2016-04-03 22.15.32.png\"></p>\n<h2 id=\"定規\">定規</h2>\n<p>円形や平行線であったり定規の線からはみ出ないように線を引くことができる機能です。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/3-md.png\" alt=\"スクリーンショット 2016-04-03 22.18.35.png\"></p>\n<p>アイコンの絵はペンタブを使わずに定規の機能で描いた絵です。</p>\n<h2 id=\"切り取り\">切り取り</h2>\n<p>もしレイヤー分けがされていない画像のとき一部だけ取り除きたい場合があるかと思います。\nいろいろな機能を合わせて行う技になりますが、輪郭がしっかりしていれば比較的に簡単に抜き取ることが可能です。\n手順として下記になります。</p>\n<p>1.自動選択ツールを使用します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/4-md.png\" alt=\"スクリーンショット 2016-04-03 22.29.43.png\"></p>\n<p>2.切り抜きたい範囲を選択していきます。</p>\n<p>切り抜きたい箇所が複数ある場合は「Shift」を押しながらクリックすることで選択できる箇所が増えます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/5-md.png\" alt=\"スクリーンショット 2016-04-03 22.31.33.png\"></p>\n<p>3.コピーする\n「Ctrl + C」もしくは「Command + C」</p>\n<p>4.レイヤー上で貼り付ける\n「Ctrl + V」もしくは「Command + V」\nこれで別のレイヤーに切り抜いたものを配置することができます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-04-03 22-40-41 非イラストレータが初めてPCでイラストを描いた話/6-md.png\" alt=\"スクリーンショット 2016-04-03 22.36.07.png\"></p>\n<h1 id=\"所感・感想\">所感・感想</h1>\n<p>簡単なサイトのデザイン画像とかも定規機能を使えばすぐに作れそう\nこういったツールの使い方とか割と一般の人でも需要ありそう！</p>\n\n</div>",
    "link": "/blogs/qiita/非イラストレータが初めてPCでイラストを描いた話",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/非イラストレータが初めてPCでイラストを描いた話.png",
      "small": "/ogp/630x630/blogs/qiita/非イラストレータが初めてPCでイラストを描いた話.png"
    }
  },
  {
    "name": "2016-03-26 16-53-27 Zenmap(nmap)を使ったサーバのポートスキャン",
    "publishedAt": "2016-03-26 16-53-27",
    "title": "Zenmap(nmap)を使ったサーバのポートスキャン",
    "description": "  この記事の内容リモートのサーバで使用されているポートの調査を行うためのメモになります。デフォルトで設定されているポートの設定について代表的なものだとHTTP 80、HTTPS ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の内容\">この記事の内容</h1>\n<p>リモートのサーバで使用されているポートの調査を行うためのメモになります。</p>\n<p>デフォルトで設定されているポートの設定について代表的なものだと\nHTTP 80、HTTPS 443、SSH 22\nだったりしますが、1つのサーバに複数のHTTPを立てたり、SSHがデフォルトのポートに設定されていないということがあるかと思います。</p>\n<h1 id=\"zenmap\">Zenmap</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nmap.org/zenmap/\">Zenmap</a></p>\n<p>nmapというコマンドの結果をGUIで表示してくるツールです。</p>\n<p>nmapについて概要\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://nmap.org/man/jp/\">https://nmap.org/man/jp/</a>より引用</p>\n<blockquote>\n<p>Nmap (“Network Mapper”)は、ネットワーク調査およびセキュリティ監査を行うためのオープンソースのツールである。大規模ネットワークを高速でスキャンするように設計されているが、単一のホストに対してもまったく問題なく機能する。Nmapは生の(raw)IPパケットを用いて、ネットワーク上でどのようなホストか利用可能になっているか、これらのホストが提供しているサービス(アプリケーション名とバージョン)は何か、ホストが実行しているOS(OS名とバージョン)は何か、どのような種類のパケットフィルタ/ファイアウォールが使用されているかなど、その他数多くの特徴を斬新な方法で判別する。Nmapは、セキュリティ監査用に広く利用されているばかりでなく、ネットワーク・インベントリ(資産情報収集)、サービスのアップグレード予定管理、ホストやサービスのアップタイム(利用可能時間)の監視等の日常業務にNmapを役立てているシステム管理者やネットワーク管理者も多い。</p>\n</blockquote>\n<h1 id=\"使い方は簡単\">使い方は簡単</h1>\n<p>Target　に対象のホストを入力して、Profileを「Intense scan, all TCP ports」にしてスキャンを開始を行えば対象のサーバの使用されているポートを調べることができます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-26 16-53-27 Zenmap(nmap)を使ったサーバのポートスキャン/0-md.jpeg\" alt=\"スクリーンショット 2016-03-26 15.45.49.jpg\"></p>\n\n</div>",
    "link": "/blogs/qiita/Zenmap(nmap)を使ったサーバのポートスキャン",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/Zenmap(nmap)を使ったサーバのポートスキャン.png",
      "small": "/ogp/630x630/blogs/qiita/Zenmap(nmap)を使ったサーバのポートスキャン.png"
    }
  },
  {
    "name": "2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する",
    "publishedAt": "2016-03-19 21-39-29",
    "title": "H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する",
    "description": "  はじめに個人サイトをやり始めてどういったページにアクセス集中するかなどアクセス状態を可視化できたらいいなと思ったので実践してみたという話です。どういったふうに可視化できたのかK",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"はじめに\">はじめに</h1>\n<p>個人サイトをやり始めてどういったページにアクセス集中するかなど\nアクセス状態を可視化できたらいいなと思ったので実践してみたという話です。</p>\n<h1 id=\"どういったふうに可視化できたのか\">どういったふうに可視化できたのか</h1>\n<p>Kibanaの設定をデフォルトのままという前提で話を進めていきます。</p>\n<h2 id=\"アクセスカウントが「見える」ようになった\">アクセスカウントが「見える」ようになった</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する/0-md.png\" alt=\"スクリーンショット 2016-03-19 20.21.26.png\"></p>\n<p>上記の図はKibanaのSample Dashboardから確認できたものです。\nfluentdの設定でリアルタイムにアクセスログからアクセスカウントが見れるようになりました。\nfluentdの設定によってはSSHしようとしているカウントも取れそうです。</p>\n<h2 id=\"アクセスした時間が可視化された\">アクセスした時間が可視化された</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する/1-md.png\" alt=\"スクリーンショット 2016-03-19 20.30.15.png\"></p>\n<p>こちらはLogstash Dashboardから確認できるものになります。\nViewのIntervalから表示されている日時の領域幅を狭めたり、広くしたりできます。</p>\n<h2 id=\"アクセスしたユーザ情報が可視化された\">アクセスしたユーザ情報が可視化された</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-03-19 21-39-29 H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する/2-md.png\" alt=\"スクリーンショット 2016-03-19 20.35.16.png\"></p>\n<p>こちらもLogstash Dashboardから確認できるものになります。\nホスト名であったりユーザエージェントなどがグラフ化します。</p>\n<h1 id=\"使用したソフトウェアと環境構築\">使用したソフトウェアと環境構築</h1>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/products/kibana\">Kibana</a></li>\n</ul>\n<p>JSONデータを解析してグラフを作成するソフトウェア\n使い道がいろいろありそうだ。</p>\n<p>インストール</p>\n<pre><code>$ curl -L -O https://download.elasticsearch.org/kibana/kibana/kibana-3.1.0.tar.gz\n$ tar zxvf kibana-3.1.0.tar.gz\n</code></pre>\n<p>KibanaでElasticsearchの情報を見たいため\n解凍したディレクトリ内にある設定ファイルの変更を行う</p>\n<pre><code class=\"language-config.js\">elasticsearch: &quot;http://localhost:9200&quot;,\n</code></pre>\n<p>KibanaはWebによるGUIなのでWebサーバの起動が必要。\n解凍したディレクトリをDocumentRoot指定してサーバ起動を行うこと。</p>\n<p>Webサーバ(H2O)の設定</p>\n<pre><code class=\"language-kibanahttp.conf\">hosts:\n &quot;example.com&quot;:\n    listen: 10090\n    paths:\n        /:\n         file.dir: /root/kibana-3.1.0\n\naccess-log: /root/kibanaaccess-log\nerror-log: /root/kibanaerror-log\npid-file: /root/kibanapid-file\n</code></pre>\n<p>iptablesのポート指定を忘れずに</p>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.elastic.co/products/elasticsearch\">Elasticsearch</a></li>\n</ul>\n<p>RESTful APIを提供してくれるソフトウェア\n今回ならばアクセスログをJSONにしてKibanaで見れるようにする繋ぎ役をしている。\nなお、ElasticsearchはJavaを必要とする。</p>\n<p>インストール\nyumのレポジトリを追加を行う</p>\n<pre><code class=\"language-/etc/yum.repos.d/elasticsearch.repo\">[elasticsearch-1.1]\nname=Elasticsearch repository for 1.1.x packages\nbaseurl=http://packages.elasticsearch.org/elasticsearch/1.1/centos\ngpgcheck=1\ngpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch\nenabled=1\n</code></pre>\n<pre><code>yum install elasticsearch\n</code></pre>\n<p>Elasticsearchの起動</p>\n<pre><code>service elasticsearch start\n</code></pre>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.fluentd.org/\">Fluentd</a></li>\n</ul>\n<p>あらゆるイベント・変更を見て情報を転送するソフトウェア\nログの情報をElasticsearchに反映するために使用している。\nfluentdは様々なプラグインが提供されており gem で取得できる。\ngemを使用するためRubyインストールすることが必須になる。</p>\n<p>インストール</p>\n<pre><code>$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh\n# fluentdのプラグインをインストール\n$ td-agent-gem install fluent-plugin-elasticsearch\n</code></pre>\n<p>インストール後、fluentdの設定ファイルを編集する\n設定ファイルのオプションについては後日記載</p>\n<pre><code class=\"language-/etc/td-agent/td-agent.conf\">&lt;source&gt;\n  type tail    \n  format apache    # H2Oのアクセスログがapacheと似ていたためapacheで設定\n  path /root/access.log    # H2Oで出力されているアクセスログファイル\n  pos_file /var/log/td-agent/access.pos\n  tag h2o.access\n&lt;/source&gt;\n\n&lt;match h2o.access&gt;\n  type elasticsearch\n  host localhost\n  port 9200    # デフォルトではElasticsearchが9200で起動している\n  type_name h2o_access\n  logstash_format true\n&lt;/match&gt;\n</code></pre>\n<p>Fluentd起動</p>\n<pre><code>service td-agent start\n</code></pre>\n<p>もしtd-agent startが失敗する場合は\n/var/log/td-agent/td-agent.log\nを参照すること</p>\n<h1 id=\"参考サイト\">参考サイト</h1>\n<ul>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://j-caw.co.jp/blog/?p=1380\">CentOS 6.5 (Vagrant)に fluentd + elasticsearch + kibana をセットアップする | もふもふ技術部</a></li>\n<li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/oikyn/items/f3e624b3cfd03b5cdb87\">fluentd × Elasticsearch × kibanaによるアクセスログ解析</a></li>\n</ul>\n\n</div>",
    "link": "/blogs/qiita/H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する.png",
      "small": "/ogp/630x630/blogs/qiita/H2OのアクセスログをKibana ＋ Elasticsearch ＋ Fluentdで可視化する.png"
    }
  },
  {
    "name": "2016-02-21 17-04-12 Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト",
    "publishedAt": "2016-02-21 17-04-12",
    "title": "Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト",
    "description": "  概要『こういったサイトを作ってみたかったんだよ!』OnsenUIでスマホアプリみたいなサイトを作ってみる よりhttp://qiita.com/igara/items/92d0",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<blockquote>\n<p>『こういったサイトを作ってみたかったんだよ!』\nOnsenUIでスマホアプリみたいなサイトを作ってみる より\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/92d0b58c4df21141429a\">http://qiita.com/igara/items/92d0b58c4df21141429a</a></p>\n</blockquote>\n<p>サイトでもアプリのように動きのあるものを扱っていたとき、\nこれどうやってテストコード化できるのだろうと疑問に思ったため\nやってみたという記事です。</p>\n<p>ソースは下記のレポジトリにあります。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/\">https://github.com/igara/syonet/</a></p>\n<h1 id=\"使ってみたもの\">使ってみたもの</h1>\n<ul>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.protractortest.org/#/\">Protractor</a>\nWebDriverとテストフレームワークを繋げてブラウザベースのテストができるE2Eテストフレームワーク</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mochajs.org/\">mocha</a>\nJavaScriptのユニットテストフレームワークの１つ</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/power-assert-js/power-assert\">power-assert</a>\nt_wadaさん作成のassertライブラリ</p>\n<blockquote>\n<p>テスト書いてないとかお前それ@t_wadaの前でも同じこと言えんの？</p>\n</blockquote>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.typescriptlang.org/\">TypeScript</a>\nAltJS\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/typings/typings\">Typings</a>より<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://definitelytyped.org/\">DefinitelyTyped</a>で管理されている様々な型情報ファイルを使うことでIDEによってはライブラリで扱っているものの入力補完できたりと便利。</p>\n</li>\n<li><p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://onsen.io/2/\">OnsenUI</a></p>\n</li>\n</ul>\n<p>2.0 Beta版を使用しています。</p>\n<h1 id=\"インストール\">インストール</h1>\n<ul>\n<li>npmパッケージインストール</li>\n</ul>\n<pre><code class=\"language-package.json\">{\n  &quot;version&quot;: &quot;0.0.1&quot;,\n  &quot;private&quot;: true,\n  &quot;devDependencies&quot;: {\n    &quot;angular&quot;: &quot;^1.5.0&quot;,\n    &quot;mocha&quot;: &quot;^2.4.5&quot;,\n    &quot;onsenui&quot;: &quot;^2.0.0-beta&quot;,\n    &quot;power-assert&quot;: &quot;^1.2.0&quot;,\n    &quot;protractor&quot;: &quot;^3.1.1&quot;,\n    &quot;typescript&quot;: &quot;^1.8.0&quot;,\n    &quot;typings&quot;: &quot;^0.6.7&quot;\n  }\n}\n</code></pre>\n<pre><code>npm install\n</code></pre>\n<ul>\n<li>d.tsインストール</li>\n</ul>\n<p>AngularとjQueryで\nvar $: JQueryStatic;の宣言が被ってしまうので\n独自でjQueryのd.tsファイルを加工しています。</p>\n<pre><code class=\"language-typings.json\">{\n  &quot;ambientDependencies&quot;: {\n    &quot;angular&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/angularjs/angular.d.ts#17ef40452039d19e06dc2a3815ea898c505860fa&quot;,\n    &quot;angular-protractor&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/angular-protractor/angular-protractor.d.ts#17fa1e5f269189f7f8e0f53f8c443e6c2eac562c&quot;,\n    &quot;empower&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/empower/empower.d.ts#aeb7701fbef3b7fc7261d67c025c823666ab98ea&quot;,\n    &quot;jquery&quot;: &quot;github:igara/DefinitelyTyped/jquery/jquery.d.ts#144ca38f83058b29f2b7b38c28e931a0139aa022&quot;,\n    &quot;mocha&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/mocha/mocha.d.ts#d6dd320291705694ba8e1a79497a908e9f5e6617&quot;,\n    &quot;node&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/node/node.d.ts#263705d313346e093d95cb62cef6fed848e46978&quot;,\n    &quot;onsenui&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/onsenui/onsenui.d.ts#76352a94c6e4a51e7f382aebaf0b63d9ac06ae12&quot;,\n    &quot;power-assert&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/power-assert/power-assert.d.ts#695da95a2405a9d6aae11944174227e1e7716e37&quot;,\n    &quot;power-assert-formatter&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/power-assert-formatter/power-assert-formatter.d.ts#aeb7701fbef3b7fc7261d67c025c823666ab98ea&quot;,\n    &quot;selenium-webdriver&quot;: &quot;github:DefinitelyTyped/DefinitelyTyped/selenium-webdriver/selenium-webdriver.d.ts#a83677ed13add14c2ab06c7325d182d0ba2784ea&quot;\n  }\n}\n</code></pre>\n<pre><code>typings install\n</code></pre>\n<h1 id=\"設定\">設定</h1>\n<ul>\n<li>Protractorの設定</li>\n</ul>\n<p>詳しいexports.configの情報として\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/angular/protractor/blob/master/docs/referenceConf.js\">referenceConf.js</a>に記載されています。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/e2echrome.js\">e2echrome.js</a></p>\n<pre><code class=\"language-e2echrome.js\">exports.config = {\n  seleniumAddress: &#39;http://127.0.0.1:4444/wd/hub&#39;,\n  framework: &#39;mocha&#39;, // mochaを使用する\n  mochaOpts: {        // mochaの設定\n    ui: &#39;bdd&#39;,        // テスト記述方法をビヘイビアで行う。tddも可能\n    reporter: &#39;dot&#39;,  // テスト結果出力方法。詳しくはhttps://mochajs.org/#reporters\n    slow: 3000,\n    enableTimeouts: false     // テスト中にタイムアウトさせるかの設定\n  },\n  specs: [&#39;tests/**/*.js&#39;],    // テスト対象ファイル\n  capabilities: {\n    &#39;browserName&#39;: &#39;chrome&#39;    // 使用ブラウザ\n  },\n  baseUrl: &#39;http://127.0.0.1:8000/&#39;\n};\n</code></pre>\n<h1 id=\"テストコード\">テストコード</h1>\n<h2 id=\"slidingmenuviewの表示・非表示のテスト例\">SlidingMenuViewの表示・非表示のテスト例</h2>\n<p>OnsenUIには画面上を横スワイプしたときに表示できる<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ja.onsen.io/reference/ons-sliding-menu.html\">SlidingMenu</a>というのがあります。\nテストコード上でどうやってスワイプの処理をさせ、表示の確認したかの一例紹介になります。</p>\n<p>ソースは<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/tests/e2e/syonetwork/SideMenuTest.ts\">SideMenuTest.ts</a></p>\n<ul>\n<li>スワイプ処理どうする?</li>\n</ul>\n<p>下記は、スワイプ処理のやり方としてマウスのイベントを用いて再現しようとしています。\n「マウス動かす→マウスクリックを押す→マウスを動かす→マウスクリックを離す」\nといった動きになります。</p>\n<pre><code>browser.actions()\n       .mouseMove(body, {x:browserSize.width / 2, y:browserSize.height / 2})\n       .mouseDown()\n       .mouseMove(body, {x:browserSize.width, y:browserSize.height / 2})\n       .mouseUp()\n       .perform();\n</code></pre>\n<ul>\n<li>SlidingMenuの表示確認どうする?</li>\n</ul>\n<p>SlidingMenuには<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ja.onsen.io/reference/ons-sliding-menu.html#method-isMenuOpened\">isMenuOpened()</a>というJavaScriptの関数を用いることでSlidingMenuの表示確認を行うことができます。</p>\n<p>ブラウザ内のJavaScriptの実行を行った結果を取得するために\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://angular.github.io/protractor/#/api?view=webdriver.WebDriver.prototype.executeAsyncScript\">executeAsyncScript</a>を用いてassertさせるやり方で確認をしています。</p>\n<pre><code>// ブラウザ内のJavaScriptを実行させる\nbrowser.executeAsyncScript(function() {\n    var callback = arguments[arguments.length - 1];\n    callback(menu.isMenuOpened());\n}).then(function(isMenu) {\n    assert.default(\n        isMenu === true,\n        &#39;error:サイドメニューが開かれていない&#39;);\n    // スリープさせる\n    browser.sleep(sleepTime);\n    // スクリーンショットを取る\n    browser.takeScreenshot().then(function(data) {\n        fs.writeFile(\n            &#39;screenshot/syonetwork/OpenedSideMenu.png&#39;,\n            data.replace(/^data:image\\/png;base64,/,&#39;&#39;), \n            &#39;base64&#39;,\n            function(error) {\n                if(error) throw error;\n            }\n        );\n    });\n});\n</code></pre>\n<p>isMenuOpened()で表示確認した後、スクリーンショットを取る処理も入れて見ました。</p>\n<p>menu.isMenuOpened()とありますがこいつは\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/resources/views/root/root_top.blade.php#L16\">root_top.blade.php</a>よりvarの属性が指定されているものになります。\n　<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://ja.onsen.io/reference/ons-sliding-menu.html#attributes\">OnsenUIの属性について</a>\nTypeScriptを使っている場合、menuって型なんだっけ?となるので独自の型宣言のファイルを作ってあげてimportさせる必要が有ります。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/blob/master/tests/e2e/SyonetWork.d.ts\">SyonetWork.d.ts</a></p>\n<h1 id=\"実行\">実行</h1>\n<p>ProtractorはWebDriverによるテストを行います。\nJavaのインストールと下記を実行</p>\n<p>WebDriver起動までにすること</p>\n<pre><code>\nnode_modules/protractor/bin/webdriver-manager update\nnode_modules/protractor/bin/webdriver-manager start \n</code></pre>\n<p>テストの実行</p>\n<pre><code>\nnode_modules/.bin/protractor e2echrome.js\n</code></pre>\n<h1 id=\"参考資料\">参考資料</h1>\n<p>Protractorの小ネタ\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/zoetro/items/6a82e066a8bb147c407a\">http://qiita.com/zoetro/items/6a82e066a8bb147c407a</a>\nAngularJS用テストフレームワーク「Protractor」チュートリアル日本語訳\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/weed/items/30098f7be2f753580f63\">http://qiita.com/weed/items/30098f7be2f753580f63</a>\nProtractor で起動したブラウザで任意の JavaScirpt コードを実行する\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/naoiwata/items/b389c27d7b19b6fa634d\">http://qiita.com/naoiwata/items/b389c27d7b19b6fa634d</a></p>\n\n</div>",
    "link": "/blogs/qiita/Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト.png",
      "small": "/ogp/630x630/blogs/qiita/Protractor ＋ mocha ＋ power-assert ＋ TypeScriptを用いてOnsenUIで作成したサイトのE2Eテスト.png"
    }
  },
  {
    "name": "2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話",
    "publishedAt": "2016-02-11 19-28-09",
    "title": "OWASP ZAPを使用してサイトの脆弱性と闘う話",
    "description": "  概要無料でサイトの脆弱性チェックできるツールのOWASP ZAPを使ってみて脆弱性対応をしてみたというお話である。OWASP ZAPのダウンロードは下記https://gith",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"概要\">概要</h1>\n<p>無料でサイトの脆弱性チェックできるツールのOWASP ZAPを使ってみて\n脆弱性対応をしてみたというお話である。</p>\n<p>OWASP ZAPのダウンロードは下記\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/zaproxy/zaproxy/wiki/Downloads\">https://github.com/zaproxy/zaproxy/wiki/Downloads</a></p>\n<h1 id=\"使い方\">使い方</h1>\n<p>ところどころが日本語化されているので比較的に使いやすいかもしれない\nクイックスタートより攻撃対象URLを入力して攻撃！\n対象のサイトがどこかの外部サイトのものやCDNなどを使用されている場合は攻撃する前にURLの指定を外したほうが良い。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/0-md.png\" alt=\"スクリーンショット 2016-02-11 17.06.26.png\"></p>\n<h1 id=\"発生した脆弱性\">発生した脆弱性</h1>\n<h2 id=\"x-frame-optionsヘッダーの欠如\">X-Frame-Optionsヘッダーの欠如</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/1-md.png\" alt=\"スクリーンショット 2016-02-11 17.15.29.png\"></p>\n<p>「クリックジャッキング」攻撃を防止するために下記を追記することで対策できる。\n他のサイトからiframeによるアクセスができないようにするために行う内容である。</p>\n<p>.htaccessなら</p>\n<pre><code>Header set X-FRAME-OPTIONS &quot;DENY&quot;\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.set: &quot;X-Frame-Options: DENY&quot;\n</code></pre>\n<p>PHP側で対応する場合なら</p>\n<pre><code>header(&quot;X-Frame-Options: DENY&quot;);\n</code></pre>\n<h2 id=\"cookie-set-without-httponly-flag\">Cookie set without HttpOnly flag</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/2-md.png\" alt=\"スクリーンショット 2016-02-11 18.15.22.png\"></p>\n<p>CookieのセッションIDをJS経由で取得できてしまう脆弱性があるため\nCookieのセットの設定はHttpOnlyにしよう。</p>\n<p>.htaccessなら</p>\n<pre><code>session.cookie_httponly = On\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.append: &quot;Set-Cookie: HttpOnly&quot;\n</code></pre>\n<p>PHP側で対応する場合なら</p>\n<pre><code>ini_set(&#39;session.cookie_httponly&#39;, 1);\n</code></pre>\n<h2 id=\"cookie-set-without-secure-flag\">Cookie set without secure flag</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/3-md.png\" alt=\"スクリーンショット 2016-02-11 18.15.35.png\"></p>\n<p>secure属性を指定することでHTTPSの通信時のみクッキーを送信するようになるとのこと</p>\n<p>.htaccessなら</p>\n<pre><code>session.cookie_secure = On\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.append: &quot;Set-Cookie: secure&quot;\n</code></pre>\n<p>PHP側で対応する場合なら</p>\n<pre><code>ini_set(&#39;session.cookie_secure&#39;, 1);\n</code></pre>\n<h2 id=\"incomplete-or-no-cache-control-and-pragma-http-header-set\">Incomplete or No Cache-control and Pragma HTTP Header Set</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/4-md.png\" alt=\"スクリーンショット 2016-02-11 18.45.35.png\"></p>\n<p>SSL化されているのにキャッシュが許可されている場合に発生する問題</p>\n<p>.htaccessなら</p>\n<pre><code>Header set Pragma no-cache\nHeader set Cache-Control no-cache, no-store, must-revalidate\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.append: &quot;Cache-Control: no-cache, no-store, must-revalidate&quot;\nheader.set: &quot;Pragma: no-cache&quot;\n</code></pre>\n<p>PHPなら</p>\n<pre><code>header(&quot;Cache-Control: no-cache, no-store, must-revalidate&quot;);\nheader(&quot;Pragma: no-cache&quot;);\n</code></pre>\n<h2 id=\"web-browser-xss-protection-not-enabled\">Web Browser XSS Protection Not Enabled</h2>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-02-11 19-28-09 OWASP ZAPを使用してサイトの脆弱性と闘う話/5-md.png\" alt=\"スクリーンショット 2016-02-11 19.21.44.png\"></p>\n<p>クロスサイトスクリプティング防止機能が無効になっていると出てくる問題らしい</p>\n<p>.htaccessなら</p>\n<pre><code>Header always set X-XSS-Protection &quot;1; mode=block&quot;\n</code></pre>\n<p>H2Oなら</p>\n<pre><code>header.set: &quot;X-XSS-Protection: 1; mode=block&quot;\n</code></pre>\n<p>PHPなら</p>\n<pre><code>header(&quot;X-XSS-Protection: 1; mode=block&quot;);\n</code></pre>\n<h1 id=\"最後に\">最後に</h1>\n<p>あまり脆弱性による問題点とかあげられていないのでその辺の追加編集をしていかないと、、、\nheaderに情報を追加したものが多かったがサーバの設定で追加するべきなのかプログラム側で追加するべきなのかも調べておかないと。</p>\n\n</div>",
    "link": "/blogs/qiita/OWASP ZAPを使用してサイトの脆弱性と闘う話",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/OWASP ZAPを使用してサイトの脆弱性と闘う話.png",
      "small": "/ogp/630x630/blogs/qiita/OWASP ZAPを使用してサイトの脆弱性と闘う話.png"
    }
  },
  {
    "name": "2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話",
    "publishedAt": "2016-01-31 18-48-40",
    "title": "PHPプロジェクトでいろいろなCIサービスを使ってみたというお話",
    "description": "  この記事の概要GitHubでコミット＆プッシュしたときに自動でテストを行ったり、PullRequest時では「このコード、コーディング規約違反してるよ！」とコメントしてくれるよ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"この記事の概要\">この記事の概要</h1>\n<p>GitHubでコミット＆プッシュしたときに自動でテストを行ったり、\nPullRequest時では「このコード、コーディング規約違反してるよ！」とコメントしてくれるようなサービスの紹介になる。</p>\n<p>PHPプロジェクトについて下記のレポジトリが対象\nURL:<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet\">https://github.com/igara/syonet</a></p>\n<h1 id=\"sideci\">SideCI</h1>\n<p>URL:<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.sideci.com/\">https://www.sideci.com/</a>\nPullRequestを出した時にコミットしたファイルの静的解析を行い、\nコーディング規約違反している対象の行に対してコメントを追加してくれる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/0-md.png\" alt=\"スクリーンショット 2016-01-31 18.11.05.png\">\n上記はnamespaceの指定がなく、規約に反していますというコメントの例である。</p>\n<p>PSRの規約に準じてコメントがされているので\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/FriendsOfPHP/PHP-CS-Fixer\">php-cs-fixer</a>をフォーマッタとして用いれば大抵は修正される。\n（namespaceの違反は修正されないが、）</p>\n<p>コード修正をし、規約どおりになると下記のようにコメントが隠れるようになる。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/1-md.png\" alt=\"スクリーンショット 2016-01-31 18.13.27.png\"></p>\n<p>この時のPullRequestの例として下記になる。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/igara/syonet/pull/48\">https://github.com/igara/syonet/pull/48</a></p>\n<p>PHP以外にTypeScriptとかも静的解析を行っていただける。</p>\n<h1 id=\"travisci\">TravisCI</h1>\n<p>URL:<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://travis-ci.org/\">https://travis-ci.org/</a></p>\n<p>レポジトリにプッシュされた後に\nいろいろな言語のバージョンによるビルドを自動的に行ってくれるサービス\n主にPHPUnitの実行とカバレッジの取得用に使っている。</p>\n<p>カバレッジ取得するために\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/satooshi/php-coveralls\">php-coveralls</a>を使用している。</p>\n<p>composerで導入する時は下記を実行する。</p>\n<pre><code>composer require satooshi/php-coveralls --dev\n</code></pre>\n<p>.travis.ymlに行いたいタスクを記載し、レポジトリのルートに置くことで自動でビルドが行われる。</p>\n<pre><code class=\"language-.travis.yml\">\n\nlanguage: php\n\nphp:\n    # 下記はビルド対象のPHPバージョン\n    - 5.6\n    - 7.0\n    - hhvm\n    - nightly\n\nbefore_script:\n    # laravelの環境設定ファイルの作成\n    - cp -p .env.example .env\n    # composerは30日毎にupdateすること責められる...\n    - composer self-update\n    - composer install\n    - php artisan key:generate\n\nscript:\n    # PHPUnitを実行し、ガバレッジを取得する\n    - mkdir -p build/logs\n    - chmod -R 777 build/logs\n    - vendor/bin/phpunit --coverage-clover build/logs/clover.xml\n\nafter_success:\n    # coverallsにカバレッジの反映をさせる\n    - travis_retry php vendor/bin/coveralls -v\n</code></pre>\n<p>TravisCIはcomposerやxdebugが使える模様。</p>\n<p>下記は各PHPのバージョンによるビルドの結果になる。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/2-md.png\" alt=\"スクリーンショット 2016-01-31 18.23.31.png\"></p>\n<p>README.mdにビルドの状態がわかるようにバッチを置くことができる。\n↓こいつ\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://travis-ci.org/igara/syonet\"><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/3-md.svg\" alt=\"Build Status\"></a></p>\n<h1 id=\"coveralls\">Coveralls</h1>\n<p>カバレッジの結果をパーセント表示にしたり、カバレッジを元にPHPUnitのassertの状態を確認できたりできる。</p>\n<p>.coveralls.ymlを設置する必要があるので下記を記載した。</p>\n<pre><code class=\"language-.coveralls.yml\">\ncoverage_clover: build/logs/clover.xml\njson_path: build/logs/coveralls-upload.json\nservice_name: travis-ci\nexclude_no_stmt: true\n</code></pre>\n<p>TravisCIと同様にバッチの設置ができる。\n↓こいつ\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://coveralls.io/github/igara/syonet?branch=master\"><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-31 18-48-40 PHPプロジェクトでいろいろなCIサービスを使ってみたというお話/4-md.svg\" alt=\"Coverage Status\"></a></p>\n<h1 id=\"参考記事\">参考記事</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/noboru_i/items/23827b655ac854ba04b2\">規約に沿ってないPHPコードを駆逐する</a></p>\n\n</div>",
    "link": "/blogs/qiita/PHPプロジェクトでいろいろなCIサービスを使ってみたというお話",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/PHPプロジェクトでいろいろなCIサービスを使ってみたというお話.png",
      "small": "/ogp/630x630/blogs/qiita/PHPプロジェクトでいろいろなCIサービスを使ってみたというお話.png"
    }
  },
  {
    "name": "2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる",
    "publishedAt": "2016-01-23 23-50-05",
    "title": "vorlon.jsを使って端末のリモートデバッグしてみる",
    "description": "  vorlon.jsとは公式ページhttp://vorlonjs.com/Microsoft Build 2015より発表されたWebアプリケーション用のリモートデバッガツールW",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"vorlonjsとは\">vorlon.jsとは</h1>\n<ul>\n<li>公式ページ<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://vorlonjs.com/\">http://vorlonjs.com/</a></li>\n</ul>\n<p>Microsoft Build 2015より発表された\nWebアプリケーション用のリモートデバッガツール</p>\n<p>Web上で使えるchrome developer toolsみたいなもの。</p>\n<h2 id=\"インストール\">インストール</h2>\n<p>前提にNodeJSがインストール済みであること。</p>\n<pre><code>\nnpm install --save-dev vorlon\n</code></pre>\n<p>すると\nnode_modulesというディレクトリに「.bin」と「vorlon」というのができる。</p>\n<h2 id=\"設定\">設定</h2>\n<p>この設定はプロキシ経由でデバッグを行いたいときや\nlocalhostではないホストでデバッグの結果を見たいときに\nやっておくと便利な設定。</p>\n<pre><code class=\"language-node_modules/vorlon/Server/config.json\">\n{\n    &quot;baseURL&quot;: &quot;&quot;,\n    &quot;useSSLAzure&quot;:false,\n    &quot;useSSL&quot;: false,\n    &quot;SSLkey&quot;: &quot;../cert/server.key&quot;,\n    &quot;SSLcert&quot;: &quot;../cert/server.crt&quot;,\n    &quot;includeSocketIO&quot;: true,\n    &quot;activateAuth&quot;: false,\n    &quot;username&quot;: &quot;&quot;,\n    &quot;password&quot;: &quot;&quot;,\n    &quot;plugins&quot;: [\n        { &quot;id&quot;: &quot;CONSOLE&quot;, &quot;name&quot;: &quot;Interactive Console&quot;, &quot;panel&quot;: &quot;bottom&quot;, &quot;foldername&quot;: &quot;interactiveConsole&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;DOM&quot;, &quot;name&quot;: &quot;Dom Explorer&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;domExplorer&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;MODERNIZR&quot;, &quot;name&quot;: &quot;Modernizr&quot;, &quot;panel&quot;: &quot;bottom&quot;, &quot;foldername&quot;: &quot;modernizrReport&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;OBJEXPLORER&quot;, &quot;name&quot;: &quot;Obj. Explorer&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;objectExplorer&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;XHRPANEL&quot;, &quot;name&quot;: &quot;XHR&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;xhrPanel&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;NGINSPECTOR&quot;, &quot;name&quot;: &quot;Ng. Inspector&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;ngInspector&quot;, &quot;enabled&quot;: false },\n        { &quot;id&quot;: &quot;NETWORK&quot;, &quot;name&quot;: &quot;Network Monitor&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;networkMonitor&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;RESOURCES&quot;, &quot;name&quot;: &quot;Resources Explorer&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;resourcesExplorer&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;DEVICE&quot;, &quot;name&quot;: &quot;My Device&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;device&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;UNITTEST&quot;, &quot;name&quot;: &quot;Unit Test&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;unitTestRunner&quot;, &quot;enabled&quot;: true },\n        { &quot;id&quot;: &quot;BABYLONINSPECTOR&quot;, &quot;name&quot;: &quot;Babylon Inspector&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;babylonInspector&quot;, &quot;enabled&quot;: false },\n        { &quot;id&quot;: &quot;WEBSTANDARDS&quot;, &quot;name&quot;: &quot;Best practices&quot;, &quot;panel&quot;: &quot;top&quot;, &quot;foldername&quot;: &quot;webstandards&quot;, &quot;enabled&quot;: true }\n    ],\n    &quot;port&quot;: 1337,\n    &quot;enableWebproxy&quot; : true,\n    &quot;baseProxyURL&quot;: &quot;&quot;,\n    &quot;proxyPort&quot; : 5050,\n    &quot;proxyEnvPort&quot;: false,\n    &quot;vorlonServerURL&quot;: &quot;http://[ホスト名]:1337&quot;,\n    &quot;vorlonProxyURL&quot;: &quot;http://[ホスト名]:5050&quot;\n}\n</code></pre>\n<h2 id=\"起動\">起動</h2>\n<pre><code>\nnode ./node_modules/.bin/vorlon &amp;\n</code></pre>\n<p>これでデバック用のvorlonサーバが起動する。</p>\n<h2 id=\"使い方\">使い方</h2>\n<p><strong>デバッグ方法は2つある！</strong></p>\n<p>1 . proxyを経由させて行う。</p>\n<p>サーバを起動して下記ページに遷移する。\nhttp://[ホスト名]:1337/httpproxy</p>\n<p>するとこんな感じの画面が出てくる</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/0-md.png\" alt=\"スクリーンショット 2016-01-23 23.02.05.png\"></p>\n<p>入力フォームにデバッグしたいページのURLを入れて\n「Inspect with VORLON.JS」を押すと\nproxy経由で見たデバッグしたい画面と\nchromeで見たことがあるような画面が出てくる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/1-md.png\" alt=\"スクリーンショット 2016-01-23 23.07.03.png\"></p>\n<p>これでデバッグできる状態になる。</p>\n<p>2 . デバッグしたいページにデバックのスクリプトを追記する。</p>\n<pre><code>\n&lt;script src=&quot;http://[ホスト名]:1337/vorlon.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>たまにこの方法の方が効率が良いときがある。\n1に記載した方法は端末によって実行できない場合がある。\n「Inspect with VORLON.JS」を押してもproxy経由の画面が表示されないことがあった。</p>\n<p>上記のスクリプトを埋め込んだ後、\nデバッグしたいページをブラウザに表示させればデバック状態にできる。</p>\n<h2 id=\"どういったことができるのか一例を記載\">どういったことができるのか一例を記載</h2>\n<p>詳しくは公式のプラグインの記載を見ること。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://vorlonjs.com/plugins/\">http://vorlonjs.com/plugins/</a></p>\n<p>参考として事例の記載をしている。\n画像はAndroidエミュレータからデバックを行っている例である。</p>\n<ul>\n<li>レイヤーの確認</li>\n</ul>\n<p>HTMLの書き換えもできる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/2-md.gif\" alt=\"レイヤーの確認\"></p>\n<ul>\n<li>js console</li>\n</ul>\n<p>alert以外にconsole.logも行うことができる。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2016-01-23 23-50-05 vorlon.jsを使って端末のリモートデバッグしてみる/3-md.gif\" alt=\"js console\"></p>\n<h2 id=\"最後に\">最後に</h2>\n<p>どんなブラウザの環境でもある程度のデバッグができるのはすごく良い。</p>\n<p>safariとchromeの\nWeb Inspectorの記事も書かなければ</p>\n\n</div>",
    "link": "/blogs/qiita/vorlon.jsを使って端末のリモートデバッグしてみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/vorlon.jsを使って端末のリモートデバッグしてみる.png",
      "small": "/ogp/630x630/blogs/qiita/vorlon.jsを使って端末のリモートデバッグしてみる.png"
    }
  },
  {
    "name": "2015-12-30 17-34-38 [メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）",
    "publishedAt": "2015-12-30 17-34-38",
    "title": "[メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）",
    "description": "  レンタルサーバをお借りしているとたまに意図せずにサーバが落ちてしまうことがあるので再起動した時に自動で独自のサービスを起動させるためのメモchkconfigchkconfigの",
    "body": "<div class=\"markdown-body\">\n  <p>レンタルサーバをお借りしていると\nたまに意図せずにサーバが落ちてしまうことがあるので\n再起動した時に自動で独自のサービスを起動させるためのメモ</p>\n<h1 id=\"chkconfig\">chkconfig</h1>\n<p>chkconfigの設定が必要そう!</p>\n<p>詳しい話は下記リンク参照\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://blog.jicoman.info/2014/04/centos_init_script/\">http://blog.jicoman.info/2014/04/centos_init_script/</a></p>\n<h1 id=\"自動起動するスクリプトを書く\">自動起動するスクリプトを書く</h1>\n<p>テスト的に記載</p>\n<p><strong>本来ならばコマンド失敗時にログを残すなどしないと!</strong></p>\n<pre><code>vi /etc/rc.d/init.d/syonet\n</code></pre>\n<pre><code class=\"language-/etc/rc.d/init.d/syonet\">\n#!/bin/bash\n# chkconfig: 345 99 1\n# description: syonet\n# processname: syonet\n\nstart(){\n    if [ -e /root/.phpenv/versions/7.0.0/sbin/php-fpm ]; then\n        nohup /root/.phpenv/versions/7.0.0/sbin/php-fpm &amp;\n    else\n        echo &quot;/root/.phpenv/versions/7.0.0/sbin/php-fpmがないよ!&quot;\n    fi\n\n    if [ -e /root/http.conf ]; then\n        nohup h2o -c /root/http.conf &amp;\n    else\n        echo &quot;h2oのコンフィグファイル/root/http.confがないよ!&quot;\n    fi\n\n    if [ -e /root/c9sdk/server.js ] &amp;&amp; [ -d /root/slack_rack_php ]; then\n        nohup node /root/c9sdk/server.js -p 8080 -a XXX:XXX -w /root/slack_rack_php/ &amp;\n    else\n        echo &quot;cloud9をcloneした？syonetのcloneは?&quot;\n    fi\n\n    return 0;\n}\nstop(){\n    echo &quot;not stop&quot;\n    return 0\n}\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]サーバ起動時に自動で独自のプロセス起動させるには（chkconfig）.png"
    }
  },
  {
    "name": "2015-12-15 01-07-45 [メモ]TypeScriptの設定・用語など",
    "publishedAt": "2015-12-15 01-07-45",
    "title": "[メモ]TypeScriptの設定・用語など",
    "description": "  TypeScriptMicroSoftによって開発されたAltJS。動的型付けの通常のJavaScriptに対し、静的型付けができるES6という立場である。TSDを用いれば既存",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"typescript\">TypeScript</h1>\n<p>MicroSoftによって開発されたAltJS。\n動的型付けの通常のJavaScriptに対し、静的型付けができるES6という立場である。\nTSDを用いれば既存のJavaScriptライブラリに型情報を加えることのでき、jQueryといったライブラリに対しても型情報を提供してくれる。</p>\n<h1 id=\"環境構築\">環境構築</h1>\n<p>前提としてNodeJSがインストールされていること。\n例のごとくlaravelのプロジェクト構成を前提に説明を行う。</p>\n<h2 id=\"npm-install\">npm install</h2>\n<pre><code>\n$ npm install typescript --save-dev\n$ npm install tsd --save-dev\n$ npm install gulp --save-dev\n$ npm install gulp-shell --save-dev\n$ npm install gulp-tsconfig-update --save-dev\n</code></pre>\n<h2 id=\"エディタ\">エディタ</h2>\n<h3 id=\"visual-studio-code\">Visual Studio Code</h3>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-15 01-07-45 [メモ]TypeScriptの設定・用語など/0-md.gif\" alt=\"vsc\"></p>\n<p>個人的にはCodeの方でTypeScript書くことが多いかもしれない\ngif画像の例ではimportされていたファイル名を変更して\nわざとimportのエラーが発生していることを表示している。</p>\n<h3 id=\"atom\">Atom</h3>\n<p>あらゆるスニペッドが揃ってて何かと使用するAtom。ただAtomのプラグインとしてTypeScriptの開発をしている以上、ここはVSCに慣れるようにしよう。</p>\n<p>AtomのAPI仕様変更について過去このようなことがあった\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://flabo.io/code/20150430/01-start-typescript-independently-of-windows/\">http://flabo.io/code/20150430/01-start-typescript-independently-of-windows/</a></p>\n<h3 id=\"公式のplayground\">公式のPlayground</h3>\n<p>遊ぶ分には下記のサイトでも十分</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.typescriptlang.org/Playground\">http://www.typescriptlang.org/Playground</a></p>\n<h1 id=\"設定\">設定</h1>\n<h2 id=\"tscコマンド\">tscコマンド</h2>\n<p>tsconfig.jsonに指定できるものが多くあるためちょくちょく記載する。\nデフォルト値とかおいおい書くこと</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">プロパティ</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">--declaration</td>\n<td align=\"left\">.tsファイルから.d.tsファイルを作成する。</td>\n</tr>\n<tr>\n<td align=\"left\">--help</td>\n<td align=\"left\">コンパイラのヘルプを表示</td>\n</tr>\n<tr>\n<td align=\"left\">--version</td>\n<td align=\"left\">tscのバージョンを表示</td>\n</tr>\n<tr>\n<td align=\"left\">--module</td>\n<td align=\"left\">CommonJSやAMDのモジュールの指定をしてビルドを行える</td>\n</tr>\n<tr>\n<td align=\"left\">--project</td>\n<td align=\"left\">対象のディレクトリを指定</td>\n</tr>\n<tr>\n<td align=\"left\">--target</td>\n<td align=\"left\">ECMAScriptのバージョンを指定</td>\n</tr>\n<tr>\n<td align=\"left\">--watch</td>\n<td align=\"left\">常駐状態になり、projectで変更があったファイルを自動ビルドする</td>\n</tr>\n<tr>\n<td align=\"left\">--charset</td>\n<td align=\"left\">ビルド後の文字コードを指定する</td>\n</tr>\n<tr>\n<td align=\"left\">--diagnostics</td>\n<td align=\"left\">ビルドの結果を表示する</td>\n</tr>\n<tr>\n<td align=\"left\">--emitBOM</td>\n<td align=\"left\">出力ファイルの先頭にUTF- 8バイトオーダーマークを出力する</td>\n</tr>\n<tr>\n<td align=\"left\">--emitDecoratorMetadata[1]</td>\n<td align=\"left\">ソースで装飾された型宣言のメタデータ出力する</td>\n</tr>\n<tr>\n<td align=\"left\">--inlineSourceMap</td>\n<td align=\"left\">別のファイルのソースと合わせて1つのファイルを出力する。</td>\n</tr>\n<tr>\n<td align=\"left\">--inlineSources</td>\n<td align=\"left\">1つのファイル内のmapファイルと一緒にソースを出力する</td>\n</tr>\n<tr>\n<td align=\"left\">--isolatedModules</td>\n<td align=\"left\">無条件に未解決のファイルのインポートする</td>\n</tr>\n<tr>\n<td align=\"left\">--jsx</td>\n<td align=\"left\">JSXのサポート &#39;React&#39; や &#39;Preserve&#39;をサポート</td>\n</tr>\n<tr>\n<td align=\"left\">--listFiles</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--locale</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--mapRoot</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--moduleResolution[1]</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--newLine</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noEmit</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noEmitOnError</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noEmitHelpers</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noImplicitAny</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noLib</td>\n<td align=\"left\">デフォルトではライブラリファイル（ lib.d.ts ）が含まれていない</td>\n</tr>\n<tr>\n<td align=\"left\">--noResolve</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--out</td>\n<td align=\"left\">このオプションの仕様は推奨されていない。代わりに--outfileを使用すること。</td>\n</tr>\n<tr>\n<td align=\"left\">--outDir</td>\n<td align=\"left\">ディレクトリへの出力構造を保つ</td>\n</tr>\n<tr>\n<td align=\"left\">--outFile</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--preserveConstEnums</td>\n<td align=\"left\">生成されたコード内の定数enum宣言を消去させない</td>\n</tr>\n<tr>\n<td align=\"left\">--removeComments</td>\n<td align=\"left\">コンパイル後のソースファイル内の全てのコメントを削除します！ *</td>\n</tr>\n<tr>\n<td align=\"left\">--rootDir</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--sourceMap</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--sourceRoot</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--stripInternal[1]</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--suppressImplicitAnyIndexErrors</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">--noImplicitAny</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"tsconfigjson\">tsconfig.json</h2>\n<p>tsconfig.jsonとはtscビルドするときの設定ファイル\ntscコマンドのオプションをキーとして値を入れてあげれば tsc と打つだけで好みのビルドがされる。</p>\n<p>一旦下記で作成</p>\n<pre><code class=\"language-tsconfig.json\">\n{\n    &quot;compilerOptions&quot;: {\n        &quot;module&quot;: &quot;commonjs&quot;,\n        &quot;project&quot;: &quot;./&quot;,\n        &quot;removeComments&quot;: true,\n        &quot;noImplicitAny&quot;: true,\n        &quot;noLib&quot; : false,\n        &quot;declaration&quot; : false,\n        &quot;preserveConstEnums&quot;: true,\n        &quot;experimentalDecorators&quot;: true,\n        &quot;emitDecoratorMetadata&quot;: true,\n        &quot;suppressImplicitAnyIndexErrors&quot;: true,\n        &quot;sourceMap&quot;: false,\n        &quot;target&quot;: &quot;ES3&quot;\n    }\n}\n</code></pre>\n<h2 id=\"tsd\">tsd</h2>\n<p>*.d.tsファイルと呼ばれる型定義ファイルを管理するパッケージ\nTypeScriptで他のモジュールをインポート行いたいときに型定義ファイルを用いる</p>\n<pre><code class=\"language-型定義ファイルのインストール\">\n./node_modules/.bin/tsd install jquery --save\n</code></pre>\n<p>インストール後、tsd.jsonで管理されるようになる。</p>\n<pre><code class=\"language-tsd.jsonの例\">\n{\n  &quot;version&quot;: &quot;v4&quot;,\n  &quot;repo&quot;: &quot;borisyankov/DefinitelyTyped&quot;,\n  &quot;ref&quot;: &quot;master&quot;,\n  &quot;path&quot;: &quot;typings&quot;,\n  &quot;bundle&quot;: &quot;typings/tsd.d.ts&quot;,\n  &quot;installed&quot;: {\n    &quot;angularjs/angular.d.ts&quot;: {\n      &quot;commit&quot;: &quot;5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff&quot;\n    },\n    &quot;jquery/jquery.d.ts&quot;: {\n      &quot;commit&quot;: &quot;5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff&quot;\n    },\n    &quot;angular2/angular2.d.ts&quot;: {\n      &quot;commit&quot;: &quot;8ea42cd8bb11863ed6f242d67c502288ebc45a7b&quot;\n    }\n  }\n}\n</code></pre>\n<p>型定義ファイルはtypingsというディレクトリ内に配置される。</p>\n<h2 id=\"gulp-tsconfig-update\">gulp-tsconfig-update</h2>\n<p>tsconfig.jsonに対し、ビルド行いたいtsファイルの追加を行うパッケージ</p>\n<p>下記のページを見てtscとgulp-typescriptやgulp-tscなどのパッケージとの依存をなくすためにtsconfigでビルド対象を管理させるのは良いことだと感じられる。</p>\n<p>gulp.srcのglobからtsconfig.jsonのfilesを更新するプラグインを作った\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/laco0416/items/a51b7534ddc4aec63875\">http://qiita.com/laco0416/items/a51b7534ddc4aec63875</a>\nTypeScript の開発環境構築と周辺ツールの紹介\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://html5experts.jp/vvakame/17004/\">https://html5experts.jp/vvakame/17004/</a></p>\n<p>tsconfigが正常に設定させる利点としてVisual Studio Codeで開発がしやすくなるとのこと</p>\n<h2 id=\"gulpの設定\">gulpの設定</h2>\n<p>TypeScriptのビルドをタスクランさせる設定を記載する。</p>\n<pre><code class=\"language-gulpfile.json\">\nvar gulp = require(&#39;gulp&#39;);\n\ngulp.task(&#39;tsbuild&#39;, function() {\n    var shell = require(&#39;gulp-shell&#39;);\n    // tsファイルのビルド\n    gulp.src(&#39;&#39;).pipe(shell(&#39;./node_modules/.bin/tsc&#39;));\n\n    /* resources/assets/ts/docs/下に存在する、ビルドで作成されたjsファイルを\n       public/js/docs/下にディレクトリ構造ごとコピーする */\n    gulp.src(&#39;resources/assets/ts/docs/**/*.js&#39;)\n        .pipe(gulp.dest(&#39;public/js/docs/&#39;)); \n});\n\ngulp.task(&#39;tsconfig&#39;, function() {\n    var tsConfig = require(&#39;gulp-tsconfig-update&#39;);\n    \n    // ビルド対象のファイルを指定する\n    gulp.src(\n        &#39;resources/assets/ts/**/*.ts&#39;).pipe(tsConfig());\n});\n</code></pre>\n<p>先にtsconfigの更新を行う</p>\n<pre><code>\n$ ./node_modules/.bin/gulp tsconfig\n</code></pre>\n<p>するとtsconfig.jsonが下記のようになる。</p>\n<pre><code class=\"language-tsconfig.json\">\n{\n    &quot;compilerOptions&quot;: {\n        &quot;module&quot;: &quot;commonjs&quot;,\n        &quot;project&quot;: &quot;./&quot;,\n        &quot;removeComments&quot;: true,\n        &quot;noImplicitAny&quot;: true,\n        &quot;noLib&quot; : false,\n        &quot;declaration&quot; : false,\n        &quot;preserveConstEnums&quot;: true,\n        &quot;experimentalDecorators&quot;: true,\n        &quot;emitDecoratorMetadata&quot;: true,\n        &quot;suppressImplicitAnyIndexErrors&quot;: true,\n        &quot;sourceMap&quot;: false,\n        &quot;target&quot;: &quot;ES3&quot;\n    },\n    &quot;files&quot;: [\n        &quot;resources/assets/ts/docs/screen/common/home_component.ts&quot;,\n        &quot;resources/assets/ts/docs/screen/common/tabbar_template.ts&quot;,\n        &quot;resources/assets/ts/docs/screen/common/controller/home_controller.ts&quot;\n    ]\n}\n</code></pre>\n<p>tsファイルのビルド</p>\n<pre><code>\n$ ./node_modules/.bin/gulp tsbuild\n</code></pre>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-15 01-07-45 [メモ]TypeScriptの設定・用語など/1-md.png\" alt=\"スクリーンショット 2015-12-18 2.18.24.png\"></p>\n<p>public下にjsが作成された。</p>\n<h1 id=\"typescriptの書き方\">TypeScriptの書き方</h1>\n<p>ES6の書き方がほぼほぼだがまずは書く</p>\n<p>公式でお試しにコードがかけるのがあるので遊んでみよう\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.typescriptlang.org/Playground\">http://www.typescriptlang.org/Playground</a></p>\n<p>開いたときに挨拶するためのクラスがPlayground上に表示されるので既存のコードを元に説明を行う</p>\n<h2 id=\"クラス構文\">クラス構文</h2>\n<p>ES6をばりばり使うなら絶対使いたい構文\nオブジェクト指向な書き方っぽい</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    greet() {\n        return &quot;Hello, &quot; + this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"const\">const</h2>\n<p>var以外の変数の1つとしてconstが追加\nこれを使用することで変数の値が書き換わることのない変数宣言ができる。</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        const hello = &#39;hello&#39;;\n        // 下記のコメントはconstに対して値変更を行おうとしているため使用できない\n        // hello = this.hello + this.greeting;\n        this.hello = hello + this.greeting;\n        return this.hello + this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"let\">let</h2>\n<p>letを使用するとブロックの中と外で同じ変数名でもスコープを分けてくる。\n今まで通り、varを使用することができるのでブロック内で変数を変更するコードはvarで宣言させてあげよう。</p>\n<pre><code>class Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        // ifの外では&#39;hello&#39;として扱う\n        let hello = &#39;hello&#39;;\n        if (true) {\n            // ifの中でのhello変数は&#39;hello2&#39;として扱う\n            let hello = &#39;hello2&#39;;\n            alert(hello);\n        }\n        this.hello = hello + this.greeting;\n        return this.hello;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"アロー\">アロー</h2>\n<p>ES6でもおなじみ\nコールバック・無名関数に値渡して行うやり方をアローで行える。</p>\n<pre><code>\nlet greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\ngreet.forEach(args =&gt; alert(args));\n</code></pre>\n<p>短い（確信）\n今までのjsで書くとこんな感じになる。</p>\n<pre><code>\nvar greet = [&#39;hello&#39;, &#39;bye&#39;];\ngreet.forEach(function (args) {\n    return alert(args);\n});\n</code></pre>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        // 配列の中身はstring\n        let greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\n        // さりげなくアロー使って無名関数の記述を省略させる\n        greet.forEach(args =&gt; alert(args));\n\n        this.greeting = greet + this.greeting;\n        return this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h2 id=\"型宣言\">型宣言</h2>\n<p>ES6とTypeScriptで圧倒的に違う点として型宣言周り</p>\n<h3 id=\"暗黙的な型宣言（型推論）\">暗黙的な型宣言（型推論）</h3>\n<p>下記例では\nlet hello = &#39;hello&#39;;\nとした箇所が暗黙的にstring型扱いされてしまっているためnumberが入らない例</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        let hello = &#39;hello&#39;;\n        /* 暗黙的型宣言を行われているので数値型を入れようとすると\n           エラー出力される */\n        // hello = 1;\n        this.hello = hello + this.greeting;\n        return this.hello;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<p>たまにライブラリの型宣言ファイルのインポートをしたときに変に想定されてない型を用いようとしエラーが出る場合がある。\n解決方法としてこれで良いのか置いといて別の型を扱う場合は\nanyを用いることで回避できる。</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:any = &#39;hello&#39;;\n\n    greet() {\n        let hello:any = &#39;hello&#39;;\n        /* anyとしているため数値型を用いることができる */\n        hello = 1;\n        this.hello = hello + this.greeting;\n        return this.hello;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h3 id=\"保証されている型\">保証されている型</h3>\n<h4 id=\"プリミティブ型\">プリミティブ型</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">型</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">number</td>\n<td align=\"left\">数値を扱う型</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td align=\"left\">ブール値を扱う型</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">文字列値を扱う型</td>\n</tr>\n<tr>\n<td align=\"left\">void</td>\n<td align=\"left\">関数が値を返さないことを表す型</td>\n</tr>\n<tr>\n<td align=\"left\">any</td>\n<td align=\"left\">全ての型の上位にある型</td>\n</tr>\n</tbody></table>\n<h4 id=\"配列\">配列</h4>\n<p>型を宣言して配列を作成すると指定した型以外を用いることができなくできる。\n型推論で数値型、文字列型が混在するときはanyになるが\nあらかじめ入れる物の型が決まってしまっている場合は型を指定してしまった方が良い</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        // 配列の中身はstring\n        let greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\n        // さりげなくアロー使って無名関数の記述を省略させる\n        greet.forEach(args =&gt; alert(args));\n\n        this.greeting = greet + this.greeting;\n        return this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter(&quot;world&quot;);\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n<h4 id=\"オプショナル\">オプショナル</h4>\n<p>TypeScriptは宣言と呼び出しに厳しい言語\n関数の宣言に引数がある場合、引数を与えなければならないが\n引数の後ろに * ? * を置くことで引数がなくても扱うことができる</p>\n<p>下記はコンストラクタを無理やりオプショナルにさせた実行例\n基本的にオプショナルを扱うのはやめよう</p>\n<pre><code>\nclass Greeter {\n    greeting: string;\n\n    // インスタンス時に呼ばれるメソッド\n    constructor(message?: string) {\n        this.greeting = message;\n    }\n\n    hello:string = &#39;hello&#39;;\n\n    greet() {\n        let greet:string[] = [&#39;hello&#39;, &#39;bye&#39;];\n        greet.forEach(args =&gt; alert(args));\n        \n        this.greeting = greet + this.greeting;\n        return this.greeting;\n    }\n}\n\n// クラスのインスタンス化\nvar greeter = new Greeter();\n\n// ボタンを作る\nvar button = document.createElement(&#39;button&#39;);\nbutton.textContent = &quot;Say Hello&quot;;\nbutton.onclick = function() {\n    // ボタンをクリックしたときの処理\n    alert(greeter.greet());\n}\n\ndocument.body.appendChild(button);\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]TypeScriptの設定・用語など",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]TypeScriptの設定・用語など.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]TypeScriptの設定・用語など.png"
    }
  },
  {
    "name": "2015-12-05 16-24-40 [メモ]phpenvとphp-buildを用いたPHPバージョンアップ",
    "publishedAt": "2015-12-05 16-24-40",
    "title": "[メモ]phpenvとphp-buildを用いたPHPバージョンアップ",
    "description": "  前もこんな記事書いてました[メモ]GentooにH2O+PHP7.0.0RC4をインストールする。http://qiita.com/igara/items/1b7cd8e714",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"前もこんな記事書いてました\">前もこんな記事書いてました</h1>\n<p>[メモ]GentooにH2O+PHP7.0.0RC4をインストールする。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/1b7cd8e714844440795d\">http://qiita.com/igara/items/1b7cd8e714844440795d</a></p>\n<p>今回はアップデートについて記載</p>\n<h1 id=\"起動中のphp-fpmを停止させる\">起動中のphp-fpmを停止させる</h1>\n<pre><code># php-fpmプロセスを調べる\nps -ef\n\nphp-fpm: master process (/root/.\nnobody   23272 23271  0 16:09 ?        00:00:00 \n↑これがphp-fpmのプロセスで23272がプロセスID\nphp-fpm: pool www\nnobody   23273 23271  0 16:09 ?        00:00:00 php-fpm: pool www\nroot     23274     2  0 16:09 ?        00:00:00 [kworker/0:2]\nroot     23322     2  0 16:14 ?        00:00:00 [kworker/0:0]\n\nkill 23271\n</code></pre>\n<h1 id=\"php-buildを更新する\">php-buildを更新する</h1>\n<p>以前、phpのソースをビルドした場合コンフリクトを発生させるためresetする必要がある。</p>\n<pre><code>\ncd .phpenv/plugins/php-build/\ngit reset --hard\ngit pull\n</code></pre>\n<h1 id=\"php700をビルドする\">php7.0.0をビルドする</h1>\n<pre><code>\nphpenv install 7.0.0\nphpenv global 7.0.0\nphpenv local 7.0.0\nphpenv rehash\n</code></pre>\n<pre><code>\n# 設定ファイルの適応\ncd /root/.phpenv/versions/7.0.0/etc/\ncp php-fpm.conf.default php-fpm.conf\ncd /root/.phpenv/versions/7.0.0/etc/php-fpm.d/\ncp www.conf.default www.conf\n</code></pre>\n<p>#php7.0.0のphp-fpmを起動する</p>\n<pre><code>\n~/.phpenv/versions/7.0.0/sbin/php-fpm &amp;\n</code></pre>\n<h1 id=\"完了\">完了!</h1>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 16-24-40 [メモ]phpenvとphp-buildを用いたPHPバージョンアップ/0-md.png\" alt=\"スクリーンショット 2015-12-05 16.23.34.png\"></p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]phpenvとphp-buildを用いたPHPバージョンアップ",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]phpenvとphp-buildを用いたPHPバージョンアップ.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]phpenvとphp-buildを用いたPHPバージョンアップ.png"
    }
  },
  {
    "name": "2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる",
    "publishedAt": "2015-12-05 15-01-14",
    "title": "OnsenUIでスマホアプリみたいなサイトを作ってみる",
    "description": "  OnsenUIとはモバイル向けに作られたHTML5フレームワーククラウドIDEのmonacaでも用いられており、Webでもネイティブアプリでも使えるハイブリットなアプリ作りに貢",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"onsenuiとは\">OnsenUIとは</h1>\n<p>モバイル向けに作られたHTML5フレームワーク\nクラウドIDEのmonacaでも用いられており、Webでもネイティブアプリでも使えるハイブリットなアプリ作りに貢献しているようだ。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://docs.monaca.mobi/2.9/ja/onsenui/\">http://docs.monaca.mobi/2.9/ja/onsenui/</a></p>\n<h1 id=\"こういったサイトを作ってみたかったんだよ\">こういったサイトを作ってみたかったんだよ!</h1>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/0-md.gif\" alt=\"タイトルなし.gif\"></p>\n<p>タブバーとスワイプでサイドナビゲーションが表示されるサイト</p>\n<h1 id=\"作成方法など\">作成方法など</h1>\n<p>laravelで作成されたプロジェクトを対象に説明</p>\n<h2 id=\"npm-install\">npm install</h2>\n<p>nodejsインストールされている前提で説明\n下記を実行してライブラリをダウンロード</p>\n<pre><code>\nnpm install gulp --save-dev\nnpm install angular --save-dev\nnpm install onsenui --save-dev\n</code></pre>\n<h2 id=\"gulp-task\">gulp task</h2>\n<pre><code class=\"language-gulpfile.js\">\nvar gulp = require(&#39;gulp&#39;);\n\ngulp.task(&#39;import&#39;, function() {\n\n    // onsenUIをpublic下に設置する。\n    var onsenUIPath = &#39;node_modules/onsenui&#39;;\n    gulp.src(onsenUIPath + &#39;/css/**&#39;)\n        .pipe(gulp.dest(&#39;public/css/lib/onsenui&#39;));\n    gulp.src(onsenUIPath + &#39;/js/**&#39;)\n        .pipe(gulp.dest(&#39;public/js/lib/onsenui&#39;));\n\n    // AngularJSをpublic下に設置する。\n    var angularJSPath = &#39;node_modules/angular&#39;;\n    gulp.src(angularJSPath + &#39;/angular.min.js&#39;)\n        .pipe(gulp.dest(&#39;public/js/lib/angular&#39;));\n    gulp.src(angularJSPath + &#39;/angular-csp.css&#39;)\n        .pipe(gulp.dest(&#39;public/css/lib/angular&#39;));\n\n}\n</code></pre>\n<p>gulpのタスクを実行する。</p>\n<pre><code>\n# プロジェクトのディレクトリ配下にいるときに下記実行\n./node_modules/.bin/gulp import\n</code></pre>\n<p>これでpublic下にcss,jsファイルが移動されるはず。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/1-md.png\" alt=\"スクリーンショット 2015-12-05 14.39.33.png\"></p>\n<h2 id=\"プロジェクトのresources下を編集\">プロジェクトのresources下を編集</h2>\n<p>使うのは\nlaravelでデフォルトで作成されているwelcome.blade.phpと\n新規で作成したwelcome/common/***.brade.php</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/2-md.png\" alt=\"スクリーンショット 2015-12-05 14.09.38.png\"></p>\n<h3 id=\"welcomebladephpの編集\">welcome.blade.phpの編集</h3>\n<pre><code class=\"language-welcome.blade.php\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link href=&quot;../css/lib/onsenui/onsenui.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n    &lt;link href=&quot;../css/lib/onsenui/onsen-css-components-dark-theme.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/lib/systemjs/system.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/lib/angular/angular.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;../js/lib/onsenui/onsenui.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n        ons.bootstrap();\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n@include(&#39;welcome.common.header&#39;)\n@include(&#39;welcome.common.menu&#39;)\n@include(&#39;welcome.common.footer&#39;)\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"ファイルの新規作成\">ファイルの新規作成</h3>\n<h4 id=\"画面下のタブを構成するテンプレートを作成する\">画面下のタブを構成するテンプレートを作成する</h4>\n<pre><code class=\"language-footer.blade.php\">\n&lt;!-- フッター --&gt;\n&lt;ons-template id=&quot;tabbar.html&quot;&gt;\n    &lt;ons-tabbar var=&quot;tabbar&quot;&gt;\n        &lt;ons-tab page=&quot;home.html&quot; label=&quot;Home&quot; icon=&quot;ion-home&quot; active=&quot;true&quot;&gt;&lt;/ons-tab&gt;\n      &lt;ons-tab page=&quot;comments.html&quot; label=&quot;Comments&quot; icon=&quot;ion-chatbox-working&quot;&gt;&lt;/ons-tab&gt;\n      &lt;ons-tab page=&quot;tags.html&quot; label=&quot;Tags&quot; icon=&quot;ion-ios-pricetag&quot;&gt;&lt;/ons-tab&gt;\n      &lt;ons-tab page=&quot;settings.html&quot; label=&quot;Settings&quot; icon=&quot;ion-ios-cog&quot;&gt;\n    &lt;/ons-tab&gt;\n  &lt;/ons-tabbar&gt;\n&lt;/ons-template&gt;\n&lt;!-- /フッター --&gt;\n</code></pre>\n<h4 id=\"各メニューのページ内容を表示するテンプレートを作成する\">各メニューのページ内容を表示するテンプレートを作成する</h4>\n<pre><code class=\"language-menu.blade.php\">\n&lt;ons-sliding-menu var=&quot;menu&quot; menu-page=&quot;menu.html&quot; main-page=&quot;tabbar.html&quot; side=&quot;left&quot; type=&quot;push&quot; max-slide-distance=&quot;200px&quot;&gt;\n&lt;/ons-sliding-menu&gt;\n\n&lt;!-- サイドメニュー --&gt;\n&lt;ons-template id=&quot;menu.html&quot;&gt;\n  &lt;ons-list&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(0), menu.closeMenu()&quot;&gt;\n      Home\n    &lt;/ons-list-item&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(1), menu.closeMenu()&quot;&gt;\n      Comments\n    &lt;/ons-list-item&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(2), menu.closeMenu()&quot;&gt;\n      Tags\n    &lt;/ons-list-item&gt;\n    &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(3), menu.closeMenu()&quot;&gt;\n      Settings\n    &lt;/ons-list-item&gt;\n  &lt;/ons-list&gt;\n&lt;/ons-template&gt;\n&lt;!-- /サイドメニュー --&gt;\n\n&lt;!-- メニューのコンテンツ内容 --&gt;\n&lt;ons-template id=&quot;home.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Home\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;comments.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Comments\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;tags.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Tags\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;settings.html&quot;&gt;\n  &lt;ons-page&gt;\n    &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n      Setting\n    &lt;/p&gt;\n  &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n&lt;!-- /メニューのコンテンツ内容 --&gt;\n</code></pre>\n<h4 id=\"ヘッダー部\">ヘッダー部</h4>\n<pre><code class=\"language-header.blade.php\">&lt;!-- ヘッダー --&gt;\n&lt;ons-template id=&quot;header.html&quot;&gt;\n    &lt;ons-toolbar&gt;\n        &lt;div class=&quot;left&quot;&gt;\n            &lt;!-- サイドメニューを表示する三表示 --&gt;\n            &lt;ons-toolbar-button ng-click=&quot;menu.toggleMenu()&quot;&gt;\n                &lt;ons-icon icon=&quot;bars&quot;&gt;&lt;/ons-icon&gt;\n            &lt;/ons-toolbar-button&gt;\n        &lt;/div&gt;\n        &lt;!-- タイトル --&gt;\n        &lt;div class=&quot;center&quot;&gt;SyoNet&lt;/div&gt;\n    &lt;/ons-toolbar&gt;\n    &lt;!-- フッターを呼び出す --&gt;\n    &lt;ng-include src=&quot;&#39;tabbar.html&#39;&quot;&gt;&lt;/ng-include&gt;\n&lt;/ons-template&gt;\n&lt;!-- /ヘッダー --&gt;\n</code></pre>\n<p>これでサイドナビゲーションとタブバーの実装ができる</p>\n<h1 id=\"所感\">所感</h1>\n<p>今回はサーバ側で各コンテンツのテンプレートを全て静的に取得したが、\nせっかくAngularJS使っているのならば「ng-include」を用いてボタンタップ時にhtmlの内容を動的に取得しに行くのもいいなと感じた。\n初期で表示する部分はサーバで作成し、タップ後の処理はクライアントに任せてしまうのが良さそう。</p>\n<p>次世代バージョンでOnsenUI2やAngular2とかでているがどちらもalpha版、beta版である。\nOnsenUIの一部コンポーネントはAngularを用いなくても使えるようだがサイドナビゲーションなどはangularを用いらないといけないようである。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://onsen.io/2/reference/javascript.html\">http://onsen.io/2/reference/javascript.html</a></p>\n<p>2015/12/5時点\nOnsenUI2ではまだサイドナビゲーションが使えない模様\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/OnsenUI/OnsenUI/issues/1038\">https://github.com/OnsenUI/OnsenUI/issues/1038</a></p>\n<p>2015/12/25時点\nOnsenUI2でサイドナビゲーションが使えるようになった！</p>\n<h1 id=\"全てhtmlで管理させる\">全てHTMLで管理させる</h1>\n<p>ほぼほぼ上記で書いていたことと同じになるが</p>\n<p>ディレクトリ構造として</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-12-05 15-01-14 OnsenUIでスマホアプリみたいなサイトを作ってみる/3-md.png\" alt=\"スクリーンショット 2015-12-06 16.27.21.png\"></p>\n<pre><code class=\"language-public/docs/screen/top/design/design.html\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link href=&quot;../../../../css/lib/onsenui/onsenui.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n        &lt;link href=&quot;../../../../css/lib/onsenui/onsen-css-components-dark-theme.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;../../../../js/lib/systemjs/system.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;../../../../js/lib/angular/angular.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script type=&quot;text/javascript&quot; src=&quot;../../../../js/lib/onsenui/onsenui.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script&gt;\n            ons.bootstrap();\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;ng-include src=&quot;&#39;../../common/design/design_menu.html&#39;&quot;&gt;&lt;/ng-include&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"language-public/docs/screen/common/design/design_footer.html\">\n&lt;!-- フッター --&gt;\n&lt;ons-tabbar var=&quot;tabbar&quot;&gt;\n    &lt;ons-tab page=&quot;home.html&quot; label=&quot;Home&quot; icon=&quot;ion-home&quot; active=&quot;true&quot;&gt;&lt;/ons-tab&gt;\n    &lt;ons-tab page=&quot;comments.html&quot; label=&quot;Comments&quot; icon=&quot;ion-chatbox-working&quot;&gt;&lt;/ons-tab&gt;\n    &lt;ons-tab page=&quot;tags.html&quot; label=&quot;Tags&quot; icon=&quot;ion-ios-pricetag&quot;&gt;&lt;/ons-tab&gt;\n    &lt;ons-tab page=&quot;settings.html&quot; label=&quot;Settings&quot; icon=&quot;ion-ios-cog&quot;&gt;\n    &lt;/ons-tab&gt;\n&lt;/ons-tabbar&gt;\n&lt;!-- /フッター --&gt;\n</code></pre>\n<pre><code class=\"language-public/docs/screen/common/design/design_menu.html\">\n&lt;ons-sliding-menu var=&quot;menu&quot; menu-page=&quot;menu.html&quot; main-page=&quot;../../common/design/design_header.html&quot; side=&quot;left&quot; type=&quot;push&quot; max-slide-distance=&quot;200px&quot;&gt;\n&lt;/ons-sliding-menu&gt;\n\n&lt;!-- サイドメニュー --&gt;\n&lt;ons-template id=&quot;menu.html&quot;&gt;\n    &lt;ons-list&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(0), menu.closeMenu()&quot;&gt;\n            Home\n        &lt;/ons-list-item&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(1), menu.closeMenu()&quot;&gt;\n            Comments\n        &lt;/ons-list-item&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(2), menu.closeMenu()&quot;&gt;\n            Tags\n        &lt;/ons-list-item&gt;\n        &lt;ons-list-item modifier=&quot;chevron&quot; onclick=&quot;tabbar.setActiveTab(3), menu.closeMenu()&quot;&gt;\n            Settings\n        &lt;/ons-list-item&gt;\n    &lt;/ons-list&gt;\n&lt;/ons-template&gt;\n&lt;!-- /サイドメニュー --&gt;\n\n&lt;!-- メニューのコンテンツ内容 --&gt;\n&lt;ons-template id=&quot;home.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Home\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;comments.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Comments\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;tags.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Tags\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n\n&lt;ons-template id=&quot;settings.html&quot;&gt;\n    &lt;ons-page&gt;\n        &lt;p style=&quot;text-align: center; color: #999; padding-top: 50px;&quot;&gt;\n            Setting\n        &lt;/p&gt;\n    &lt;/ons-page&gt;\n&lt;/ons-template&gt;\n&lt;!-- /メニューのコンテンツ内容 --&gt;\n</code></pre>\n<pre><code class=\"language-public/docs/screen/common/design/design_header.html\">\n&lt;!-- ヘッダー --&gt;\n&lt;ons-toolbar&gt;\n    &lt;div class=&quot;left&quot;&gt;\n        &lt;!-- サイドメニューを表示する三表示 --&gt;\n        &lt;ons-toolbar-button ng-click=&quot;menu.toggleMenu()&quot;&gt;\n            &lt;ons-icon icon=&quot;bars&quot;&gt;&lt;/ons-icon&gt;\n        &lt;/ons-toolbar-button&gt;\n    &lt;/div&gt;\n    &lt;!-- タイトル --&gt;\n    &lt;div class=&quot;center&quot;&gt;SyoNet&lt;/div&gt;\n&lt;/ons-toolbar&gt;\n&lt;!-- /ヘッダー --&gt;\n\n&lt;!-- フッターを呼び出す --&gt;\n&lt;ng-include src=&quot;&#39;../../common/design/design_footer.html&#39;&quot;&gt;&lt;/ng-include&gt;\n</code></pre>\n<p>たまに描画ができないときがある</p>\n\n</div>",
    "link": "/blogs/qiita/OnsenUIでスマホアプリみたいなサイトを作ってみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/OnsenUIでスマホアプリみたいなサイトを作ってみる.png",
      "small": "/ogp/630x630/blogs/qiita/OnsenUIでスマホアプリみたいなサイトを作ってみる.png"
    }
  },
  {
    "name": "2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる",
    "publishedAt": "2015-11-14 18-30-24",
    "title": "[メモ]OpenShiftでRedmineを作成してRedmineと戯れる",
    "description": "  OpenShiftのアカウントを作成する下記サイトから登録https://www.openshift.com/アプリケーション(Redmineのプロジェクト)の追加を行うログイ",
    "body": "<div class=\"markdown-body\">\n  <h3 id=\"openshiftのアカウントを作成する\">OpenShiftのアカウントを作成する</h3>\n<p>下記サイトから登録\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.openshift.com/\">https://www.openshift.com/</a></p>\n<h3 id=\"アプリケーションredmineのプロジェクトの追加を行う\">アプリケーション(Redmineのプロジェクト)の追加を行う</h3>\n<p>ログイン後の下記URLからアプリケーションの追加を行う\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://openshift.redhat.com/app/console/applications\">https://openshift.redhat.com/app/console/applications</a></p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/0-md.png\" alt=\"スクリーンショット 2015-11-14 16.43.11.png\"></p>\n<p>Add Application...をクリック</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/1-md.png\" alt=\"スクリーンショット 2015-11-14 16.44.35.png\"></p>\n<p>redmineで検索してみると候補に上がってくる。</p>\n<p>設定画面の説明は割愛\nCreateをクリックするとビルドが始まるのでしばらく待つ。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/2-md.png\" alt=\"スクリーンショット 2015-11-14 16.53.43.png\"></p>\n<p>ビルドが完了後、青色のモザイク部分のリンクをクリックして\nRedmineの画面を開く\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/3-md.png\" alt=\"スクリーンショット 2015-11-14 17.11.09.png\"></p>\n<h3 id=\"redmine-apiと戯れる\">Redmine APIと戯れる</h3>\n<h4 id=\"rest-apiの使用許可\">REST APIの使用許可</h4>\n<p>許可しなくても取得できるものもあるが\n管理-&gt;設定-&gt;認証から\nREST APIの使用を許可する（注意）。\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/4-md.png\" alt=\"スクリーンショット 2015-11-14 17.18.01.png\"></p>\n<h4 id=\"apiの一覧\">APIの一覧</h4>\n<p>公式の説明は下記\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.redmine.org/projects/redmine/wiki/Rest_api\">http://www.redmine.org/projects/redmine/wiki/Rest_api</a></p>\n<p>APIが出力されるフォーマットとしてxml,jsonを対応している。</p>\n<h5 id=\"project-プロジェクト-api\">Project プロジェクト API</h5>\n<p>公式\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.redmine.org/projects/redmine/wiki/Rest_Projects\">http://www.redmine.org/projects/redmine/wiki/Rest_Projects</a></p>\n<p>プロジェクトの一覧を取得するとき\nGET\nhttp://{RedmineのURL}/projects.xml</p>\n<p>こんな感じのが取得できる</p>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;projects total_count=&quot;2&quot; offset=&quot;0&quot; limit=&quot;25&quot; type=&quot;array&quot;&gt;\n  &lt;project&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;name&gt;さんぷる&lt;/name&gt;\n    &lt;identifier&gt;sample&lt;/identifier&gt;\n    &lt;description/&gt;\n    &lt;created_on&gt;2015-11-14T08:14:05Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T08:14:05Z&lt;/updated_on&gt;\n  &lt;/project&gt;\n  &lt;project&gt;\n    &lt;id&gt;2&lt;/id&gt;\n    &lt;name&gt;サンプルだ&lt;/name&gt;\n    &lt;identifier&gt;sampleda&lt;/identifier&gt;\n    &lt;description/&gt;\n    &lt;created_on&gt;2015-11-14T09:48:02Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T09:48:02Z&lt;/updated_on&gt;\n  &lt;/project&gt;\n&lt;/projects&gt;\n\n</code></pre>\n<p>IDかidentifilterからプロジェクトを取得するとき\nGET\nhttp://{RedmineのURL}/projects/{idかidentifilter}.xml\n出力される内容はプロジェクトの一覧取得するのに対して絞り込んで\n出力されるような結果になる。</p>\n<h5 id=\"time-entries-工数-api\">Time Entries 工数 API</h5>\n<p>公式の説明は下記\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.redmine.org/projects/redmine/wiki/Rest_TimeEntries\">http://www.redmine.org/projects/redmine/wiki/Rest_TimeEntries</a></p>\n<p>積まれていった工数時間を取得するとき\nGET\nhttp://{RedmineのURL}/time_entries.xml</p>\n<p>デロデロ出る</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;time_entries total_count=&quot;2&quot; offset=&quot;0&quot; limit=&quot;25&quot; type=&quot;array&quot;&gt;\n  &lt;time_entry&gt;\n    &lt;id&gt;2&lt;/id&gt;\n    &lt;project id=&quot;2&quot; name=&quot;サンプルだ&quot;/&gt;\n    &lt;issue id=&quot;3&quot;/&gt;\n    &lt;user id=&quot;3&quot; name=&quot;igara&quot;/&gt;\n    &lt;activity id=&quot;2&quot; name=&quot;さんぷる&quot;/&gt;\n    &lt;hours&gt;8.0&lt;/hours&gt;\n    &lt;comments&gt;\n    &lt;/comments&gt;\n    &lt;spent_on&gt;2015-11-14&lt;/spent_on&gt;\n    &lt;created_on&gt;2015-11-14T10:02:50Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T10:02:50Z&lt;/updated_on&gt;\n  &lt;/time_entry&gt;\n  &lt;time_entry&gt;\n    &lt;id&gt;1&lt;/id&gt;\n    &lt;project id=&quot;1&quot; name=&quot;さんぷる&quot;/&gt;\n    &lt;issue id=&quot;1&quot;/&gt;\n    &lt;user id=&quot;1&quot; name=&quot;Redmine Admin&quot;/&gt;\n    &lt;activity id=&quot;2&quot; name=&quot;さんぷる&quot;/&gt;\n    &lt;hours&gt;2.5&lt;/hours&gt;\n    &lt;comments&gt;\n    &lt;/comments&gt;\n    &lt;spent_on&gt;2015-11-14&lt;/spent_on&gt;\n    &lt;created_on&gt;2015-11-14T09:38:19Z&lt;/created_on&gt;\n    &lt;updated_on&gt;2015-11-14T09:38:19Z&lt;/updated_on&gt;\n  &lt;/time_entry&gt;\n&lt;/time_entries&gt;\n</code></pre>\n<h3 id=\"redmineのプラグインを追加する\">Redmineのプラグインを追加する</h3>\n<h4 id=\"ssh接続する\">SSH接続する</h4>\n<p>下記を参照にアプリケーションのサーバにSSHできるようにする。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developers.openshift.com/en/managing-remote-connection.html\">https://developers.openshift.com/en/managing-remote-connection.html</a></p>\n<h4 id=\"worktime\">WorkTime</h4>\n<pre><code>\ncd ~/app-root/repo/plugins\nwget https://bitbucket.org/tkusukawa/redmine_work_time/downloads/redmine_work_time-0.3.1.zip\nunzip redmine_work_time-0.3.1.zip\ncd ~/app-root/repo/\nrake redmine:plugins:migrate RAILS_ENV=production\n</code></pre>\n<p>OpenShiftのアプリケーション画面から再起動をかける\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/5-md.png\" alt=\"スクリーンショット 2015-11-14 18.26.11.png\"></p>\n<p>これでRedmineの画面右上から工数を確認できるようになる\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-11-14 18-30-24 [メモ]OpenShiftでRedmineを作成してRedmineと戯れる/6-md.png\" alt=\"スクリーンショット 2015-11-14 18.28.58.png\"></p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]OpenShiftでRedmineを作成してRedmineと戯れる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]OpenShiftでRedmineを作成してRedmineと戯れる.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]OpenShiftでRedmineを作成してRedmineと戯れる.png"
    }
  },
  {
    "name": "2015-11-12 00-44-09 [メモ]Djangoのプロジェクト作成と用語",
    "publishedAt": "2015-11-12 00-44-09",
    "title": "[メモ]Djangoのプロジェクト作成と用語",
    "description": "  MTV型フレームワークModel 　　データのまとまりTemplete 画面表示する雛形View 　　 画面遷移先の制御http://djangoproject.jp/doc/",
    "body": "<div class=\"markdown-body\">\n  <h2 id=\"mtv型フレームワーク\">MTV型フレームワーク</h2>\n<p>Model 　　データのまとまり\nTemplete 画面表示する雛形\nView 　　 画面遷移先の制御</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://djangoproject.jp/doc/ja/1.0/faq/general.html\">http://djangoproject.jp/doc/ja/1.0/faq/general.html</a></p>\n<h2 id=\"環境構築\">環境構築</h2>\n<h4 id=\"pythonのパッケージソフトウェア管理ツールをインストール\">Pythonのパッケージソフトウェア管理ツールをインストール</h4>\n<pre><code>sudo easy_install pip\n</code></pre>\n<h4 id=\"djangoのインストール\">Djangoのインストール</h4>\n<pre><code>sudo pip install django\n</code></pre>\n<h2 id=\"プロジェクトの作成\">プロジェクトの作成</h2>\n<pre><code>django-admin.py startproject プロジェクト名\n</code></pre>\n<p>下記の様な物が作成される\nプロジェクト名\n├── manage.py\n├── プロジェクト名\n│   ├── <strong>init</strong>.py\n│   ├── settings.py\n│   ├── urls.py\n│   ├── wsgi.py</p>\n<h2 id=\"マイグレーションの利用に関して\">マイグレーションの利用に関して</h2>\n<pre><code>python manage.py startapp アプリケーション名\n</code></pre>\n<p>下記の様なのが構成される\n├── アプリケーション名\n│   ├── <strong>init</strong>.py\n│   ├── admin.py // DBをいじるための管理画面に必要な物\n│   ├── models.py // DB Model\n│   ├── tests.py\n│   └── views.py</p>\n<p>Modelを作成する\nadminの設定を行う</p>\n<pre><code>python manage.py makemigrations アプリケーション名\n</code></pre>\n<p>アプリケーションにモデルを基にmigrationsの追加構成される\n├── アプリケーション名\n│   ├── <strong>init</strong>.py\n│   ├── admin.py\n│   ├── migrations // DBの定義構成するためのファイルがある\n│   │   ├── 0001_initial.py\n│   │   └── <strong>init</strong>.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py</p>\n<pre><code>python manage.py syncdb\n</code></pre>\n<p>DB定義更新的な物</p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]Djangoのプロジェクト作成と用語",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]Djangoのプロジェクト作成と用語.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]Djangoのプロジェクト作成と用語.png"
    }
  },
  {
    "name": "2015-11-08 15-44-21 [メモ]WebKitをWatchする",
    "publishedAt": "2015-11-08 15-44-21",
    "title": "[メモ]WebKitをWatchする",
    "description": "  最新のブラウザ事情を知るためのメモWebKitプロジェクトのML登録様々なMLがあるためその説明を行う。公式の説明として下記リンクになる。http://www.webkit.o",
    "body": "<div class=\"markdown-body\">\n  <p>最新のブラウザ事情を知るためのメモ</p>\n<h2 id=\"webkitプロジェクトのml登録\">WebKitプロジェクトのML登録</h2>\n<p>様々なMLがあるためその説明を行う。\n公式の説明として下記リンクになる。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.webkit.org/contact.html\">http://www.webkit.org/contact.html</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#119;&#x65;&#x62;&#107;&#x69;&#x74;&#45;&#100;&#x65;&#x76;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#101;&#x62;&#x6b;&#105;&#x74;&#x2e;&#x6f;&#x72;&#x67;\">&#119;&#x65;&#x62;&#107;&#x69;&#x74;&#45;&#100;&#x65;&#x76;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#101;&#x62;&#x6b;&#105;&#x74;&#x2e;&#x6f;&#x72;&#x67;</a>\n開発者用ML</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#119;&#101;&#x62;&#x6b;&#x69;&#x74;&#x2d;&#x68;&#101;&#x6c;&#x70;&#x40;&#108;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#98;&#x6b;&#x69;&#x74;&#x2e;&#x6f;&#114;&#103;\">&#119;&#101;&#x62;&#x6b;&#x69;&#x74;&#x2d;&#x68;&#101;&#x6c;&#x70;&#x40;&#108;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#98;&#x6b;&#x69;&#x74;&#x2e;&#x6f;&#114;&#103;</a>\nWebKitのAPIや構築する方法などを質問するためのML</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#119;&#101;&#x62;&#x6b;&#105;&#116;&#x2d;&#117;&#110;&#97;&#x73;&#x73;&#x69;&#103;&#x6e;&#x65;&#100;&#x40;&#108;&#x69;&#x73;&#116;&#x73;&#46;&#119;&#101;&#x62;&#107;&#x69;&#116;&#46;&#111;&#x72;&#103;\">&#119;&#101;&#x62;&#x6b;&#105;&#116;&#x2d;&#117;&#110;&#97;&#x73;&#x73;&#x69;&#103;&#x6e;&#x65;&#100;&#x40;&#108;&#x69;&#x73;&#116;&#x73;&#46;&#119;&#101;&#x62;&#107;&#x69;&#116;&#46;&#111;&#x72;&#103;</a>\nBugzilaに起票された新しいバグの通知がされるML</p>\n<p>﻿﻿<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#x77;&#x65;&#x62;&#107;&#x69;&#116;&#45;&#114;&#101;&#x76;&#x69;&#101;&#x77;&#x73;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#x62;&#x6b;&#x69;&#116;&#46;&#x6f;&#x72;&#103;\">&#x77;&#x65;&#x62;&#107;&#x69;&#116;&#45;&#114;&#101;&#x76;&#x69;&#101;&#x77;&#x73;&#x40;&#x6c;&#x69;&#x73;&#116;&#115;&#46;&#x77;&#x65;&#x62;&#x6b;&#x69;&#116;&#46;&#x6f;&#x72;&#103;</a>\nBugzilaに起票されているレビュー待ちのものが通知されるML</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:&#x77;&#101;&#x62;&#107;&#x69;&#116;&#45;&#x63;&#104;&#x61;&#x6e;&#103;&#101;&#x73;&#64;&#x6c;&#105;&#115;&#x74;&#x73;&#x2e;&#119;&#x65;&#98;&#107;&#105;&#116;&#46;&#111;&#x72;&#x67;\">&#x77;&#101;&#x62;&#107;&#x69;&#116;&#45;&#x63;&#104;&#x61;&#x6e;&#103;&#101;&#x73;&#64;&#x6c;&#105;&#115;&#x74;&#x73;&#x2e;&#119;&#x65;&#98;&#107;&#105;&#116;&#46;&#111;&#x72;&#x67;</a>\nコミットされた変更点を通知するML</p>\n<p>MLの登録は下記で行える。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.webkit.org/contact.html\">http://www.webkit.org/contact.html</a></p>\n<h2 id=\"公式ページについて\">公式ページについて</h2>\n<h3 id=\"今後の状態確認\">今後の状態確認</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/status.html\">https://www.webkit.org/status.html</a>\n今後の対応であったり、対応が完了されているか確認することができる。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://planet.webkit.org/\">http://planet.webkit.org/</a>\n現状動いている仕様の確認ができる。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/coding/coding-style.html\">https://www.webkit.org/coding/coding-style.html</a>\nWebKitのコーディング規約</p>\n<h2 id=\"bugzila\">Bugzila</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bugs.webkit.org/\">https://bugs.webkit.org/</a>\nアカウントはNew Accountより登録できる。</p>\n<p>登録しなくてもBrowseより起票されているものを見ることができる。\nNew Bugsと書かれているのを開くと新しいバグの内容を確認できる。</p>\n<h2 id=\"webkit-のソース\">WebKit のソース</h2>\n<p>公式\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/building/checkout.html\">https://www.webkit.org/building/checkout.html</a>\nより\nミラーとしてGitHubにも公開されている。</p>\n<p>ソースチェックアウト後のビルドは下記参照\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.webkit.org/building/build.html\">https://www.webkit.org/building/build.html</a></p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]WebKitをWatchする",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]WebKitをWatchする.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]WebKitをWatchする.png"
    }
  },
  {
    "name": "2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて",
    "publishedAt": "2015-10-25 16-05-14",
    "title": "StoryBoardを生かしたアプリ作りについて",
    "description": "  概要StoryBoardを用いることで画面遷移がコードで実装しなくても楽に行うことができるようになったが、StoryBoardを一部分割したい、1つのStoryBoardで多数",
    "body": "<div class=\"markdown-body\">\n  <h4 id=\"概要\">概要</h4>\n<p>StoryBoardを用いることで画面遷移がコードで実装しなくても楽に行うことができるようになったが、\nStoryBoardを一部分割したい、1つのStoryBoardで多数のViewControllerを用いて処理の分割したい\nといった内容について投稿してみる。</p>\n<h4 id=\"container-view-controller\">Container View Controller</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/0-md.png\" alt=\"スクリーンショット 2015-10-25 15.45.02.png\"></p>\n<p>iOS5から使えるようになった機能\nStoryBoard上のViewControllerに子のViewControllerを配置することができる。\nよくやることとして\nUITableViewの処理をUITableViewControllerのサブクラスに置いてあげて、\nStroyBoard上のUITableViewControllerのクラスをサブクラス指定してあげて、\nContainerViewControllerにSegueさせるということをやっている。\nTabelViewの中身が静的な物であればStoryBoard上に直接書くというのも考えてもいいと思う。\nViewControllerの肥大化を防ぐことにも繋がるのではなかろうか。</p>\n<p>この時のクラス構成としてはこうなった。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/1-md.png\" alt=\"スクリーンショット 2015-10-25 15.49.11.png\">\n<img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/2-md.png\" alt=\"スクリーンショット 2015-10-25 15.49.43.png\"></p>\n<h4 id=\"storyboard-reference\">StoryBoard Reference</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-25 16-05-14 StoryBoardを生かしたアプリ作りについて/3-md.png\" alt=\"スクリーンショット 2015-10-25 16.02.38.png\"></p>\n<p>この機能はXcode7から用いることができるようになった機能\nStoryBoardの特徴として\n1つのStoryBoardで画面構成を作成することができるが\n多人数の開発だと競合を多発させる場面が出るだろう。\nできるだけ競合を防ぐためにもStoryBoardは細かく作っていきたい。\n個人的には1つのStoryBoardで1つだけの画面を作っていきたい派である。\nちょっと前ではStoryBoardを分割するためにコード上でStoryBoard上のViewControllerを呼び出してpushさせるということをやっていたがそれをInterfaceBuilder上でできるのはすごい。</p>\n<p>上の図ではChannelListと記載されたセルをタップした時に\n別のStroyBoardを呼ぶようになっている。</p>\n\n</div>",
    "link": "/blogs/qiita/StoryBoardを生かしたアプリ作りについて",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/StoryBoardを生かしたアプリ作りについて.png",
      "small": "/ogp/630x630/blogs/qiita/StoryBoardを生かしたアプリ作りについて.png"
    }
  },
  {
    "name": "2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる",
    "publishedAt": "2015-10-24 15-35-32",
    "title": "[メモ]H2OでHTTP／2を使ってみる",
    "description": "  前提H2Oインストール済みであることhttp://qiita.com/igara/items/1b7cd8e714844440795dopensslをインストール済みであること",
    "body": "<div class=\"markdown-body\">\n  <h3 id=\"前提\">前提</h3>\n<p>H2Oインストール済みであること\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/1b7cd8e714844440795d\">http://qiita.com/igara/items/1b7cd8e714844440795d</a></p>\n<p>opensslをインストール済みであること</p>\n<h3 id=\"オレオレ認証書を作成する\">オレオレ認証書を作成する</h3>\n<pre><code>\n$ openssl genrsa 2048 &gt; server.key\n$ openssl req -new -key server.key &gt; server.csr\n$ openssl x509 -days 3650 -req -signkey server.key &lt; server.csr &gt; server.crt\n</code></pre>\n<p>設定はお好きに</p>\n<h3 id=\"h2oのコンフィグを作成\">H2Oのコンフィグを作成</h3>\n<p>http通信用に作成</p>\n<pre><code class=\"language-h2o.conf\">\nhosts:\n &quot;example.com&quot;:\n    listen:\n     port: 8000\n    paths:\n        /:\n         file.dir: /home/vagrant/web/slack_rack_php/public\n         redirect:\n           url: /index.php/\n           internal: YES\n           status: 307\n\nfile.custom-handler:\n extension: .php\n fastcgi.connect:\n  host: 127.0.0.1\n  port: 9000\n  type: tcp\n\naccess-log: /home/vagrant/access-log\nerror-log: /home/vagrant/error-log\npid-file: /home/vagrant/pid-file\n</code></pre>\n<p>リバースプロキシとSSLの設定されたコンフィグ</p>\n<pre><code class=\"language-proxy.conf\">\nlisten:\n port: 8080\n ssl:\n  certificate-file: /home/vagrant/server.crt\n  key-file: /home/vagrant/server.key\nhosts:\n  default:\n    paths:\n      /:\n        proxy.reverse.url: http://127.0.0.1:8000/\n\naccess-log: /home/vagrant/accessre-log\nerror-log: /home/vagrant/errorre-log\npid-file: /home/vagrant/pidre-file\n</code></pre>\n<h3 id=\"h2oの起動\">H2Oの起動</h3>\n<pre><code>\nsudo h2o -m daemon -c h2o.conf\nsudo h2o -m daemon -c proxy.conf\n</code></pre>\n<h3 id=\"http1とhttp2の比較\">HTTP/1とHTTP/2の比較</h3>\n<p>画像をいっぱい読み込むページを作成してみてちょっと比較を行ってみた。</p>\n<p>こんなの</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる/0-md.png\" alt=\"スクリーンショット 2015-10-24 15.23.23.png\"></p>\n<p>Chromeのプラグインで「HTTP/2 and SPDY indicator」もしくは\nfirefoxだと「SPDY indicator」というのを入れると\nURLの隣に青いイナズマが表示され、\nHTTP/2を用いられているサイトだとわかる。</p>\n<h4 id=\"http1\">HTTP/1</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる/1-md.png\" alt=\"スクリーンショット 2015-10-24 15.30.11.png\"></p>\n<h4 id=\"http2\">HTTP/2</h4>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-24 15-35-32 [メモ]H2OでHTTP／2を使ってみる/2-md.png\" alt=\"スクリーンショット 2015-10-24 15.32.30.png\"></p>\n<p>HTTP/2は並列的に画像のダウンロードされているんですね。</p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]H2OでHTTP／2を使ってみる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]H2OでHTTP／2を使ってみる.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]H2OでHTTP／2を使ってみる.png"
    }
  },
  {
    "name": "2015-10-24 14-03-35 [メモ]node.jsでライブラリのバージョン管理する",
    "publishedAt": "2015-10-24 14-03-35",
    "title": "[メモ]node.jsでライブラリのバージョン管理する",
    "description": "  package.jsonにて外部ライブラリを管理するmacを使っている場合にちょっとハマったので記載下記で終わりっと思っていたら...brew install npmnpm i",
    "body": "<div class=\"markdown-body\">\n  <h3 id=\"packagejsonにて外部ライブラリを管理する\">package.jsonにて外部ライブラリを管理する</h3>\n<p>macを使っている場合にちょっとハマったので記載</p>\n<p>下記で終わりっと思っていたら...</p>\n<pre><code>brew install npm\nnpm install\n</code></pre>\n<p>なんかこんなのでてくる</p>\n<pre><code>module.js:333\n    throw err;\n          ^\nError: Cannot find module &#39;child-process-close&#39;\n    at Function.Module._resolveFilename (module.js:331:15)\n    at Function.Module._load (module.js:273:25)\n    at Module.require (module.js:357:17)\n    at require (module.js:373:17)\n    at /usr/local/lib/node_modules/npm/lib/npm.js:15:1\n    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/npm/lib/npm.js:520:3)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:349:32)\n    at Function.Module._load (module.js:305:12)\n</code></pre>\n<h3 id=\"解決方法\">解決方法</h3>\n<p>毎度のことだがぐぐってみる\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://spot-bill.com/wordpress/?p=92\">http://spot-bill.com/wordpress/?p=92</a></p>\n<pre><code>wget http://npmjs.org/install.sh\nsudo sh ./install.sh\n</code></pre>\n<p>で解決</p>\n<h3 id=\"おすすめの解決方法\">おすすめの解決方法</h3>\n<p>brewからではなくnodebrewを用いてnodejsをインストールする。</p>\n<pre><code>\n$ curl -L git.io/nodebrew | perl - setup\n</code></pre>\n<pre><code class=\"language-.bashrc\">\nexport PATH=$HOME/.nodebrew/current/bin:$PATH\n</code></pre>\n<pre><code>\n$ source .bashrc\n$ nodebrew install v4.2.1\n$ nodebrew use v4.2.1\n$ node -v\n  v4.2.1\n</code></pre>\n<h3 id=\"laravelのpackagejsonにライブラリを追加する\">laravelのpackage.jsonにライブラリを追加する</h3>\n<p>こっからが本題。</p>\n<p>ライブラリをダウンロードしてプロジェクトに追加するのも良いが\nせっかくlaravelのプロジェクトを作成した時にpackage.jsonというので\nバージョン管理がされているのでこれを使おう。</p>\n<p>laravelプロジェクト作成当時に記載されていたpackage.json</p>\n<pre><code class=\"language-package.json\">\n{\n  &quot;private&quot;: true,\n  &quot;devDependencies&quot;: {\n    &quot;gulp&quot;: &quot;^3.8.8&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;laravel-elixir&quot;: &quot;^3.0.0&quot;,\n    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;\n  }\n}\n</code></pre>\n<p>このまま</p>\n<pre><code>\nnpm install\n</code></pre>\n<p>でpackage.jsonのライブラリが追加されるわけだが\n仮に新しいバージョンのライブラリを入れたい時は</p>\n<pre><code>\nnpm install --save-dev laravel-elixir\n</code></pre>\n<p>とすることで新しいバージョンの情報がpackage.jsonに更新される。</p>\n<h3 id=\"個人的に使いたい物を入れてみる\">個人的に使いたい物を入れてみる</h3>\n<pre><code>\nnpm install --save-dev angular2\nnpm install --save-dev mocha\nnpm install --save-dev phantomjs\n</code></pre>\n<p>結果として今使おうとしているライブラリの一覧ができた。</p>\n<pre><code class=\"language-package.json\">\n{\n  &quot;private&quot;: true,\n  &quot;devDependencies&quot;: {\n    &quot;angular2&quot;: &quot;^2.0.0-alpha.45&quot;,\n    &quot;gulp&quot;: &quot;^3.8.8&quot;,\n    &quot;mocha&quot;: &quot;^2.3.3&quot;,\n    &quot;phantomjs&quot;: &quot;^1.9.18&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;laravel-elixir&quot;: &quot;^3.0.0&quot;,\n    &quot;bootstrap-sass&quot;: &quot;^3.0.0&quot;\n  }\n}\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]node.jsでライブラリのバージョン管理する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]node.jsでライブラリのバージョン管理する.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]node.jsでライブラリのバージョン管理する.png"
    }
  },
  {
    "name": "2015-10-17 09-18-17 [メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる",
    "publishedAt": "2015-10-17 09-18-17",
    "title": "[メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる",
    "description": "  前回使ったVMhttp://qiita.com/igara/items/1b7cd8e714844440795dVirtualBoxのメニューよりデバイス-&gt;共有フォルダ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"前回使ったvm\">前回使ったVM</h1>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/1b7cd8e714844440795d\">http://qiita.com/igara/items/1b7cd8e714844440795d</a></p>\n<p>VirtualBoxのメニューより\nデバイス-&gt;共有フォルダー設定</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-17 09-18-17 [メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる/0-md.png\" alt=\"スクリーンショット 2015-10-17 9.13.03.png\">\n実際存在する共有したいフォルダを選択</p>\n<h1 id=\"マウント\">マウント</h1>\n<p>GentooのVMを起動する</p>\n<pre><code># マウント対象の共有のフォルダがあるか見る\n$ ls /media\n  sf_slack_rack_web\n# マウント\n$ sudo mount -t vboxsf slack_rack_web /home/vagrant/web\n# ゲストでwebフォルダを事前に作成する必要がある\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]VirtualBoxで作成したGentooからホストのフォルダを共有させる.png"
    }
  },
  {
    "name": "2015-10-11 20-22-16 [メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。",
    "publishedAt": "2015-10-11 20-22-16",
    "title": "[メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。",
    "description": "  GentooをVMから起動する。下記からVMを作成する。http://qiita.com/igara/items/989ea37805f0db85b2f2VMのネットワークをブ",
    "body": "<div class=\"markdown-body\">\n  <h1 id=\"gentooをvmから起動する。\">GentooをVMから起動する。</h1>\n<p>下記からVMを作成する。\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://qiita.com/igara/items/989ea37805f0db85b2f2\">http://qiita.com/igara/items/989ea37805f0db85b2f2</a></p>\n<p>VMのネットワークをブリッジにして実行</p>\n<h1 id=\"h2oをインストールする前の準備\">H2Oをインストールする前の準備</h1>\n<p>Gentooにsshで接続したら下記コマンドたちを実行する。</p>\n<h2 id=\"gitをインストール\">Gitをインストール</h2>\n<pre><code>$ sudo emerge git\n</code></pre>\n<h2 id=\"libyamlをインストール\">libyamlをインストール</h2>\n<pre><code>$ sudo emerge libyaml\n</code></pre>\n<h1 id=\"h2oのインストール\">H2Oのインストール</h1>\n<p>下記を参考\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://h2o.examp1e.net/install.html\">https://h2o.examp1e.net/install.html</a></p>\n<pre><code># H2Oをダウンロード\n$ wget https://github.com/h2o/h2o/archive/v1.5.0.tar.gz\n# 解凍\n$ tar zxf v1.5.0.tar.gz\n\n# 解凍して作成したディレクトリに移動する\n$ cd h2o-1.5.0/\n# -DWITH_BUNDLED_SSLフラグというのがあるのだそうだ\n$ cmake -DWITH_BUNDLED_SSL=on .\n\n# build\n$ cmake .\n$ make h2o\n$ sudo make install\n</code></pre>\n<h1 id=\"h2oの設定ファイル作成\">H2Oの設定ファイル作成</h1>\n<pre><code class=\"language-h2o.conf\">user: vagrant\n\nlisten: 80\n\nhosts:\n &quot;example.com&quot;:\n   paths:\n    /:\n     file.dir: /home/vagrant/public_html\n\nfile.custom-handler:\n extension: .php\n fastcgi.connect:\n  host: 127.0.0.1\n  port: 9000\n  type: tcp\n\naccess-log: /home/vagrant/access-log\nerror-log: /home/vagrant/error-log\npid-file: /home/vagrant/pid-file\n</code></pre>\n<h1 id=\"public_htmlの作成とindexhtmlの作成\">public_htmlの作成とindex.htmlの作成</h1>\n<pre><code># public_htmlというディレクトリを作成する\n$ mkdir /home/vagrant/public_html\n</code></pre>\n<p>public_htmlにindex.htmlとindex.phpを作成する</p>\n<pre><code class=\"language-index.html\">Hello H2O!\n</code></pre>\n<pre><code class=\"language-index.php\">&lt;?PHP\n    phpinfo();\n</code></pre>\n<h1 id=\"h2oの起動と終了\">H2Oの起動と終了</h1>\n<pre><code># 起動\n$ sudo h2o -m daemon -c h2o.conf\n# 終了\n$ sudo kill -TERM `cat /home/vagrant/pid-file`\n</code></pre>\n<h1 id=\"phpを使えるようにする\">PHPを使えるようにする</h1>\n<h2 id=\"phpenvのインストール\">phpenvのインストール</h2>\n<p>これは\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.sus-happy.net/201506/h2o_php7/#php7-boot\">https://blog.sus-happy.net/201506/h2o_php7/#php7-boot</a>\nを参照に</p>\n<pre><code>$ git clone https://github.com/CHH/phpenv.git\n$ cd phpenv/bin/\n$ sh phpenv-install.sh\n</code></pre>\n<pre><code class=\"language-~/.bashrc\">export PATH=&quot;/home/vagrant/.phpenv/bin:$PATH&quot;\neval &quot;$(phpenv init -)&quot;\n</code></pre>\n<pre><code>$ source ~/.bashrc\n</code></pre>\n<h2 id=\"php-buildのインストール\">php-buildのインストール</h2>\n<p>これも\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.sus-happy.net/201506/h2o_php7/#php7-boot\">https://blog.sus-happy.net/201506/h2o_php7/#php7-boot</a>\nを参照に</p>\n<pre><code>$ git clone https://github.com/CHH/php-build.git\n$ cd php-build/\n$ sudo sh install.sh\n</code></pre>\n<h2 id=\"php7インストール\">PHP7インストール</h2>\n<pre><code>$ php-build --definitions\n5.2.17\n↑\n省略\n↓\n5.6.14\n5.6snapshot\n7.0.0alpha1\n7.0.0alpha2\n7.0.0beta1\n7.0.0beta2\n7.0.0beta3\n7.0.0RC1\n7.0.0RC2\n7.0.0RC3\n7.0.0RC4\n7.0snapshot\nmaster\n</code></pre>\n<p>PHPに必要なライブラリを入れる</p>\n<pre><code># libjpegをインストール\n$ wget http://www.ijg.org/files/jpegsrc.v9a.tar.gz\n$ tar xzf jpegsrc.v9a.tar.gz\n$ ./configure --enable-shared\n$ make\n$ make install\n\n# libpngをインストール\n$ wget http://prdownloads.sourceforge.net/libpng/libpng-1.6.18.tar.gz\n$ tar xzf libpng-1.6.18.tar.gz\n$ cd libpng-1.6.18\n$ ./configure --enable-shared\n$ make\n$ sudo make install\n\n$ cd\n\n# まだ足りないのがあるかも\nUSE=&quot;tidy&quot; emerge php\nUSE=&quot;fpm&quot; emerge php\n</code></pre>\n<p>7.0.0RC4をビルド</p>\n<pre><code>$ sudo php-build 7.0.0RC4 ~/.phpenv/versions/7.0.0RC4\n</code></pre>\n<p>インストールしたことがあるPHPバージョン確認</p>\n<pre><code>$ phpenv versions\n$ php-fpm -v\n# 現在のバージョンを確認する\n</code></pre>\n<p>PHPバージョンを切り替える</p>\n<pre><code>$ phpenv global 7.0.0RC4\n$ php-fpm -v\n# 現在のバージョンを確認する\n</code></pre>\n<p>PHP Config</p>\n<pre><code># php-fpm.confを更新\n$ cp ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.conf.default ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.conf\n# php-fpm.d/www.confも更新\ncp ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.d/www.conf.default ~/.phpenv/versions/7.0.0RC4/etc/php-fpm.d/www.conf \n\n# php-fpmを実行\n~/.phpenv/versions/7.0.0RC4/sbin/php-fpm &amp;\n# エラーが出なければ問題無し\n</code></pre>\n<p>H2Oを起動してindex.htmlとindex.phpを見てみる</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/qiita-export\n/master/data/igara/2015-10-11 20-22-16 [メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。/0-md.png\" alt=\"スクリーンショット 2015-10-12 23.01.28.png\"></p>\n<h1 id=\"laravelのプロジェクトを作成する\">laravelのプロジェクトを作成する</h1>\n<pre><code># composerのインストール\n$ curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n$ composer global require &quot;laravel/installer=~1.1&quot;\n$ laravel new slack_rack_php\n</code></pre>\n<p>h2oのpathsをlaravelのpublicフォルダに変更させる</p>\n<pre><code class=\"language-h2o.conf\">user: vagrant\n\nlisten: 80\n\nhosts:\n &quot;example.com&quot;:\n   paths:\n    /:\n     file.dir: /home/vagrant/slack_rack_php/public\n\nfile.custom-handler:\n extension: .php\n fastcgi.connect:\n  host: 127.0.0.1\n  port: 9000\n  type: tcp\n\naccess-log: /home/vagrant/access-log\nerror-log: /home/vagrant/error-log\npid-file: /home/vagrant/pid-file\n</code></pre>\n\n</div>",
    "link": "/blogs/qiita/[メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]GentooにH2O ＋ PHP7.0.0RC4をインストールする。.png"
    }
  },
  {
    "name": "2015-10-11 18-51-31 [メモ]Vagrantを使ってVMを起動する",
    "publishedAt": "2015-10-11 18-51-31",
    "title": "[メモ]Vagrantを使ってVMを起動する",
    "description": "  VagrantからVMを立ち上げてsshするとこまでまとめる。まず使いたいboxを探してくるvagrant boxはサイトで公開されているものがあるためそちらを利用する。今回は",
    "body": "<div class=\"markdown-body\">\n  <p>VagrantからVMを立ち上げてsshするとこまでまとめる。</p>\n<h1 id=\"まず使いたいboxを探してくる\">まず使いたいboxを探してくる</h1>\n<p>vagrant boxはサイトで公開されているものがあるためそちらを利用する。\n今回はGentooを利用する。</p>\n<pre><code>$ vagrant box add gentoo_amd64 https://dl.dropboxusercontent.com/u/632007/gentoo-systemd-amd64-virtualbox-2015-02-22.box\n</code></pre>\n<p>この時、gentoo_amd64と入力したがこれは自分のローカルで使うboxの名前になる。</p>\n<h1 id=\"vagrantfileの作成\">Vagrantfileの作成</h1>\n<p>VMの設定をVagrantfileに記載することでvagrant up後に設定が反映される。\n※vagrant up後については後記\nVagrantfileを作成したいディレクトリで</p>\n<pre><code>$ vagrant init gentoo_amd64\n</code></pre>\n<p>これでVagrantfileが作成される。</p>\n<h1 id=\"vagrant-up\">vagrant up</h1>\n<pre><code>$ vagrant up\n</code></pre>\n<p>これでいったんはVMが起動される。</p>\n<h1 id=\"vmにsshする\">VMにsshする</h1>\n<pre><code>$ vagrant ssh\n</code></pre>\n<p>便利そうなことを書き足す形式でこの投稿を更新しよう</p>\n\n</div>",
    "link": "/blogs/qiita/[メモ]Vagrantを使ってVMを起動する",
    "ogp": {
      "large": "/ogp/1200x630/blogs/qiita/[メモ]Vagrantを使ってVMを起動する.png",
      "small": "/ogp/630x630/blogs/qiita/[メモ]Vagrantを使ってVMを起動する.png"
    }
  }
]