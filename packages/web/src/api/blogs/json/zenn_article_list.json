[
  {
    "name": "add_custom_stylelint_eslint",
    "title": "ESLintのルール新規追加、Stylelintのルール追加しました 補足",
    "publishedAt": "2022-06-18 18-22-39",
    "description": "https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-17  の「ESLintのルール新規追加、Stylelintのル",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22eslint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E6%96%B0%E8%A6%8F%E8%BF%BD%E5%8A%A0%E3%80%81stylelint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-%E8%A3%9C%E8%B6%B3%22emoji%3A-%22%E2%9C%85%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22eslint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22eslint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E6%96%B0%E8%A6%8F%E8%BF%BD%E5%8A%A0%E3%80%81stylelint%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F-%E8%A3%9C%E8%B6%B3%22emoji%3A-%22%E2%9C%85%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22eslint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;ESLintのルール新規追加、Stylelintのルール追加しました 補足&quot;<br>\nemoji: &quot;✅&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;sass&quot;, &quot;stylelint&quot;, &quot;eslint&quot;, &quot;emotion&quot;, &quot;lancers&quot;]<br>\npublished: true</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fengineer.blog.lancers.jp%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%25AE%259A%25E4%25BE%258B-2022-6-17\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://engineer.blog.lancers.jp/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E5%AE%9A%E4%BE%8B-2022-6-17\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-17</a></p>\n<p>の「ESLintのルール新規追加、Stylelintのルール追加しました」の記事に対しての補足記事になります。</p>\n<p>最初に記事の足りない箇所の補足をした上で、<br>\nLintのコードの内容や開発をどのように進めているのかなども記載したいと思います。</p>\n<h2 id=\"%E8%A8%98%E4%BA%8B%E3%81%AE%E8%A3%9C%E8%B6%B3\"><a class=\"header-anchor-link\" href=\"#%E8%A8%98%E4%BA%8B%E3%81%AE%E8%A3%9C%E8%B6%B3\" aria-hidden=\"true\"></a> 記事の補足</h2>\n<h3 id=\"%3E-stylelint%E3%81%A8%E3%81%AF%E5%88%A5%E3%81%A7eslint%E3%81%A7%E3%82%82%E4%BD%9C%E6%88%90%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E7%90%86%E7%94%B1%E3%81%A8%E3%81%97%E3%81%A6css-in-js%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E9%81%A9%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%8Ccss%2C-sass%E3%81%A8%E3%81%AF%E7%95%B0%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81eslint%E3%81%A7%E3%82%82%E5%90%8C%E6%A7%98%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\"><a class=\"header-anchor-link\" href=\"#%3E-stylelint%E3%81%A8%E3%81%AF%E5%88%A5%E3%81%A7eslint%E3%81%A7%E3%82%82%E4%BD%9C%E6%88%90%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E7%90%86%E7%94%B1%E3%81%A8%E3%81%97%E3%81%A6css-in-js%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E9%81%A9%E5%BF%9C%E6%96%B9%E6%B3%95%E3%81%8Ccss%2C-sass%E3%81%A8%E3%81%AF%E7%95%B0%E3%81%AA%E3%82%8B%E3%81%9F%E3%82%81eslint%E3%81%A7%E3%82%82%E5%90%8C%E6%A7%98%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\" aria-hidden=\"true\"></a> &gt; Stylelintとは別でESLintでも作成しようとした理由としてCSS in JSによるスタイルの適応方法がCSS, SASSとは異なるためESLintでも同様のルールの追加をしています。</h3>\n<p>実際のSassとTypeScriptによるReactでのCSS in JSでの変数適応の例を見ると</p>\n<div class=\"code-block-container\"><pre class=\"language-sass\"><code class=\"language-sass\"><span class=\"token selector\">.hoge {</span>\n<span class=\"token property-line\">  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$colorWhite</span>;</span>\n<span class=\"token selector\">}</span>\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Color <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@design_system'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hogeCSS <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Color<span class=\"token punctuation\">.</span>White<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>上記のようにSassでは <code>$xxx</code>、TypeScriptでは <code>${xxx}</code> と構文上の違いがあり、<br>\nStylelintではSassをESLint側はCSS in JSをメインにしてルールを記載しようとなった背景があります。</p>\n<p>前回はSassに対してのStylelintの適応の話しかしてなかったのでTypeScript側ではどういった色の管理しているのか触れてなかったのですが、<br>\n基本はSassの値を参照で間にWebpackとcss-loaser経由での<a href=\"https://github.com/css-modules/icss#import\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modulesの:import</a>によるSassの変数をTypeScriptでも使えるようなやり方で現状は適応してたりします。</p>\n<h3 id=\"%3E-figma%E3%81%A8%E3%81%8B%E3%81%AB%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bpx%E3%82%84%E8%89%B2%E3%81%AE%E7%89%A9%E7%90%86%E7%9A%84%E3%81%AA%E5%80%A4\"><a class=\"header-anchor-link\" href=\"#%3E-figma%E3%81%A8%E3%81%8B%E3%81%AB%E5%AE%9A%E7%BE%A9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bpx%E3%82%84%E8%89%B2%E3%81%AE%E7%89%A9%E7%90%86%E7%9A%84%E3%81%AA%E5%80%A4\" aria-hidden=\"true\"></a> &gt; Figmaとかに定義されているpxや色の物理的な値</h3>\n<p>Figma上で親パーツとの間隔を調べるときにAlt (Option)を押しながらマウスカーソルを当てて表示されている数値をそのまま貼ればVSCodeで補完の候補が出てくるので都度定義ファイルを開いて適切な変数名を調べる必要がなくなりました。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/add_custom_stylelint_eslint/figma_padding.jpg\" alt=\"\"></p>\n<p>色についてもFigma上に表示されている値をクリックしてコピれるのでそのまま貼り付けしてあとは補完に任せれば良い環境になっています。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/add_custom_stylelint_eslint/figma_color.jpg\" alt=\"\"></p>\n<h3 id=\"%3E-%E4%BB%96%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%82%82%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E5%90%AB%E3%82%81%E3%81%A6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84\"><a class=\"header-anchor-link\" href=\"#%3E-%E4%BB%96%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%82%82%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90%E5%90%AB%E3%82%81%E3%81%A6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84\" aria-hidden=\"true\"></a> &gt; 他のプロジェクトでも静的解析含めてデザインシステムライブラリを使っていくようにしていきたい</h3>\n<p>直近、自分が関わっているプロジェクト以外では適応がまだできていないので時間あるときに適応したいですね。<br>\n自分が適応するのではなく、ビルドに影響しないLintの設定なのでPRで他のプロジェクトにも適応しましたというのがあったら結構嬉しかったりします。</p>\n<p>個人的問題ですが拡散したものの布教されるまでにどうしても時間がかかってしまうのが個人的な悩みだったりしますね。<br>\n（職務範囲の問題とかもあるのでそこまで踏み込んでもよいのだろうかというのはたまに思うところ）<br>\n誰がやるやら問題ともいってます。</p>\n<h2 id=\"%E3%82%B3%E3%83%BC%E3%83%89%E8%AA%AC%E6%98%8E\"><a class=\"header-anchor-link\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E8%AA%AC%E6%98%8E\" aria-hidden=\"true\"></a> コード説明</h2>\n<h3 id=\"stylelint\"><a class=\"header-anchor-link\" href=\"#stylelint\" aria-hidden=\"true\"></a> Stylelint</h3>\n<p>プロジェクトの構成はほぼこれ<br>\n<a href=\"https://zenn.dev/jj/scraps/42157938c9eb48\" target=\"_blank\">stylelint-pluginを作ってみる会</a></p>\n<h4 id=\"%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89\"><a class=\"header-anchor-link\" href=\"#%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89\" aria-hidden=\"true\"></a> 実装コード</h4>\n<p>ルールを記載している index.js の内容として下記になります。<br>\nコードのコメント上で説明します</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">index.js</span></div><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stylelint <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stylelint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorsJSON <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/colors.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> spacingJSON <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/spacing.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ruleName <span class=\"token operator\">=</span> <span class=\"token string\">'@lancers/design-guideline'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">ruleMessages</span><span class=\"token punctuation\">(</span>ruleName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">expected</span><span class=\"token operator\">:</span> <span class=\"token string\">'Expected...'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 現状はpadding, padding-[top,...],margin,margin-[top,...],grid-gap,gapなどの間隔を対象にしている\n */</span>\n<span class=\"token keyword\">const</span> spacingPropReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S*padding\\S*|\\S*margin\\S*|\\S*gap\\S*)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * #のカラーコード以外に$などの変数も対象にしている\n * colors.jsonには変数名-カラーコードの情報も保存しているので\n * 適当なSass変数による色適応を許可しないようにした\n */</span>\n<span class=\"token keyword\">const</span> colorReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(#|\\$)[0-9a-zA-Z]*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * px以外に$などの変数も対象にしている\n * spacing.jsonも同様に変数名-pxの情報も保存しているので\n * 適当なSass変数によるpx適応を許可しないようにした\n */</span>\n<span class=\"token keyword\">const</span> spacingReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]*px|\\$[0-9a-zA-Z]*)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkColors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// CSSでいうpaddingなどのstyle属性をpropで扱っている</span>\n  <span class=\"token keyword\">const</span> prop <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spacingPropReg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 上記の条件はスキップ</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// decl.valueはstyle属性に対しての指定された値を扱っている</span>\n  <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>colorReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// カラーコード・変数名のマッチがあるか</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> colorsJSON<span class=\"token punctuation\">[</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> colorsJSON<span class=\"token punctuation\">[</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined color rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see colors.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// color.sassはJSONにあるSass用の変数を示している</span>\n  <span class=\"token keyword\">const</span> definedColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>sass<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチした場合は変数名を提案する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>messages<span class=\"token punctuation\">.</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see colors.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkSpacing</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// CSSでいうpaddingなどのstyle属性をpropで扱っている</span>\n  <span class=\"token keyword\">const</span> prop <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spacingPropReg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 上記の条件以外はスキップ</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// decl.valueはstyle属性に対しての指定された値を扱っている</span>\n  <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> decl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>spacingReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// px・変数名のマッチがあるか</span>\n  <span class=\"token keyword\">const</span> spacing <span class=\"token operator\">=</span> spacingJSON<span class=\"token punctuation\">[</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined spacing rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see spacing.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// spacing.sassはJSONにあるSass用の変数を示している</span>\n  <span class=\"token keyword\">const</span> definedSpacing <span class=\"token operator\">=</span> spacing<span class=\"token punctuation\">.</span>sass<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedSpacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// マッチした場合は変数名を提案する</span>\n    stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      ruleName<span class=\"token punctuation\">,</span>\n      result<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>messages<span class=\"token punctuation\">.</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedSpacing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see spacing.scss]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> decl<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> stylelint<span class=\"token punctuation\">.</span><span class=\"token function\">createPlugin</span><span class=\"token punctuation\">(</span>ruleName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> validOptions <span class=\"token operator\">=</span> stylelint<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">validateOptions</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> ruleName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">walkDecls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">decl</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * 現状1つのStylelintのプラグインで色、間隔のルールチェックをしているので分けるべきなんだろうけど\n       * 複数のルールとしてStylelintのプロジェクト分けるのにもためらっている\n       */</span>\n      <span class=\"token function\">checkColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">checkSpacing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> decl<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>ruleName <span class=\"token operator\">=</span> ruleName<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>messages <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">;</span>\n</code></pre></div><h4 id=\"%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\"><a class=\"header-anchor-link\" href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\" aria-hidden=\"true\"></a> テストコード</h4>\n<p>検証として実施済みのテストコードとして下記のものになります。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">index.test.js</span></div><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ruleName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">testRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  ruleName<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">fix</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">accept</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: $colorWhite;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">reject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: #fff;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) #fff -> $colorWhite [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: #FFF;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) #FFF -> $colorWhite [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: #123456;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined color rule: #123456 -> ??? [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        color: $hoge;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined color rule: $hoge -> ??? [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding: 99px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined spacing rule: 99px -> ??? [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding: $hoge;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'undefined spacing rule: $hoge -> ??? [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        padding-top: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin-bottom: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        raw-gap: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        gap: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        grid-gap: 64px;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">'Expected... (@lancers/design-guideline) 64px -> $spacingXXXL [see spacing.scss]'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.class {\n        margin: 0;\n        border: 1px dashed #fff;\n      }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">warnings</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">column</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">endColumn</span><span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">endLine</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">line</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">rule</span><span class=\"token operator\">:</span> <span class=\"token string\">'@lancers/design-guideline'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">severity</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span>\n            <span class=\"token string\">'Expected... (@lancers/design-guideline) #fff -> $colorWhite [see colors.scss]'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>テスト実行はVSCodeのデバック実行機能から実行するように下記のlaunch.jsonを保存させてテストしやすい感じで実施してました。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">launch.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stylelint:design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}/lint/stylelint-plugin-design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"runtimeArgs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"--inspect-brk\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"${workspaceRoot}/lint/stylelint-plugin-design-guideline/node_modules/.bin/jest\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"--runInBand\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integratedTerminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"internalConsoleOptions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"neverOpen\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9229</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3 id=\"eslint\"><a class=\"header-anchor-link\" href=\"#eslint\" aria-hidden=\"true\"></a> ESLint</h3>\n<p>プロジェクト構成はこの方の記事がものすごく近いです</p>\n<p>書いて覚える ESLint ルールの作り方</p>\n<p><a href=\"https://qiita.com/kik4/items/a6d0dc2f8ab5ce50f97d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript版</a><br>\n<a href=\"https://qiita.com/kik4/items/ef30d5e0e24dabb81463\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript版</a></p>\n<p>若干の違いが自分の方はテストライブラリをJestを採用しているぐらいの差分だと思います。</p>\n<h4 id=\"%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89-1\"><a class=\"header-anchor-link\" href=\"#%E5%AE%9F%E8%A3%85%E3%82%B3%E3%83%BC%E3%83%89-1\" aria-hidden=\"true\"></a> 実装コード</h4>\n<p>追加したルールのコードのコメント上で説明します。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/index.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * このファイルをバレルのように扱っている\n * ルールを追加した際はこちらにもimportを記載する\n */</span>\n<span class=\"token keyword\">import</span> emotionColors <span class=\"token keyword\">from</span> <span class=\"token string\">'./rules/emotionColors'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> emotionSpacing <span class=\"token keyword\">from</span> <span class=\"token string\">'./rules/emotionSpacing'</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    emotionColors<span class=\"token punctuation\">,</span>\n    emotionSpacing<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  configs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    all<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'design-guideline'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        emotionColors<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n        emotionSpacing<span class=\"token operator\">:</span> <span class=\"token string\">'warn'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/util.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * 共通の変数まとめた\n */</span>\n\n<span class=\"token comment\">/**\n * css``やstyled.div``などの書き方を対象にしている\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> cssInJSReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(css|styled.[a-zA-Z]*)`</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * カラーコード以外に${xxx}という変数の書き方も対象にしている\n * 若干正規表現が怪しいがライブラリ経由のカラーコード呼び出しは\n * ${Color.xxx}な形式だから現状カバーできているがより厳密に書いたほうがよさそう\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> colorReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(#[0-9a-zA-Z]*|\\${[0-9a-zA-Z]*})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Stylelint側と同様の間隔の対象にしている\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> spacingPropReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S*padding\\S*|\\S*margin\\S*|\\S*gap\\S*): .*?;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * px以外に${xxx}という変数の書き方も対象にしている\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> spacingReg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]*px|\\${[0-9a-zA-Z]*})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionColors.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Rule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> colorReg<span class=\"token punctuation\">,</span> cssInJSReg <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colorsJSON <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/colors.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> emotionColors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'suggestion'</span><span class=\"token punctuation\">,</span>\n    docs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'@lancers/design_guideline共通の使用する色指定ルール'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    fixable<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * const, varなどの変数を定義した箇所に対してのルールを追加する\n       * nodeの対象は変数定義の箇所\n       */</span>\n      <span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * context.getSourceCode ファイルの全体のソースを扱っている\n         */</span>\n        <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cssInJSReg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// emotionなどのStyle指定ではない場合はスキップ</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> matched <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>colorReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> matcheString <span class=\"token operator\">=</span> matched<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span>\n          colorsJSON<span class=\"token punctuation\">[</span>matcheString<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> colorsJSON<span class=\"token punctuation\">[</span>matcheString<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined color rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matcheString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see utils/Color/index.ts(colors.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> definedColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>script<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチした場合は候補を提案する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matcheString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedColor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see utils/Color/index.ts(colors.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">/**\n             * eslint --fix実行時に対象の箇所を自動で修正するための関数\n             */</span>\n            <span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>fixer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n\n              <span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 文字列置換</span>\n              <span class=\"token keyword\">const</span> fixedCode <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>matcheString<span class=\"token punctuation\">,</span> definedColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// 実際のソースコード上にも文字列置換を反映する</span>\n              <span class=\"token keyword\">return</span> fixer<span class=\"token punctuation\">.</span><span class=\"token function\">replaceText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> fixedCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Rule<span class=\"token punctuation\">.</span>RuleModule<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> emotionColors<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emotionColors<span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionSpacing.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Rule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> spacingPropReg<span class=\"token punctuation\">,</span> spacingReg <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./util'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> spacingJSON <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@lancers/design_guideline/scripts/spacing.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> emotionSpacing <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'suggestion'</span><span class=\"token punctuation\">,</span>\n    docs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'@lancers/design_guideline共通の間隔のpx指定ルール'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    fixable<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * const, varなどの変数を定義した箇所に対してのルールを追加する\n       * nodeの対象は変数定義の箇所\n       */</span>\n      <span class=\"token function\">VariableDeclaration</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * context.getSourceCode ファイルの全体のソースを扱っている\n         */</span>\n        <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> propMatch <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>spacingPropReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>propMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> propString <span class=\"token operator\">=</span> propMatch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> pxMatch <span class=\"token operator\">=</span> propString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>spacingReg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pxMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> pxString <span class=\"token operator\">=</span> pxMatch<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> spacing <span class=\"token operator\">=</span> spacingJSON<span class=\"token punctuation\">[</span>pxString<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>spacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチがない場合は未定義のものとして注意する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">undefined spacing rule: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pxString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> ??? [see utils/Spacing/index.ts(spacing.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> definedSpacing <span class=\"token operator\">=</span> spacing<span class=\"token punctuation\">.</span>script<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>definedSpacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// マッチした場合は候補を提案する</span>\n          context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pxString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> -> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>definedSpacing<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [see utils/Spacing/index.ts(spacing.scss)]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">/**\n             * eslint --fix実行時に対象の箇所を自動で修正するための関数\n             */</span>\n            <span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>fixer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> scope <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n\n              <span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 文字列置換</span>\n              <span class=\"token keyword\">const</span> fixedProp <span class=\"token operator\">=</span> propString<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>pxString<span class=\"token punctuation\">,</span> definedSpacing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">const</span> fixedCode <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>propString<span class=\"token punctuation\">,</span> fixedProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// 実際のソースコード上にも文字列置換を反映する</span>\n              <span class=\"token keyword\">return</span> fixer<span class=\"token punctuation\">.</span><span class=\"token function\">replaceText</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> fixedCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Rule<span class=\"token punctuation\">.</span>RuleModule<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> emotionSpacing<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> emotionSpacing<span class=\"token punctuation\">;</span>\n</code></pre></div><h4 id=\"%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89-1\"><a class=\"header-anchor-link\" href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89-1\" aria-hidden=\"true\"></a> テストコード</h4>\n<p>検証として実施済みのテストコードとして下記のものになります。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionColors.test.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RuleTester <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> emotionColors <span class=\"token keyword\">from</span> <span class=\"token string\">'./emotionColors'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ruleTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nruleTester<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emotionColors'</span><span class=\"token punctuation\">,</span> emotionColors<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 成功ケース</span>\n  valid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${Color.White};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// CSSinJS的な書き方ではないのでセーフ</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = `color: ${hoge};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`${MediaQuery.mqsp} { color: ${Color.White}; }`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 失敗ケース</span>\n  invalid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: #fff;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'#fff -> ${Color.White} [see utils/Color/index.ts(colors.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${Color.White};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: #D1D1D1;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'#D1D1D1 -> ${Color.Grey30} [see utils/Color/index.ts(colors.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${Color.Grey30};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`color: ${hoge};`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined color rule: ${hoge} -> ??? [see utils/Color/index.ts(colors.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">src/rules/emotionSpacing.test.ts</span></div><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RuleTester <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'eslint'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-var-requires</span>\n<span class=\"token keyword\">import</span> emotionSpacing <span class=\"token keyword\">from</span> <span class=\"token string\">'./emotionSpacing'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ruleTester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token string\">'latest'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    es6<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    browser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nruleTester<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emotionSpacing'</span><span class=\"token punctuation\">,</span> emotionSpacing<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 成功ケース</span>\n  valid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: ${Spacing.xxxs};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`border: 1px solid ${Color.Grey30};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 失敗ケース</span>\n  invalid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: 8px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'8px -> ${Spacing.xxs} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: ${Spacing.xxs};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: 9px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined spacing rule: 9px -> ??? [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin: 9px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined spacing rule: 9px -> ??? [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin: ${hoge};`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'undefined spacing rule: ${hoge} -> ??? [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'64px -> ${Spacing.xxxl} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding: ${Spacing.xxxl};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding-top: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'64px -> ${Spacing.xxxl} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`padding-top: ${Spacing.xxxl};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin-left: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'64px -> ${Spacing.xxxl} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`margin-left: ${Spacing.xxxl};`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`grid-column-gap: 12px; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'12px -> ${Spacing.xs} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span>\n        <span class=\"token string\">'var style = css`grid-column-gap: ${Spacing.xs}; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`gap: 12px; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'12px -> ${Spacing.xs} [see utils/Spacing/index.ts(spacing.scss)]'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      output<span class=\"token operator\">:</span> <span class=\"token string\">'var style = css`gap: ${Spacing.xs}; padding: 64px;`;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>Stylelintと同様にテスト実行はVSCodeのデバック実行機能から実行するように下記のlaunch.jsonを保存させてテストしやすい感じで実施してました。</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">launch.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint:design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}/lint/eslint-plugin-design-guideline\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"runtimeArgs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"--experimental-modules\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"--inspect-brk\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"${workspaceRoot}/lint/eslint-plugin-design-guideline/node_modules/.bin/jest\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"--runInBand\"</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integratedTerminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"internalConsoleOptions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"neverOpen\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9229</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2 id=\"stylelint%E3%81%A8eslint%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\"><a class=\"header-anchor-link\" href=\"#stylelint%E3%81%A8eslint%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\" aria-hidden=\"true\"></a> StylelintとESLintの拡張を書いてみての感想</h2>\n<p>全体的に正規表現で頑張っている感は正直否めないとこだと思います。<br>\nLintの対象範囲についてはCSS限定にかけるStylelintは書きやすい反面、どうしてもESLintは変数の定義としてのスコープとなってしまうのでStyle属性に絞りこむにはどうしたら良いのか？となることが多かったです。<br>\nESLint側のみfixによるコードの変更対応をすすめましたが置換の範囲を間違えると既存のソースが消えることがあり完成するまでが大変でした。<br>\n引き続きルールの拡張を進めるのとともに定着化を進めていきたいと思います。</p>\n\n</div>",
    "link": "/blogs/zenn/ESLintのルール新規追加、Stylelintのルール追加しました 補足",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/ESLintのルール新規追加、Stylelintのルール追加しました 補足.png",
      "small": "/ogp/630x630/blogs/zenn/ESLintのルール新規追加、Stylelintのルール追加しました 補足.png"
    }
  },
  {
    "name": "custom_stylelint",
    "title": "独自のStylelint拡張をかいた 補足 共通のカラーコード参照",
    "publishedAt": "2022-06-05 05-17-39",
    "description": "https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-3  の「独自のStylelint拡張をかいた」の記事に対しての",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22%E7%8B%AC%E8%87%AA%E3%81%AEstylelint%E6%8B%A1%E5%BC%B5%E3%82%92%E3%81%8B%E3%81%84%E3%81%9F-%E8%A3%9C%E8%B6%B3-%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E5%8F%82%E7%85%A7%22emoji%3A-%22%F0%9F%8E%A8%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22%E7%8B%AC%E8%87%AA%E3%81%AEstylelint%E6%8B%A1%E5%BC%B5%E3%82%92%E3%81%8B%E3%81%84%E3%81%9F-%E8%A3%9C%E8%B6%B3-%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E5%8F%82%E7%85%A7%22emoji%3A-%22%F0%9F%8E%A8%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22sass%22%2C-%22stylelint%22%2C-%22emotion%22%2C-%22lancers%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;独自のStylelint拡張をかいた 補足 共通のカラーコード参照&quot;<br>\nemoji: &quot;🎨&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;sass&quot;, &quot;stylelint&quot;, &quot;emotion&quot;, &quot;lancers&quot;]<br>\npublished: true</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fengineer.blog.lancers.jp%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%2F%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%25AE%259A%25E4%25BE%258B-2022-6-3\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://engineer.blog.lancers.jp/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E5%AE%9A%E4%BE%8B-2022-6-3\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://engineer.blog.lancers.jp/フロントエンド/フロントエンド定例-2022-6-3</a></p>\n<p>の「独自のStylelint拡張をかいた」の記事に対しての補足記事になります。<br>\n定例中は社内での画面共有で伝わるやろという雰囲気感でやっていたので外向けに説明不十分な箇所の追記になります。</p>\n<p>なぜ補足をZennで書こうとしたかというと他にも伝わってなさそうなことをZennのコメントで拾えそうかなと思ったからです。</p>\n<h2 id=\"%3E-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F%E4%B8%8A%E3%81%A7%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AA%E3%81%A9%E3%82%82%E5%AE%9A%E6%95%B0%E5%8C%96%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%80%A4%E5%8F%82%E7%85%A7%E3%82%92%E5%85%B1%E9%80%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%AD%A6%E5%91%8A%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B%E5%AF%BE%E5%BF%9C%E3%82%92%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\"><a class=\"header-anchor-link\" href=\"#%3E-%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F%E4%B8%8A%E3%81%A7%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AA%E3%81%A9%E3%82%82%E5%AE%9A%E6%95%B0%E5%8C%96%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A7%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%80%A4%E5%8F%82%E7%85%A7%E3%82%92%E5%85%B1%E9%80%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%AD%A6%E5%91%8A%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B%E5%AF%BE%E5%BF%9C%E3%82%92%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\" aria-hidden=\"true\"></a> &gt; デザインシステムを進めていく上でカラーコードなども定数化されているのでコードの値参照を共通のファイルからするように警告を表示させる対応をしました。</h2>\n<blockquote>\n<p>カラーコードなども定数化</p>\n</blockquote>\n<blockquote>\n<p>コードの値参照を共通のファイル</p>\n</blockquote>\n<p>カラーコードは1つのSASSファイルにまとめています。<br>\n内容として</p>\n<div class=\"code-block-container\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/**\n * colors\n */</span>\n<span class=\"token comment\">/* stylelint-disable @lancers/design-guideline */</span>\n<span class=\"token property\"><span class=\"token variable\">$colorWhite</span></span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n...\n<span class=\"token comment\">/* stylelint-enable @lancers/design-guideline */</span>\n</code></pre></div><p>上記のような記載の共通のカラーコード定義ファイルを作成しています。<br>\nstylelint-disableのコメント入れているのはStylelintの自身が作成したルールで検出されてしまうので回避として意図的に無効化してます。<br>\nこのSASSファイルはSASSの@importを経由にしてグローバル展開するような使い方の想定で使用しています。</p>\n<p><a href=\"https://sass-lang.com/blog/the-module-system-is-launched#future-plans\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">今後の計画</a> もあるので今後もSASSを採用するかというと微妙なとこですが</p>\n<h2 id=\"%3E-const-colorsjson-%3D-require('%40lancers%2Fdesign_guideline%2Fscripts%2Fcolors.json')%3B\"><a class=\"header-anchor-link\" href=\"#%3E-const-colorsjson-%3D-require('%40lancers%2Fdesign_guideline%2Fscripts%2Fcolors.json')%3B\" aria-hidden=\"true\"></a> &gt; const colorsJSON = require('@lancers/design_guideline/scripts/colors.json');</h2>\n<p>1つにまとめたカラーコードのSASSファイルをJSONファイル化するための仕組みがあります。</p>\n<p>下記のような正規表現で抽出した処理のScriptをビルド時に実行してカラーコードをJSON化してStylelintでの参照するカラーコードも更新するようにしています。</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-var-requires</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colorsSASS <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/../src/styles/colors.scss</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'utf8'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorsMatch <span class=\"token operator\">=</span> colorsSASS<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">color.*: #.*;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> colors <span class=\"token operator\">=</span> colorsMatch<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>colorsText<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> colorsText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">': '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  acc<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  acc<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/colors.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>個人的にはJSONファイルがいろんなもので扱いやすくていいのかなと思ってます。<br>\n型的には最初からTypeScriptとしても出しておけばというのはありますね。</p>\n<h2 id=\"%3E-%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98%E3%81%AE%E5%AE%9F%E8%A3%85%E6%84%9F%E8%A6%9A%E3%81%A7%E9%80%B2%E3%82%81%E3%82%89%E3%82%8C%E3%81%9F%E3%81%AE%E3%81%A7%E4%BB%96%E3%81%AB%E5%85%B1%E9%80%9A%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%81%84%E9%96%A2%E6%95%B0%E3%81%AA%E3%81%A9%E3%82%82%E6%8B%A1%E5%BC%B5%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\"><a class=\"header-anchor-link\" href=\"#%3E-%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98%E3%81%AE%E5%AE%9F%E8%A3%85%E6%84%9F%E8%A6%9A%E3%81%A7%E9%80%B2%E3%82%81%E3%82%89%E3%82%8C%E3%81%9F%E3%81%AE%E3%81%A7%E4%BB%96%E3%81%AB%E5%85%B1%E9%80%9A%E3%81%A7%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%81%84%E9%96%A2%E6%95%B0%E3%81%AA%E3%81%A9%E3%82%82%E6%8B%A1%E5%BC%B5%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%84%E3%81%8D%E3%81%9F%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82\" aria-hidden=\"true\"></a> &gt; こんな感じの実装感覚で進められたので他に共通で使用したい関数なども拡張に入れていきたいと思います。</h2>\n<blockquote>\n<p>他に共通で使用したい関数</p>\n</blockquote>\n<p>同定例で <a href=\"https://twitter.com/high_g_engineer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@high_g_engineer</a> が言ってたpadding, margin, line-heightとかの間隔を8の倍数px指定を定数化とlint化するとか。</p>\n<p>共通のmedia queryの省略したようなのを関数化するとか。</p>\n<h2 id=\"%3E-%40stylelint%2Fpostcss-css-in-js-%E3%81%AB%E3%82%88%E3%82%8Bemotion%E3%81%A7%E3%81%AEstylelint%E3%82%82%E6%A4%9C%E8%A8%8E%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%81%8Ceslint-(typescript)%E3%81%A7%E3%81%AE%E6%A4%9C%E7%9F%A5%E3%82%82%E5%8F%AF%E8%83%BD%E3%81%AA%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%97%E3%82%88%E3%81%86%E3%81%8B%E3%81%AA%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\"><a class=\"header-anchor-link\" href=\"#%3E-%40stylelint%2Fpostcss-css-in-js-%E3%81%AB%E3%82%88%E3%82%8Bemotion%E3%81%A7%E3%81%AEstylelint%E3%82%82%E6%A4%9C%E8%A8%8E%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%81%8Ceslint-(typescript)%E3%81%A7%E3%81%AE%E6%A4%9C%E7%9F%A5%E3%82%82%E5%8F%AF%E8%83%BD%E3%81%AA%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%97%E3%82%88%E3%81%86%E3%81%8B%E3%81%AA%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\" aria-hidden=\"true\"></a> &gt; @stylelint/postcss-css-in-js によるemotionでのStylelintも検討しましたがESLint (TypeScript)での検知も可能な状態にしようかなと思います</h2>\n<p>なぜemotionをそのままStylelint適応検討ではなくESLint側でやろうと思ったのか？</p>\n<p>-&gt; <a href=\"https://github.com/emotion-js/emotion/discussions/2694\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">このディスカッションの今後</a>が気になるからです。</p>\n<p>どういった方針になるかわからないですがおそらくしばらく動きはないんだろうと思ってます。<br>\n貢献のチャンスかも知れませんが僕自身は下記の対応が早そうと思いましたのでそっ閉じしてます。</p>\n<p>ESLintでも下記みたいな定義があったとき</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> style1 <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: #FFF;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> style2 <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>colorWhite<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>代入する値の検証を正規表現頑張ればいけなくない？（エアプ）と思っているのでESLint側で直近は解決させようかなと思いました。</p>\n<p>TypeScriptとStylelintの混合は難しいのかな？とふんわり思ってたりもします。</p>\n\n</div>",
    "link": "/blogs/zenn/独自のStylelint拡張をかいた 補足 共通のカラーコード参照",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/独自のStylelint拡張をかいた 補足 共通のカラーコード参照.png",
      "small": "/ogp/630x630/blogs/zenn/独自のStylelint拡張をかいた 補足 共通のカラーコード参照.png"
    }
  },
  {
    "name": "split_monolith",
    "title": "モノリス分離したいのでモノレポ化にする考察",
    "publishedAt": "2022-03-24 24-18-08",
    "description": "最近の仕事で思うのがソースが一箇所に集中しつつありながらもちょっとマイクロサービス意識して別アプリケーションのディレクトリ切ってみて結果的にソースや設計思想も散らばってて辛いという",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%97%E3%81%9F%E3%81%84%E3%81%AE%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E5%8C%96%E3%81%AB%E3%81%99%E3%82%8B%E8%80%83%E5%AF%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22idea%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22monolith%22%2C-%22monorepo%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%97%E3%81%9F%E3%81%84%E3%81%AE%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E5%8C%96%E3%81%AB%E3%81%99%E3%82%8B%E8%80%83%E5%AF%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22idea%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22monolith%22%2C-%22monorepo%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;モノリス分離したいのでモノレポ化にする考察&quot;<br>\nemoji: &quot;💬&quot;<br>\ntype: &quot;idea&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;monolith&quot;, &quot;monorepo&quot;]<br>\npublished: true</h2>\n<p>最近の仕事で思うのがソースが一箇所に集中しつつありながらもちょっとマイクロサービス意識して別アプリケーションのディレクトリ切ってみて結果的にソースや設計思想も散らばってて辛いというのがあるのでどう分割すると良さそうなのかというのを考えてみた</p>\n<h2 id=\"%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98\"><a class=\"header-anchor-link\" href=\"#%E4%BA%8B%E5%89%8D%E7%9F%A5%E8%AD%98\" aria-hidden=\"true\"></a> 事前知識</h2>\n<p>zennでモノレポの記事漁っててHimenonさんの記事がまとまってて結構すき</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fzenn.dev%2Fhimenon%2Farticles%2F3d0e3480391c31\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://zenn.dev/himenon/articles/3d0e3480391c31\" style=\"display: none\" target=\"_blank\">https://zenn.dev/himenon/articles/3d0e3480391c31</a><br style=\"display: none\">\n(記事移動先: <a href=\"https://himenon.github.io/docs/javascript/comparison-of-package-layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://himenon.github.io/docs/javascript/comparison-of-package-layout</a>)</p>\n<h3 id=\"%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9\"><a class=\"header-anchor-link\" href=\"#%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9\" aria-hidden=\"true\"></a> モノリス</h3>\n<p>Himenonさんの記事にない個人的なGood / Bad述べると（似たような意見になるかもしれない）</p>\n<ul>\n<li>\n<p>Good</p>\n<ul>\n<li>git cloneが1つのレポジトリで完結する\n<ul>\n<li>GitHubでのやりとりもこのレポジトリで完結する</li>\n<li>GitHubの管理者が限定されている場合とかは容易</li>\n</ul>\n</li>\n<li>責任から外れたコードも流し見できる\n<ul>\n<li>いっぱい勉強できるぞという点でGood</li>\n<li>Webフロントエンド・サーバサイドのソースも一緒になっているときはアプリケーション全体が把握できるかもしれない</li>\n<li>一見作業の影響外と思ったものを検知できるとか\n<ul>\n<li>Badに表裏一体にある問題ではあるが共通の処理が変更するのでという合意があるのなら問題にすらならない事柄かも</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>コードが別管理で散らばることがない\n<ul>\n<li>1つしかないのでそれはそう</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Bad</p>\n<ul>\n<li>CI系のタスクの設置が複雑になる\n<ul>\n<li>必要なとこの作業だけでもユニットテストに時間かかる問題</li>\n</ul>\n</li>\n<li>完全に責任外のコードが見える\n<ul>\n<li>grap作業のノイズになりがち</li>\n</ul>\n</li>\n<li>git cloneにかける時間が増大する\n<ul>\n<li>必要なとこの作業だけでも環境構築に時間がかかるとか</li>\n<li>git pack objects 肥大化問題</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D\"><a class=\"header-anchor-link\" href=\"#%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D\" aria-hidden=\"true\"></a> モノレポ</h3>\n<p>同様に個人的なGood / Bad述べると</p>\n<ul>\n<li>\n<p>Good</p>\n<ul>\n<li>CI系のタスクの設置が最小限になる</li>\n<li>作業に必要な環境構築が最小になる\n<ul>\n<li>つまみ食い感覚で必要なソースをgit cloneするのは結構すき</li>\n</ul>\n</li>\n<li>モノレポの1部は全く別のプロジェクトのライブラリとして使用することも可能な場合もある</li>\n</ul>\n</li>\n<li>\n<p>Bad</p>\n<ul>\n<li>デプロイが複雑になる\n<ul>\n<li>モノレポ間での更新順番を作る必要がでてくる\n<ul>\n<li>作業者間の更新タイミングが難しい</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作業が変わったときなど都度、構築する必要が出てくる\n<ul>\n<li>GitHubの管理者が限定されている場合とかは面倒\n<ul>\n<li>モノリス分離することをためらわれる要因では？</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>共通化を意識しないとコードが散らばりがち</li>\n<li>環境変数の整備が大変\n<ul>\n<li>極力1つのdotenvにまとめつつ、変数の適応を限定的に行うとか考え始めると面倒</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%A7%E3%81%8D%E3%81%9D%E3%81%86%E3%81%AA%E3%81%93%E3%81%A8\"><a class=\"header-anchor-link\" href=\"#%E3%83%A2%E3%83%8E%E3%83%AA%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%A7%E3%81%8D%E3%81%9D%E3%81%86%E3%81%AA%E3%81%93%E3%81%A8\" aria-hidden=\"true\"></a> モノリス分離できそうなこと</h2>\n<h3 id=\"model-view-controller%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AEmodel\"><a class=\"header-anchor-link\" href=\"#model-view-controller%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AEmodel\" aria-hidden=\"true\"></a> Model View ControllerのうちのModel</h3>\n<p>アプリーケーション複数になった場合、Modelだけは様々な箇所で使いたがるものであると思っていたり、ライブラリの更新の際もModel、View側どちらかが起因で更新難しいかの切り分けをしやすそうと思っている</p>\n<p>IDEの恩恵を得られにくいView側のヘルパー関数が非推奨になり更新したくてもできないという経験もあったりした</p>\n<p>Viewの観点でいうとViewの役割果たさなくてもよいというのもあるのでModelとControllerのみ扱うようにし、できるだけアプリケーションという単位で抑えて分離させないというのもアリ</p>\n<p>別アプリケーション切って同じようなModelを作成するというのがやりたくないことだったりする</p>\n<p>モノレポ構成を意識した下記のプロジェクトを作成した</p>\n<ul>\n<li><a href=\"https://github.com/igara/cakephp_debug_sample\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cakephp_debug_sample</a>\n<ul>\n<li><a href=\"https://github.com/igara/cakephp_debug_sample_projects_core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cakephp_debug_sample_projects_core</a></li>\n<li><a href=\"https://github.com/igara/cakephp_debug_sample_projects_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cakephp_debug_sample_projects_www</a></li>\n</ul>\n</li>\n</ul>\n<p>coreではModelやビジネスロジック等扱い、wwwではroutes, Controllerのみを使用するような想定で作成している</p>\n<p>composerの仕組み上の話になるが</p>\n<p><a href=\"https://github.com/igara/cakephp_debug_sample_projects_core/blob/d8beb44/composer.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">core側</a>で</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">core/composer.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"projects/core\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"library\"</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><a href=\"https://github.com/igara/cakephp_debug_sample_projects_www/blob/4287f51/composer.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">読み込み側</a>で</p>\n<div class=\"code-block-container\"><div class=\"code-block-filename-container\"><span class=\"code-block-filename\">www/composer.json</span></div><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    ...\n    <span class=\"token property\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../cakephp_debug_sample_projects_core\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"symlink\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ...\n        <span class=\"token property\">\"projects/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dev-main\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>とライブラリの設定をし</p>\n<p><a href=\"https://github.com/igara/cakephp_debug_sample_projects_www/blob/4287f51/src/Controller/PagesController.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www/src/Controller/PagesController.php</a></p>\n<p>のような感覚でwww側のリソースでもcore側によるModelの処理を読み込んでいる</p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>一例として記載したもののこの際、www経由にcoreを読み込まれているがCakePHPのライブラリはwww側のものを使用されているので注意</p>\n<p>npmを見習いたい</p>\n<p>ライブラリ化として分離しやすいものを選択する必要性も一定あると思っている</p>\n<p>これに対する解決策受け付け中<br>\n（CakePHP自身のnamespaceを変えるとかあるにはあるが...）</p>\n<p>言語側でバージョンが変わっても同様に使えるかどうかの考慮も一定必要</p>\n</div></aside>\n<h3 id=\"%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\"><a class=\"header-anchor-link\" href=\"#%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%BB%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\" aria-hidden=\"true\"></a> デザインガイドライン・デザインシステム</h3>\n<p><a href=\"https://zenn.dev/igara/articles/monorepo_nextjs#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_design_system\" target=\"_blank\">過去記事</a>でも触れてるやつ</p>\n<p>ちょっとしたUI調整のときのみに動かしたいCIタスクが多くあるのでモノリスだとあまりやりたがらない部分だったりする</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E8%A8%AD%E5%AE%9A\"><a class=\"header-anchor-link\" href=\"#%E5%85%B1%E9%80%9A%E8%A8%AD%E5%AE%9A\" aria-hidden=\"true\"></a> 共通設定</h3>\n<h4 id=\"ide%E3%83%BB%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\"><a class=\"header-anchor-link\" href=\"#ide%E3%83%BB%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC\" aria-hidden=\"true\"></a> IDE・エディター</h4>\n<p><a href=\"https://zenn.dev/igara/articles/monorepo_nextjs#vscode%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E5%85%B1%E6%9C%89%E5%8C%96\" target=\"_blank\">過去記事</a>でも触れてるやつ</p>\n<p>宗教的なものだが一定のコーディングの統一化をすべてのプロジェクトに対して適応が可能なのでコンテキストを合わせやすくなりそう</p>\n<h4 id=\"%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88\"><a class=\"header-anchor-link\" href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88\" aria-hidden=\"true\"></a> ビルド・テスト</h4>\n<p><a href=\"https://zenn.dev/igara/articles/monorepo_nextjs#%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9Anextjs%E3%81%AE%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%82%8B\" target=\"_blank\">過去記事</a>でちょっとだけ触れてる</p>\n<p>パス指定による共通のビルド・テスト設定の読み込みが可能だとモノレポ間でも設定に困るということは少なくなる</p>\n\n</div>",
    "link": "/blogs/zenn/モノリス分離したいのでモノレポ化にする考察",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/モノリス分離したいのでモノレポ化にする考察.png",
      "small": "/ogp/630x630/blogs/zenn/モノリス分離したいのでモノレポ化にする考察.png"
    }
  },
  {
    "name": "monorepo_nextjs",
    "title": "(仮) NextJS モノレポ運用",
    "publishedAt": "2021-12-03 03-05-29",
    "description": "これは [ランサーズ Advent Calendar 2021](https://qiita.com/advent-calendar/2021/lancers) 4 日目の記事です",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22(%E4%BB%AE)-nextjs-%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E9%81%8B%E7%94%A8%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22nextjs%22%2C-%22serverless%22%2C-%22monorepo%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22(%E4%BB%AE)-nextjs-%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E9%81%8B%E7%94%A8%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22nextjs%22%2C-%22serverless%22%2C-%22monorepo%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;(仮) NextJS モノレポ運用&quot;<br>\nemoji: &quot;💬&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;nextjs&quot;, &quot;serverless&quot;, &quot;monorepo&quot;]<br>\npublished: true</h2>\n<p>これは <a href=\"https://qiita.com/advent-calendar/2021/lancers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ランサーズ Advent Calendar 2021</a> 4 日目の記事です。</p>\n<p>個人の開発では1レポジトリで完結するようなプロジェクトをよく作成します。</p>\n<p>ただし実際の事業はスケールしたり、プロジェクトの中でも他のプロジェクトにも共有したいリソースというのは出るものなので初期段階でもしっかりとした基盤を事前に用意したいと思ったので作成しました。</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><a class=\"header-anchor-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\" aria-hidden=\"true\"></a> プロジェクト構成</h2>\n<ul>\n<li>ルートプロジェクト: <a href=\"https://github.com/igara/syonet_eight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight</a>\n<ul>\n<li>サブプロジェクト(<a href=\"https://github.com/igara/syonet_eight/tree/master/projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a>)\n<ul>\n<li><a href=\"https://github.com/igara/syonet_eight_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_www</a></li>\n<li><a href=\"https://github.com/igara/syonet_eight_design_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_design_system</a></li>\n<li><a href=\"https://github.com/igara/syonet_eight/tree/master/projects/syonet_eight_storybook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_storybook</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上記のようなルートプロジェクトにサブプロジェクトを <code>git submodule</code> で分割して管理しているような構成にしてます。<br>\n基本はGitなので対象のサブプロジェクト同士で異なるブランチでの検証も可能だったりします。<br>\n一部 <code>git submodule</code>管理されていないサブプロジェクトもありますが。</p>\n<p>次にそれぞれのプロジェクトの説明に入ります。</p>\n<h3 id=\"%E3%83%AB%E3%83%BC%E3%83%88%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight\"><a class=\"header-anchor-link\" href=\"#%E3%83%AB%E3%83%BC%E3%83%88%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight\" aria-hidden=\"true\"></a> ルートプロジェクト: <a href=\"https://github.com/igara/syonet_eight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight</a></h3>\n<p>サブプロジェクトよりも上の階層にある大元のプロジェクトになります。</p>\n<h4 id=\"yarn-workspace\"><a class=\"header-anchor-link\" href=\"#yarn-workspace\" aria-hidden=\"true\"></a> yarn workspace</h4>\n<p>NodeJSのライブラリをルートプロジェクトに集中管理し、 <code>yarn workspace</code> によるモノレポな環境にしています。<br>\nルートプロジェクトにライブラリ管理を集中化させてしまってますが、サブプロジェクト側のpackage.jsonにバージョンの異なるライブラリを管理させたり、部分的に使用したいライブラリの管理ができるようになっているんじゃないかなと思います。</p>\n<p><code>npm scripts</code> などもルートプロジェクトで管理するようにしてますので基本、CLIのカレントはルートプロジェクトのままで作業することになります。</p>\n<h4 id=\"vscode%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E5%85%B1%E6%9C%89%E5%8C%96\"><a class=\"header-anchor-link\" href=\"#vscode%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AE%E5%85%B1%E6%9C%89%E5%8C%96\" aria-hidden=\"true\"></a> VSCodeの設定の共有化</h4>\n<p><a href=\"https://github.com/igara/syonet_eight/tree/master/.vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.vscode</a>をルートプロジェクトに置くことでサブプロジェクトでも自動にVSCodeの設定が適応されます。</p>\n<p>以下設置しているファイルを箇条書きで説明します。</p>\n<ul>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/extensions.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">extensions.json</a><br>\n使用するVSCode拡張の共有<br>\nVSCodeを開いたときに推奨の拡張とかサジェストの表記がされるようになると思います。</li>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/launch.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">launch.json</a><br>\nデバッグの設定を記載<br>\nプロジェクトごとのリモートデバッグによるポートの専有とか防げるんじゃないでしょうか。</li>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/settings.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">settings.json</a><br>\nエディターの設定<br>\nESLintの有効化や保存時のフォーマッタ設定<br>\nその他モラル的な基本設定とか入れればいいんじゃないでしょうか。</li>\n<li><a href=\"https://github.com/igara/syonet_eight/blob/master/.vscode/sytled-jsx.code-snippets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xxxxx.code-snippets</a><br>\nプロジェクトまたがってコピペ的に使いたいの記載すればいいんじゃないでしょうか。</li>\n</ul>\n<h4 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%BE%E3%81%9F%E3%81%8C%E3%81%A3%E3%81%9Fstorybook%E3%81%AE%E5%B1%95%E9%96%8B\"><a class=\"header-anchor-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%BE%E3%81%9F%E3%81%8C%E3%81%A3%E3%81%9Fstorybook%E3%81%AE%E5%B1%95%E9%96%8B\" aria-hidden=\"true\"></a> プロジェクトをまたがった<a href=\"https://storybook.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Storybook</a>の展開</h4>\n<p>設定について<a href=\"https://github.com/igara/syonet_eight/tree/master/.storybook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちら</a>になります。</p>\n<p><code>yarn storybook</code> によりコンポーネントのカタログのようなものを閲覧できます。</p>\n<p>サブプロジェクトにある <code>xxx.stories.mdx</code> を元に作成されます。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/storybook_props.jpg\" alt=\"storybook_props\"></p>\n<p>軽くコンポーネントのPropsの検証ができたり</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/storybook_accessibility.jpg\" alt=\"storybook_accessibility\"></p>\n<p>使用しているタグなど実装に関してのアクセシビリティが適切そうかチェックしたり</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/storybook_performance.jpg\" alt=\"storybook_performance\"></p>\n<p>レンダリングのパフォーマンス確認などできるようにしています</p>\n<h4 id=\"ci%E3%81%AE%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AEut%E5%AE%9F%E8%A1%8C\"><a class=\"header-anchor-link\" href=\"#ci%E3%81%AE%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AEut%E5%AE%9F%E8%A1%8C\" aria-hidden=\"true\"></a> CIのスケジュールによる全プロジェクトのUT実行</h4>\n<p>設定について<a href=\"https://github.com/igara/syonet_eight/blob/master/.github/workflows/root.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちら</a></p>\n<p>それぞれのサブプロジェクトの最新のmasterブランチを持ってきてlint, jestによるテスト実行をするようにしてます。</p>\n<p>サブプロジェクト側でも個別にGitHub Actionsによるワークフローを記載しているのでそれぞれのレポジトリのプッシュでもテスト実行するようにしています。</p>\n<h3 id=\"%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_www\"><a class=\"header-anchor-link\" href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_www\" aria-hidden=\"true\"></a> サブプロジェクト: <a href=\"https://github.com/igara/syonet_eight_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_www</a></h3>\n<p>NextJSによるプロジェクトになります。</p>\n<h4 id=\"serverless-next.js-component%E3%81%AB%E3%82%88%E3%82%8B%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"><a class=\"header-anchor-link\" href=\"#serverless-next.js-component%E3%81%AB%E3%82%88%E3%82%8B%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\" aria-hidden=\"true\"></a> <a href=\"https://www.serverless.com/plugins/serverless-nextjs-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serverless Next.js Component</a>によるデプロイ</h4>\n<p>NextJSの本家<a href=\"https://vercel.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vercel</a> でもいいんですけどAWSにデプロイ可能な<a href=\"https://www.serverless.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Serverless Framework</a>を採用しています。</p>\n<p>デプロイの仕組みの説明難しいですが <a href=\"https://github.com/igara/syonet_eight_www/blob/master/serverless.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serverless.yml</a> の情報がAWSのCloudFormationのテンプレートとして展開されてAWSのそれぞれのサービスをよしなに使って1つのWebサービスを作ってしまうというものです。</p>\n<p>下記の図はデプロイで反映するAWSのサービスのイメージになります。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/serverless_nextjs.drawio.png\" alt=\"serverless_nextjs\"></p>\n<p>それぞれのAWSのサービスが外部のユーザから見てどう使われているのかのイメージを記載すると</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/serverless_service.drawio.png\" alt=\"serverless_service\"></p>\n<p>なのをServerless Next.js Componentで再現できちゃうらしいです。<br>\nSPA想定だったReactの資産をフル活用できますね。</p>\n<h3 id=\"%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_design_system\"><a class=\"header-anchor-link\" href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_design_system\" aria-hidden=\"true\"></a> サブプロジェクト: <a href=\"https://github.com/igara/syonet_eight_design_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_design_system</a></h3>\n<p>共通のデザインなどをまとめるプロジェクトです。</p>\n<h4 id=\"%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%8C%96\"><a class=\"header-anchor-link\" href=\"#%E5%85%B1%E9%80%9A%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%8C%96\" aria-hidden=\"true\"></a> 共通コンポーネントをライブラリ化</h4>\n<p><code>yarn build:design_system</code> を実行することでライブラリ化します。</p>\n<p>ルートプロジェクトの<a href=\"https://github.com/igara/syonet_eight/blob/master/package.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package.json</a>にある</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">&quot;syonet_eight_design_system&quot;: &quot;file:./projects/syonet_eight_design_system&quot;\n</code></pre></div><p>という指定により別のサブプロジェクトでも</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">import * as DesignSystem from 'syonet_eight_design_system';\n</code></pre></div><p>で共通のコンポーネントを使用することが可能です。</p>\n<h4 id=\"figma%E3%81%A7%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88\"><a class=\"header-anchor-link\" href=\"#figma%E3%81%A7%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88\" aria-hidden=\"true\"></a> Figmaで作成したパーツのインポート</h4>\n<p><code>yarn import:figma</code> でFigmaで作成したものをインポートするような仕組みを作ってます。</p>\n<p>実装したコードはこちらです</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2Fsrc%2Fscripts%2Ffigma.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/src/scripts/figma.ts\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/src/scripts/figma.ts</a></p>\n<p>SVG化して使うのは結構安易そうですが、DOMとして扱うのは難しめにみてます。<br>\n(だってあいつらNodeIDの順番とか位置関係ようわからんし)</p>\n<h4 id=\"%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9Anextjs%E3%81%AE%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%82%8B\"><a class=\"header-anchor-link\" href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%AE%E8%A8%AD%E5%AE%9Anextjs%E3%81%AE%E3%82%92%E3%81%9D%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%82%8B\" aria-hidden=\"true\"></a> ビルドの設定NextJSのをそのままつかってる</h4>\n<p><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/tsconfig.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tsconfig.json</a>とか<a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/.babelrc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.babelrc</a>の設定はNextJSで動かしていたものを使用してます。</p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>その弊害で<a href=\"https://github.com/igara/syonet_eight_design_system/tree/master/pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pages</a>ディレクトリがないとビルドに失敗してしまうので追加してます。<br>\nものすごくこのディレクトリ消したいんですよね</p>\n</div></aside>\n<h3 id=\"syonet_eight_www-%26-syonet_eight_design_system-%E5%85%B1%E9%80%9A%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF\"><a class=\"header-anchor-link\" href=\"#syonet_eight_www-%26-syonet_eight_design_system-%E5%85%B1%E9%80%9A%E3%81%AE%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/syonet_eight_www\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_www</a> &amp; <a href=\"https://github.com/igara/syonet_eight_design_system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_design_system</a> 共通の取り組み</h3>\n<h4 id=\"%E3%83%93%E3%82%B8%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%AA%E3%82%B0%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E6%96%BD\"><a class=\"header-anchor-link\" href=\"#%E3%83%93%E3%82%B8%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%AA%E3%82%B0%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E6%96%BD\" aria-hidden=\"true\"></a> ビジュアルリグレッションテスト実施</h4>\n<p><a href=\"https://reg-viz.github.io/reg-suit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reg-suit</a>というGitのプッシュを実行した際にコンポーネントの差分をビジュアライズする仕組みを入れてます。</p>\n<p>例えばこんな差分があったときに</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fcommit%2Fbf6de6cbd274e239e73f4eb39391bd9b060cb74b\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/commit/bf6de6cbd274e239e73f4eb39391bd9b060cb74b\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/commit/bf6de6cbd274e239e73f4eb39391bd9b060cb74b</a></p>\n<p>差分としての検知として</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/reg_suit_top.jpg\" alt=\"reg_suit_top\"></p>\n<p>一覧が表示されて詳細をみようとすると</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/reg_suit_diff.gif\" alt=\"reg_suit_diff\"></p>\n<p>どのへんに差分があるのかというのをビジュアライズしてくれます。</p>\n<p>CIの設定としてこちらになります。</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2F.github%2Fworkflows%2Fvrt.yml\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/.github/workflows/vrt.yml\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/.github/workflows/vrt.yml</a></p>\n<p>GitHub Actions上では日本語フォントがないので <code>fonts-noto</code> をインストールする必要があったりします。</p>\n<p>あとはこちらのテストの結果は現状Slackで通知がくることを確認しています。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/monorepo_nextjs/slack.png\" alt=\"slack\"></p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>GitHubのPRに対してテスト結果をコメントしてくれる機能もありますがこれに関しては正常に動作してません...</p>\n</div></aside>\n<h4 id=\"css-in-js%E3%81%A8%E3%81%97%E3%81%A6emotion%E6%8E%A1%E7%94%A8\"><a class=\"header-anchor-link\" href=\"#css-in-js%E3%81%A8%E3%81%97%E3%81%A6emotion%E6%8E%A1%E7%94%A8\" aria-hidden=\"true\"></a> CSS in JSとしてemotion採用</h4>\n<p>好みですが、</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">import { css } from '@emotion/react';\n</code></pre></div><p>で<a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modules</a>ぽくもpropsでCSSの値指定できるようないいとこ取りな書き方よくないっすか？</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2Fsrc%2Fcomponents%2Ficons%2Fmenu_icon%2Fmenu_icon.styles.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.styles.ts\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.styles.ts</a><br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fsyonet_eight_design_system%2Fblob%2Fmaster%2Fsrc%2Fcomponents%2Ficons%2Fmenu_icon%2Fmenu_icon.tsx\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.tsx\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/syonet_eight_design_system/blob/master/src/components/icons/menu_icon/menu_icon.tsx</a></p>\n<h3 id=\"%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_storybook\"><a class=\"header-anchor-link\" href=\"#%E3%82%B5%E3%83%96%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%3A-syonet_eight_storybook\" aria-hidden=\"true\"></a> サブプロジェクト: <a href=\"https://github.com/igara/syonet_eight/tree/master/projects/syonet_eight_storybook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">syonet_eight_storybook</a></h3>\n<p>Storybookを配布するように<a href=\"https://github.com/igara/syonet_eight/blob/master/projects/syonet_eight_storybook/serverless.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serverless.yml</a>しか置いてないです。</p>\n<p>これもServerless Frameworkのコンポーネントをつかっており、<a href=\"https://github.com/serverless-components/website\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">website</a>というものを使っています。</p>\n<p>ただのSPAのサイトをホスティングしたい用途で使うのがちょうど良さそうです。</p>\n<h2 id=\"%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><a class=\"header-anchor-link\" href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\" aria-hidden=\"true\"></a> おわりに</h2>\n<p>以上自分なりのモノレポ運用についての記載でした。</p>\n<p>まだ実装そのものを着手してなく、APIのプロジェクトも作成していない状況なのでこれからすすめていきたいと思います。</p>\n<p>アドベントカレンダー、明日は <a href=\"https://qiita.com/yuta-ron\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@yuta-ron</a> さんです。<br>\nよろしくおねがいします。</p>\n\n</div>",
    "link": "/blogs/zenn/(仮) NextJS モノレポ運用",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/(仮) NextJS モノレポ運用.png",
      "small": "/ogp/630x630/blogs/zenn/(仮) NextJS モノレポ運用.png"
    }
  },
  {
    "name": "bot_slack_matome_channnel",
    "title": "Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた",
    "publishedAt": "2021-04-21 21-00-48",
    "description": "作ろうとした背景としてメンバー各位が書く分報チャンネルがあってチャンネル参加してなくても一括に確認できるようなものがあったらいいなと思っていたので作ってみた感じです。  Slack",
    "body": "\n<style>\n.znc{line-height:1.9}.znc>*:first-child{margin-top:0}.znc i,.znc cite,.znc em{font-style:italic}.znc strong{font-weight:700}.znc a{color:#0f83fd}.znc a:hover{text-decoration:underline}.znc p+p{margin-top:1.5em}.znc ul,.znc ol{margin:1.4rem 0;line-height:1.7}.znc ul>li,.znc ol>li{margin:.4rem 0}.znc ul ul,.znc ul ol,.znc ol ul,.znc ol ol{margin:.2em 0}.znc ul p,.znc ol p{margin:0}.znc ul{padding-left:1.8em}.znc ul>li{list-style:disc}.znc ul>li::marker{font-size:1.1em;color:#5e6478}.znc ol{padding-left:1.7em}.znc ol>li{list-style:decimal;padding-left:.2em}.znc ol>li::marker{color:#535872;font-weight:600;letter-spacing:-0.05em}.znc .contains-task-list li{list-style:none !important}.znc .task-list-item-checkbox{margin-left:-1.5em;font-size:1em;pointer-events:none}.znc h1+p,.znc h2+p,.znc h3+p,.znc h4+p,.znc h5+p,.znc h6+p{margin-top:.3em}.znc h1,.znc h2{margin-top:2.3em;margin-bottom:.5em}.znc h3,.znc h4,.znc h5,.znc h6{margin-top:2.25em;margin-bottom:.5em}.znc h1{padding-bottom:.2em;margin-bottom:1.1rem;font-size:1.7em;position:relative;border-bottom:solid 1px rgba(92,147,187,.17)}.znc h2{font-size:1.5em}.znc h3{font-size:1.3em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.9em}@media screen and (max-width: 576px){.znc h1{font-size:1.6em}.znc h2{font-size:1.4em}.znc h3{font-size:1.2em}.znc h4{font-size:1.1em}.znc h5{font-size:1em}.znc h6{font-size:.85em}}.znc hr{border-top:2px solid rgba(92,147,187,.17);margin:2.5rem 0}.znc blockquote{font-size:.97em;margin:1.4rem 0;border-left:solid 3px #9dacb7;padding:2px 0 2px .7em;color:#505c64}.znc blockquote p{margin:1rem 0}.znc blockquote>:first-child{margin-top:0}.znc blockquote>:last-child{margin-bottom:0}.znc blockquote.twitter-tweet{display:none}.znc table{margin:1.2rem auto;width:auto;border-collapse:collapse;font-size:.95em;line-height:1.5;word-break:normal;display:block;overflow:auto;-webkit-overflow-scrolling:touch}.znc th,.znc td{padding:.5rem;border:solid 1px #cfdce6;background:#fff}.znc th{font-weight:700;background:#edf2f7}.znc code{padding:.2em .4em;background:rgba(33,90,160,.07);font-size:.85em;border-radius:4px;vertical-align:.08em}.znc code,.znc .code-block-filename{font-family:\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,monospace,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";-webkit-font-smoothing:antialiased}.znc pre{margin:1.3rem 0;background:#1a2638;overflow-x:auto;-webkit-overflow-scrolling:touch;border-radius:.7em;box-shadow:0 4px 6px -1px rgba(0,14,30,.15);word-break:normal;word-wrap:normal;display:flex}.znc pre:after{content:\"\";width:8px;flex-shrink:0}.znc pre code{margin:0;padding:0;background:transparent;font-size:.9em;color:#fff}.znc pre>code{display:block;padding:1.1rem}@media screen and (max-width: 576px){.znc pre>code{padding:1rem .8rem;font-size:.85em}}.znc .code-block-container{position:relative;margin:1.3rem 0}.znc .code-block-container pre{margin:0}.znc .code-block-filename{display:table;max-width:100%;background:#323e52;color:rgba(255,255,255,.9);font-size:12px;line-height:1.3;border-radius:6px 6px 0 0;padding:6px 12px 20px;margin-bottom:-16px}.znc .code-block-filename-container+pre{border-top-left-radius:0}.znc img:not(.emoji){margin:1.5rem auto;display:table;max-width:100%;height:auto}.znc img+br{display:none}.znc img~em{display:block;margin:-1rem auto 0;line-height:1.3;text-align:center;color:#77838c;font-size:.92em}.znc details{font-size:.95em;margin:1rem 0;line-height:1.7}.znc summary{cursor:pointer;outline:0;padding:.7em .7em .7em .9em;border:solid 1px rgba(92,147,187,.19);color:var(--c-contrast);font-size:.9em;border-radius:9px;box-shadow:0 2px 4px -2px rgba(0,0,0,.15)}.znc summary::-webkit-details-marker{color:#77838c}.znc details[open] summary{border-radius:5px 5px 0 0;box-shadow:none;background:#f1f5f9;border-bottom:none}.znc .details-content{padding:.5em .9em;border:solid 1px rgba(92,147,187,.2);border-radius:0 0 5px 5px}.znc .details-content>*{margin:.5em 0}.znc .embed-tweet,.znc .embed-gist,.znc .embed-speakerdeck,.znc .embed-slideshare,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-codesandbox,.znc .embed-stackblitz,.znc .embed-mermaid{margin:1.5rem 0}.znc .embed-slideshare,.znc .embed-speakerdeck,.znc .embed-codepen,.znc .embed-jsfiddle,.znc .embed-youtube,.znc .embed-stackblitz{padding-bottom:calc(56.25% + 38px);position:relative;width:100%;height:0}.znc .embed-slideshare iframe,.znc .embed-speakerdeck iframe,.znc .embed-codepen iframe,.znc .embed-jsfiddle iframe,.znc .embed-youtube iframe,.znc .embed-stackblitz iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:none}.znc .embed-slideshare iframe{border:1px solid #1a2638}.znc .embed-zenn-link{margin:1rem auto}.znc .embed-zenn-link iframe{height:125px;width:100%;display:block}.znc embed-katex:not([display-mode=\"1\"]){display:inline-flex;overflow-x:auto;max-width:100%;-ms-overflow-style:none;scrollbar-width:none}.znc embed-katex:not([display-mode=\"1\"])::-webkit-scrollbar{display:none}.znc embed-katex[display-mode=\"1\"]{display:block;width:100%;overflow-x:auto}.znc embed-mermaid svg{height:auto}.znc pre.zenn-mermaid{background:transparent;color:#93a5b1;font-size:.9rem}.znc pre[class*=language-]{position:relative}.znc .token.namespace{opacity:.7}.znc .token.comment,.znc .token.prolog,.znc .token.doctype,.znc .token.cdata{color:#94a1b3}.znc .token.operator,.znc .token.boolean,.znc .token.number{color:#ffc56d}.znc .token.attr-name,.znc .token.string{color:#ffc56d}.znc .token.entity,.znc .token.url,.znc .language-css .token.string,.znc .style .token.string{color:#ffc56d}.znc .token.selector{color:#ff8fa3}.znc .token.atrule,.znc .token.attr-value,.znc .token.keyword,.znc .token.important{color:#ff8fa3}.znc .token.deleted{color:#ff8fa3}.znc .token.inserted{color:#b4ff9b}.znc .token.deleted:not(.prefix){background:rgba(218,54,50,.2);color:inherit;display:block}.znc .token.prefix{user-select:none}.znc .token.inserted:not(.prefix){background:rgba(0,146,27,.2);color:inherit;display:block}.znc .token.prefix.unchanged{display:none}.znc .token.unchanged>.token.prefix.unchanged{display:inline}.znc .token.coord{color:#aad4ff}.znc .token.regex,.znc .token.statement{color:#ffc56d}.znc .token.placeholder,.znc .token.variable{color:#fff}.znc .token.important,.znc .token.statement,.znc .token.bold{font-weight:700}.znc .token.punctuation{color:#939bc1}.znc .token.entity{cursor:help}.znc .token.italic{font-style:italic}.znc .token.tag,.znc .token.property,.znc .token.function{color:#38c7ff}.znc .token.attr-name{color:#ff8fa3}.znc .token.attr-value{color:#ffc56d}.znc .token.style,.znc .token.script{color:#ffc56d}.znc .token.script .token.keyword{color:#ffc56d}.znc aside.msg{display:flex;align-items:flex-start;margin:1.5rem 0;padding:1.4em 1em;border-radius:10px;background:#fff6e4;color:rgba(0,0,0,.65);font-size:.94em;line-height:1.6}.znc aside.msg.alert{background:#ffeff2}.znc aside.msg a{color:inherit;text-decoration:underline}.znc .msg-icon{position:relative;top:.05em;width:1.4em;height:1.4em;color:#ffb84c}.znc aside.msg.alert .msg-icon{color:#ff7670}.znc .msg-content{flex:1;margin-left:.6em}.znc .msg-content>*{margin:.7rem 0}.znc .msg-content>*:first-child,.znc .msg-content>*:last-child{margin:0}.znc .footnotes{margin-top:3rem;color:#77838c;font-size:.9em}.znc .footnotes li::marker{color:#77838c}.znc .footnotes-title{padding-bottom:3px;border-bottom:solid 1px #cfdce6;font-weight:700;font-size:15px}.znc .footnotes-list{margin:13px 0 0}.znc .footnotes-twemoji{border:none;margin:0 7px 0 0;vertical-align:-3px}\n\nsvg {\n  width: 20px;\n}\n</style>\n<div class=\"znc\">\n  <hr>\n<h2 id=\"title%3A-%22slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%921%E3%81%A4%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AB%E9%9B%86%E7%B4%84%E3%81%99%E3%82%8Bslack%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22slack%22%2C-%22gas%22%2C-%22googleappsscrip%22%5Dpublished%3A-true\"><a class=\"header-anchor-link\" href=\"#title%3A-%22slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%921%E3%81%A4%E3%81%AE%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AB%E9%9B%86%E7%B4%84%E3%81%99%E3%82%8Bslack%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%22emoji%3A-%22%F0%9F%92%AC%22type%3A-%22tech%22-%23-tech%3A-%E6%8A%80%E8%A1%93%E8%A8%98%E4%BA%8B-%2F-idea%3A-%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2topics%3A-%5B%22slack%22%2C-%22gas%22%2C-%22googleappsscrip%22%5Dpublished%3A-true\" aria-hidden=\"true\"></a> title: &quot;Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた&quot;<br>\nemoji: &quot;💬&quot;<br>\ntype: &quot;tech&quot; # tech: 技術記事 / idea: アイデア<br>\ntopics: [&quot;slack&quot;, &quot;gas&quot;, &quot;googleappsscrip&quot;]<br>\npublished: true</h2>\n<p>作ろうとした背景としてメンバー各位が書く分報チャンネルがあってチャンネル参加してなくても一括に確認できるようなものがあったらいいなと思っていたので作ってみた感じです。</p>\n<p>Slackの分報を社内Twitterに！皆の分報を一つのチャネルに集約するSlackボットを作ってみた<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fzenn.dev%2Fryo_kawamata%2Farticles%2Ftimes-all-bot\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://zenn.dev/ryo_kawamata/articles/times-all-bot\" style=\"display: none\" target=\"_blank\">https://zenn.dev/ryo_kawamata/articles/times-all-bot</a><br style=\"display: none\">\nのパクリですがGAS版として投稿しています。</p>\n<h2 id=\"%E4%BD%9C%E6%88%90%E7%89%A9\"><a class=\"header-anchor-link\" href=\"#%E4%BD%9C%E6%88%90%E7%89%A9\" aria-hidden=\"true\"></a> 作成物</h2>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fbot_slack_matome_channnel\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/bot_slack_matome_channnel\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/bot_slack_matome_channnel</a></p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_bot_message.gif\" alt=\"\"></p>\n<p>オプションで集約したくないチャンネルの場合は無視できるようなものを作成しました。</p>\n<aside class=\"msg message\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 101 101\" role=\"img\" aria-label=\"message\" class=\"msg-icon\"><circle cx=\"51\" cy=\"51\" r=\"50\" fill=\"currentColor\"></circle><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"#ffffff\" font-size=\"70\" font-weight=\"bold\" dominant-baseline=\"central\">!</text></svg><div class=\"msg-content\"><p>GASなので利用回数の制限があるので注意です。<br>\n<a href=\"https://developers.google.com/apps-script/guides/services/quotas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.google.com/apps-script/guides/services/quotas</a></p>\n<p>2021/04/20時点では</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Consumer (e.g., gmail.com) and G Suite free edition(legacy)</th>\n<th>Google Workspace accounts</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Triggers total runtime</td>\n<td>90 min / day</td>\n<td>6 hr / day</td>\n</tr>\n<tr>\n<td>URL Fetch calls</td>\n<td>20,000 / day</td>\n<td>100,000 / day</td>\n</tr>\n</tbody>\n</table>\n<p>と記載されていますので規模感に合わせてGASじゃない実装にしたほうが良いというのもありそうです。<br>\nTriggerはSlackの情報をSpreadsheetにキャッシュさせるために使用したり、<br>\nURL FetchはSlackにメッセージを流すために使用していますので上記の上限できびしいなと思ったらこの記事を参考にしないほうがいいと思います。</p>\n</div></aside>\n<h2 id=\"%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\"><a class=\"header-anchor-link\" href=\"#%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\" aria-hidden=\"true\"></a> セットアップ</h2>\n<h3 id=\"slack%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEscope%E8%A8%AD%E5%AE%9A\"><a class=\"header-anchor-link\" href=\"#slack%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AEscope%E8%A8%AD%E5%AE%9A\" aria-hidden=\"true\"></a> Slackアプリのscope設定</h3>\n<p><a href=\"https://api.slack.com/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://api.slack.com/apps</a> からアプリを作成し、<br>\n<strong>OAuth &amp; Permissions</strong> の画面から以下のscopeをBot Userに追加します。</p>\n<ul>\n<li>channels:history</li>\n<li>channels:read</li>\n<li>chat:write</li>\n<li>users.profile:read</li>\n<li>users:read</li>\n<li>users:read.email</li>\n</ul>\n<p>usersのscopeはSpreadsheetに情報を残した際にメールアドレスもGoogle Workspaceとの連携も楽そうという未来実装的に入れているものなので本題では不要なscopeだったりします。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_bot_scope.jpg\" alt=\"\"></p>\n<p>設定が完了したら <strong>OAuth &amp; Permissions</strong> の画面上部にある <strong>Bot User OAuth Token</strong> の値をコピーしましょう。</p>\n<h3 id=\"gas%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><a class=\"header-anchor-link\" href=\"#gas%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\" aria-hidden=\"true\"></a> GASのプロジェクトを作成</h3>\n<p>下記コマンドからソースを持ってきます。</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">git clone https://github.com/igara/bot_slack_matome_channnel.git\ncd bot_slack_matome_channnel\n</code></pre></div><p>環境変数の適応を行います。</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">cp .env.sample.ts .env.ts\n</code></pre></div><div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Slackのチーム名</span>\n  <span class=\"token constant\">SLACK_TEAM</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// OAuth &amp; Permissionsのページに記載されてたBot User OAuth Token</span>\n  <span class=\"token constant\">SLACK_ACCESS_TOKEN</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xoxb-xxxxx-xxxxx-xxxxx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// メッセージを送りたい対象のチャンネル名</span>\n  <span class=\"token constant\">BOT_SLACK_MATOME_CHANNEL_NAME</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bot_slack_matome_channnel\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 集約したい対象のチャンネル名の正規表現 下記は分報チャンネル想定</span>\n  <span class=\"token constant\">TARGET_CHANNEL_REGEXES</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^t_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^time_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// TARGET_CHANNEL_REGEXESの中から除外したいチャンネルの正規表現</span>\n  <span class=\"token constant\">IGNORE_TARGET_CHANNEL_REGEXES</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^t_ignore_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^time_ignore_\\S*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>下記のコマンドからSpreadsheet &amp; GASを作成します</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">npm install\n\n# login\nnpx clasp login\n\n# new create spreadsheet &amp; script project &amp; .clasp.json\nnpm run new name=hoge\n\n# build\nnpm run build\n# push\nnpx clasp push\n</code></pre></div><p>上記を実行するとSpreadsheetが作成され、その中にあるスクリプトエディターを開くとGASも追加されているかと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/create_spreadsheet.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/create_gas.jpg\" alt=\"\"></p>\n<h3 id=\"spreadsheet%E3%81%ABslack%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\"><a class=\"header-anchor-link\" href=\"#spreadsheet%E3%81%ABslack%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80\" aria-hidden=\"true\"></a> SpreadsheetにSlackの情報を読み込む</h3>\n<p>スクリプトエディターから下記の関数を実行してSlackの情報をSpreadsheetに残します。</p>\n<ul>\n<li><strong>create_sheets.ts.gs</strong> の <strong>createSheets</strong> を実行して必要なシートを作成</li>\n<li><strong>get_channels.ts.gs</strong> の <strong>getChannels</strong> を実行してシートにチャンネルの情報を残す</li>\n<li><strong>get_users.ts.gs</strong> の <strong>getUsers</strong> を実行してシートにユーザの情報を残す</li>\n</ul>\n<p>スクリプトエディターを経由しないで実行する方法として</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fqiita.com%2Fjiroshin%2Fitems%2Fdcc398285c652554e66a%23%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%258B%25E3%2582%2589gas%25E3%2582%2592%25E5%258F%25A9%25E3%2581%258F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://qiita.com/jiroshin/items/dcc398285c652554e66a#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%8B%E3%82%89gas%E3%82%92%E5%8F%A9%E3%81%8F\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://qiita.com/jiroshin/items/dcc398285c652554e66a#ローカルからgasを叩く</a></p>\n<p>にあるようなGoogle Cloud Consoleと自前で作成したClaspのログインができていれば</p>\n<div class=\"code-block-container\"><pre class=\"\"><code class=\"\">npx clasp run createSheets\nnpx clasp run getChannels\nnpx clasp run getUsers\n</code></pre></div><p>というようなコマンドで実行が可能です。<br>\nその際のGoogleアプリのスコープ設定はこちらの設定がされていればよいはず<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fbot_slack_matome_channnel%2Fblob%2Fmaster%2Fdist%2Fappsscript.json%23L14-L29\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/dist/appsscript.json#L14-L29\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/bot_slack_matome_channnel/blob/master/dist/appsscript.json#L14-L29</a></p>\n<h3 id=\"web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><a class=\"header-anchor-link\" href=\"#web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\" aria-hidden=\"true\"></a> Webアプリケーション公開する</h3>\n<p>スクリプトエディターのメニューから 公開 -&gt; ウェブアプリケーションとして導入から更新を実行し、</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/update_gas_web_appllication.jpg\" alt=\"\"></p>\n<p>公開したWebアプリケーションのURLをコピーします。</p>\n<h3 id=\"slack%E3%81%AEevent-subscriptions%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\"><a class=\"header-anchor-link\" href=\"#slack%E3%81%AEevent-subscriptions%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\" aria-hidden=\"true\"></a> SlackのEvent Subscriptionsを登録する</h3>\n<p><strong>Request URL</strong> に公開したGASのWebアプリケーションのURLを貼り、<strong>Verified</strong> が表示されるか確認します。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_event_request_url.jpg\" alt=\"\"></p>\n<p>確認できたら、 <strong>Subscribe to bot events</strong> の項目で</p>\n<ul>\n<li>message.channels</li>\n</ul>\n<p>を登録してください。</p>\n<p><img src=\"https://raw.githubusercontent.com/igara/zenn-export\n/main/images/bot_slack_matome_channnel/slack_event_bot.jpg\" alt=\"\"></p>\n<p>以上で設定は完了です。<br>\nSlackで対象のチャンネルを作成してメッセージを投稿してみてボットのメッセージが送られるようになっていたら成功です。</p>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E9%9B%91%E3%81%AB%E8%AA%AC%E6%98%8E\"><a class=\"header-anchor-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E9%9B%91%E3%81%AB%E8%AA%AC%E6%98%8E\" aria-hidden=\"true\"></a> ソースコード雑に説明</h2>\n<h3 id=\"src%2Ftasks%2Fcreate_clasp_json.ts\"><a class=\"header-anchor-link\" href=\"#src%2Ftasks%2Fcreate_clasp_json.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/tasks/create_clasp_json.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/tasks/create_clasp_json.ts</a></h3>\n<p><a href=\"https://github.com/google/clasp#create\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/google/clasp#create</a> に該当するもの<br>\nSpreadsheetとスクリプトエディターの名前を一緒にしたかったから自作したようなもの</p>\n<h3 id=\"src%2Fgas%2Fcreate_sheets.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fcreate_sheets.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/create_sheets.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/create_sheets.ts</a></h3>\n<p>GASとして使用する関数<br>\nGAS経由にシートを作成する</p>\n<div class=\"code-block-container\"><pre class=\"language-ts\"><code class=\"language-ts\">Spreadshhet<span class=\"token punctuation\">.</span><span class=\"token function\">deleteSheet</span><span class=\"token punctuation\">(</span>Spreadshhet<span class=\"token punctuation\">.</span><span class=\"token function\">getSheetByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> channelsSheetColumnNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ChannelsSheet <span class=\"token operator\">=</span> Spreadshhet<span class=\"token punctuation\">.</span><span class=\"token function\">insertSheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nChannelsSheet<span class=\"token punctuation\">.</span><span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> channelsSheetColumnNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>channelsSheetColumnNames<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>な削除して再度シート作成するような作りになっている</p>\n<p>過去に作ったGoogle API経由でCSVを元にシートを作成するのもありっちゃあり<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fspreadsheet_master%2Fblob%2Fmaster%2Fsrc%2Ftasks%2Frecreate_spreadsheet.ts\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/spreadsheet_master/blob/master/src/tasks/recreate_spreadsheet.ts\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/spreadsheet_master/blob/master/src/tasks/recreate_spreadsheet.ts</a></p>\n<p>ローカルPCで実行するよりGASの環境で実行したい気持ちが今回強かった</p>\n<h3 id=\"src%2Fgas%2Fdo_post.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fdo_post.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/do_post.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/do_post.ts</a></h3>\n<p>SlackのEvent Subscriptions経由できたメッセージがリクエストされて処理を実行するGASの関数</p>\n<p>今回設定したEvent Subscriptionsがメッセージに対する更新系もプッシュされていたので除外するために書いた処理がこちら</p>\n<p><div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fgithub.com%2Figara%2Fbot_slack_matome_channnel%2Fblob%2Fmaster%2Fsrc%2Fgas%2Fdo_post.ts%23L9-L23\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/do_post.ts#L9-L23\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/do_post.ts#L9-L23</a></p>\n<p>必要に応じて除外しているものを活用してみるのも良さそう<br>\nなおGASの利用枠</p>\n<h3 id=\"src%2Fgas%2Fget_channels.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fget_channels.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/get_channels.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/get_channels.ts</a></h3>\n<p>GASとして使用する関数<br>\nSlack APIを叩いてすべてのチャンネルを取得する<br>\nスクリプトエディターで定期実行するトリガーを設定できるのでこの関数を時間実行できると良いかも</p>\n<p>トリガーの設定もコード化したい場合は下記のコードを参考にすればいけるんですかね？（試してない<br style=\"display: none\">\n<div class=\"embed-zenn-link\"><iframe src=\"https://card.zenn.dev/?url=https%3A%2F%2Fdevelopers.google.com%2Fapps-script%2Fguides%2Ftriggers%2Finstallable%23managing_triggers_programmatically\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\"></iframe></div><a href=\"https://developers.google.com/apps-script/guides/triggers/installable#managing_triggers_programmatically\" style=\"display: none\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.google.com/apps-script/guides/triggers/installable#managing_triggers_programmatically</a></p>\n<h3 id=\"src%2Fgas%2Fget_users.ts\"><a class=\"header-anchor-link\" href=\"#src%2Fgas%2Fget_users.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/gas/get_users.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/gas/get_users.ts</a></h3>\n<p>GASとして使用する関数<br>\nSlack APIを叩いてすべてのユーザを取得する</p>\n<h3 id=\"src%2Futils%2Ftasks%2Fclasp_json.ts\"><a class=\"header-anchor-link\" href=\"#src%2Futils%2Ftasks%2Fclasp_json.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/utils/tasks/clasp_json.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/utils/tasks/clasp_json.ts</a></h3>\n<p>JSONファイルでも型定義したい思いが強くてtsファイル経由で読み込もうとしている</p>\n<h3 id=\"src%2Futils%2Ftasks%2Fclasprc_json.ts\"><a class=\"header-anchor-link\" href=\"#src%2Futils%2Ftasks%2Fclasprc_json.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/utils/tasks/clasprc_json.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/utils/tasks/clasprc_json.ts</a></h3>\n<p>JSONファイルでも型定義したい思いが強くてtsファイル経由で読み込もうとしている</p>\n<h3 id=\"src%2Futils%2Ftasks%2Fgoogle.ts\"><a class=\"header-anchor-link\" href=\"#src%2Futils%2Ftasks%2Fgoogle.ts\" aria-hidden=\"true\"></a> <a href=\"https://github.com/igara/bot_slack_matome_channnel/blob/master/src/utils/tasks/google.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/utils/tasks/google.ts</a></h3>\n<p>Google API クライアント扱う</p>\n\n</div>",
    "link": "/blogs/zenn/Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた",
    "ogp": {
      "large": "/ogp/1200x630/blogs/zenn/Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた.png",
      "small": "/ogp/630x630/blogs/zenn/Slackのチャンネルのメッセージを1つのチャンネルに集約するSlackボットを作ってみた.png"
    }
  }
]